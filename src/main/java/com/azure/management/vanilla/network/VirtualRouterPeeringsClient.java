// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.management.vanilla.network;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.PollerFlux;
import com.azure.management.vanilla.network.implementation.VirtualRouterPeeringsImpl;
import com.azure.management.vanilla.network.models.VirtualRouterPeering;

/** Initializes a new instance of the synchronous NetworkManagementClient type. */
@ServiceClient(builder = NetworkManagementClientBuilder.class)
public final class VirtualRouterPeeringsClient {
    private VirtualRouterPeeringsImpl serviceClient;

    /** Initializes an instance of VirtualRouterPeerings client. */
    VirtualRouterPeeringsClient(VirtualRouterPeeringsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Deletes the specified peering from a Virtual Router.
     *
     * @param resourceGroupName The name of the resource group.
     * @param virtualRouterName The name of the Virtual Router.
     * @param peeringName The name of the peering.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PollerFlux<PollResult<Void>, Void> beginDelete(
        String resourceGroupName, String virtualRouterName, String peeringName) {
        return this.serviceClient.beginDelete(resourceGroupName, virtualRouterName, peeringName);
    }

    /**
     * Deletes the specified peering from a Virtual Router.
     *
     * @param resourceGroupName The name of the resource group.
     * @param virtualRouterName The name of the Virtual Router.
     * @param peeringName The name of the peering.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PollerFlux<PollResult<Void>, Void> beginDelete(
        String resourceGroupName, String virtualRouterName, String peeringName, Context context) {
        return this.serviceClient.beginDelete(resourceGroupName, virtualRouterName, peeringName, context);
    }

    /**
     * Deletes the specified peering from a Virtual Router.
     *
     * @param resourceGroupName The name of the resource group.
     * @param virtualRouterName The name of the Virtual Router.
     * @param peeringName The name of the peering.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String virtualRouterName, String peeringName) {
        this.serviceClient.delete(resourceGroupName, virtualRouterName, peeringName);
    }

    /**
     * Deletes the specified peering from a Virtual Router.
     *
     * @param resourceGroupName The name of the resource group.
     * @param virtualRouterName The name of the Virtual Router.
     * @param peeringName The name of the peering.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String virtualRouterName, String peeringName, Context context) {
        this.serviceClient.delete(resourceGroupName, virtualRouterName, peeringName, context);
    }

    /**
     * Gets the specified Virtual Router Peering.
     *
     * @param resourceGroupName The name of the resource group.
     * @param virtualRouterName The name of the Virtual Router.
     * @param peeringName The name of the Virtual Router Peering.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the specified Virtual Router Peering.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public VirtualRouterPeering get(String resourceGroupName, String virtualRouterName, String peeringName) {
        return this.serviceClient.get(resourceGroupName, virtualRouterName, peeringName);
    }

    /**
     * Gets the specified Virtual Router Peering.
     *
     * @param resourceGroupName The name of the resource group.
     * @param virtualRouterName The name of the Virtual Router.
     * @param peeringName The name of the Virtual Router Peering.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the specified Virtual Router Peering.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public VirtualRouterPeering get(
        String resourceGroupName, String virtualRouterName, String peeringName, Context context) {
        return this.serviceClient.get(resourceGroupName, virtualRouterName, peeringName, context);
    }

    /**
     * Creates or updates the specified Virtual Router Peering.
     *
     * @param resourceGroupName The name of the resource group.
     * @param virtualRouterName The name of the Virtual Router.
     * @param peeringName The name of the Virtual Router Peering.
     * @param parameters Virtual Router Peering resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return virtual Router Peering resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PollerFlux<PollResult<VirtualRouterPeering>, VirtualRouterPeering> beginCreateOrUpdate(
        String resourceGroupName, String virtualRouterName, String peeringName, VirtualRouterPeering parameters) {
        return this.serviceClient.beginCreateOrUpdate(resourceGroupName, virtualRouterName, peeringName, parameters);
    }

    /**
     * Creates or updates the specified Virtual Router Peering.
     *
     * @param resourceGroupName The name of the resource group.
     * @param virtualRouterName The name of the Virtual Router.
     * @param peeringName The name of the Virtual Router Peering.
     * @param parameters Virtual Router Peering resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return virtual Router Peering resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PollerFlux<PollResult<VirtualRouterPeering>, VirtualRouterPeering> beginCreateOrUpdate(
        String resourceGroupName,
        String virtualRouterName,
        String peeringName,
        VirtualRouterPeering parameters,
        Context context) {
        return this
            .serviceClient
            .beginCreateOrUpdate(resourceGroupName, virtualRouterName, peeringName, parameters, context);
    }

    /**
     * Creates or updates the specified Virtual Router Peering.
     *
     * @param resourceGroupName The name of the resource group.
     * @param virtualRouterName The name of the Virtual Router.
     * @param peeringName The name of the Virtual Router Peering.
     * @param parameters Virtual Router Peering resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return virtual Router Peering resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public VirtualRouterPeering createOrUpdate(
        String resourceGroupName, String virtualRouterName, String peeringName, VirtualRouterPeering parameters) {
        return this.serviceClient.createOrUpdate(resourceGroupName, virtualRouterName, peeringName, parameters);
    }

    /**
     * Creates or updates the specified Virtual Router Peering.
     *
     * @param resourceGroupName The name of the resource group.
     * @param virtualRouterName The name of the Virtual Router.
     * @param peeringName The name of the Virtual Router Peering.
     * @param parameters Virtual Router Peering resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return virtual Router Peering resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public VirtualRouterPeering createOrUpdate(
        String resourceGroupName,
        String virtualRouterName,
        String peeringName,
        VirtualRouterPeering parameters,
        Context context) {
        return this
            .serviceClient
            .createOrUpdate(resourceGroupName, virtualRouterName, peeringName, parameters, context);
    }

    /**
     * Lists all Virtual Router Peerings in a Virtual Router resource.
     *
     * @param resourceGroupName The name of the resource group.
     * @param virtualRouterName The name of the Virtual Router.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for ListVirtualRouterPeerings API service call.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<VirtualRouterPeering> list(String resourceGroupName, String virtualRouterName) {
        return this.serviceClient.list(resourceGroupName, virtualRouterName);
    }

    /**
     * Lists all Virtual Router Peerings in a Virtual Router resource.
     *
     * @param resourceGroupName The name of the resource group.
     * @param virtualRouterName The name of the Virtual Router.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for ListVirtualRouterPeerings API service call.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<VirtualRouterPeering> list(
        String resourceGroupName, String virtualRouterName, Context context) {
        return this.serviceClient.list(resourceGroupName, virtualRouterName, context);
    }

    /**
     * Deletes the specified peering from a Virtual Router.
     *
     * @param resourceGroupName The name of the resource group.
     * @param virtualRouterName The name of the Virtual Router.
     * @param peeringName The name of the peering.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void beginDeleteWithoutPolling(String resourceGroupName, String virtualRouterName, String peeringName) {
        this.serviceClient.beginDeleteWithoutPolling(resourceGroupName, virtualRouterName, peeringName);
    }

    /**
     * Deletes the specified peering from a Virtual Router.
     *
     * @param resourceGroupName The name of the resource group.
     * @param virtualRouterName The name of the Virtual Router.
     * @param peeringName The name of the peering.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void beginDeleteWithoutPolling(
        String resourceGroupName, String virtualRouterName, String peeringName, Context context) {
        this.serviceClient.beginDeleteWithoutPolling(resourceGroupName, virtualRouterName, peeringName, context);
    }

    /**
     * Creates or updates the specified Virtual Router Peering.
     *
     * @param resourceGroupName The name of the resource group.
     * @param virtualRouterName The name of the Virtual Router.
     * @param peeringName The name of the Virtual Router Peering.
     * @param parameters Virtual Router Peering resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return virtual Router Peering resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public VirtualRouterPeering beginCreateOrUpdateWithoutPolling(
        String resourceGroupName, String virtualRouterName, String peeringName, VirtualRouterPeering parameters) {
        return this
            .serviceClient
            .beginCreateOrUpdateWithoutPolling(resourceGroupName, virtualRouterName, peeringName, parameters);
    }

    /**
     * Creates or updates the specified Virtual Router Peering.
     *
     * @param resourceGroupName The name of the resource group.
     * @param virtualRouterName The name of the Virtual Router.
     * @param peeringName The name of the Virtual Router Peering.
     * @param parameters Virtual Router Peering resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return virtual Router Peering resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public VirtualRouterPeering beginCreateOrUpdateWithoutPolling(
        String resourceGroupName,
        String virtualRouterName,
        String peeringName,
        VirtualRouterPeering parameters,
        Context context) {
        return this
            .serviceClient
            .beginCreateOrUpdateWithoutPolling(resourceGroupName, virtualRouterName, peeringName, parameters, context);
    }
}
