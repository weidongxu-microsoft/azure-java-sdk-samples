// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.management.vanilla.network;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.management.vanilla.network.implementation.LoadBalancerFrontendIpConfigurationsImpl;
import com.azure.management.vanilla.network.models.FrontendIpConfiguration;

/** Initializes a new instance of the synchronous NetworkManagementClient type. */
@ServiceClient(builder = NetworkManagementClientBuilder.class)
public final class LoadBalancerFrontendIpConfigurationsClient {
    private LoadBalancerFrontendIpConfigurationsImpl serviceClient;

    /** Initializes an instance of LoadBalancerFrontendIpConfigurations client. */
    LoadBalancerFrontendIpConfigurationsClient(LoadBalancerFrontendIpConfigurationsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Gets all the load balancer frontend IP configurations.
     *
     * @param resourceGroupName The name of the resource group.
     * @param loadBalancerName The name of the load balancer.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the load balancer frontend IP configurations.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<FrontendIpConfiguration> list(String resourceGroupName, String loadBalancerName) {
        return this.serviceClient.list(resourceGroupName, loadBalancerName);
    }

    /**
     * Gets all the load balancer frontend IP configurations.
     *
     * @param resourceGroupName The name of the resource group.
     * @param loadBalancerName The name of the load balancer.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the load balancer frontend IP configurations.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<FrontendIpConfiguration> list(
        String resourceGroupName, String loadBalancerName, Context context) {
        return this.serviceClient.list(resourceGroupName, loadBalancerName, context);
    }

    /**
     * Gets load balancer frontend IP configuration.
     *
     * @param resourceGroupName The name of the resource group.
     * @param loadBalancerName The name of the load balancer.
     * @param frontendIpConfigurationName The name of the frontend IP configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return load balancer frontend IP configuration.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public FrontendIpConfiguration get(
        String resourceGroupName, String loadBalancerName, String frontendIpConfigurationName) {
        return this.serviceClient.get(resourceGroupName, loadBalancerName, frontendIpConfigurationName);
    }

    /**
     * Gets load balancer frontend IP configuration.
     *
     * @param resourceGroupName The name of the resource group.
     * @param loadBalancerName The name of the load balancer.
     * @param frontendIpConfigurationName The name of the frontend IP configuration.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return load balancer frontend IP configuration.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public FrontendIpConfiguration get(
        String resourceGroupName, String loadBalancerName, String frontendIpConfigurationName, Context context) {
        return this.serviceClient.get(resourceGroupName, loadBalancerName, frontendIpConfigurationName, context);
    }
}
