// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.management.vanilla.network.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/** The LoadBalancerBackendAddress model. */
@JsonFlatten
@Fluent
public class LoadBalancerBackendAddress {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(LoadBalancerBackendAddress.class);

    /*
     * Name of the backend address.
     */
    @JsonProperty(value = "name")
    private String name;

    /*
     * Reference to an existing virtual network.
     */
    @JsonProperty(value = "properties.virtualNetwork")
    private VirtualNetwork virtualNetwork;

    /*
     * IP Address belonging to the referenced virtual network.
     */
    @JsonProperty(value = "properties.ipAddress")
    private String ipAddress;

    /*
     * Reference to IP address defined in network interfaces.
     */
    @JsonProperty(value = "properties.networkInterfaceIPConfiguration")
    private NetworkInterfaceIpConfiguration networkInterfaceIpConfiguration;

    /**
     * Get the name property: Name of the backend address.
     *
     * @return the name value.
     */
    public String getName() {
        return this.name;
    }

    /**
     * Set the name property: Name of the backend address.
     *
     * @param name the name value to set.
     * @return the LoadBalancerBackendAddress object itself.
     */
    public LoadBalancerBackendAddress setName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the virtualNetwork property: Reference to an existing virtual network.
     *
     * @return the virtualNetwork value.
     */
    public VirtualNetwork getVirtualNetwork() {
        return this.virtualNetwork;
    }

    /**
     * Set the virtualNetwork property: Reference to an existing virtual network.
     *
     * @param virtualNetwork the virtualNetwork value to set.
     * @return the LoadBalancerBackendAddress object itself.
     */
    public LoadBalancerBackendAddress setVirtualNetwork(VirtualNetwork virtualNetwork) {
        this.virtualNetwork = virtualNetwork;
        return this;
    }

    /**
     * Get the ipAddress property: IP Address belonging to the referenced virtual network.
     *
     * @return the ipAddress value.
     */
    public String getIpAddress() {
        return this.ipAddress;
    }

    /**
     * Set the ipAddress property: IP Address belonging to the referenced virtual network.
     *
     * @param ipAddress the ipAddress value to set.
     * @return the LoadBalancerBackendAddress object itself.
     */
    public LoadBalancerBackendAddress setIpAddress(String ipAddress) {
        this.ipAddress = ipAddress;
        return this;
    }

    /**
     * Get the networkInterfaceIpConfiguration property: Reference to IP address defined in network interfaces.
     *
     * @return the networkInterfaceIpConfiguration value.
     */
    public NetworkInterfaceIpConfiguration getNetworkInterfaceIpConfiguration() {
        return this.networkInterfaceIpConfiguration;
    }

    /**
     * Set the networkInterfaceIpConfiguration property: Reference to IP address defined in network interfaces.
     *
     * @param networkInterfaceIpConfiguration the networkInterfaceIpConfiguration value to set.
     * @return the LoadBalancerBackendAddress object itself.
     */
    public LoadBalancerBackendAddress setNetworkInterfaceIpConfiguration(
        NetworkInterfaceIpConfiguration networkInterfaceIpConfiguration) {
        this.networkInterfaceIpConfiguration = networkInterfaceIpConfiguration;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (getVirtualNetwork() != null) {
            getVirtualNetwork().validate();
        }
        if (getNetworkInterfaceIpConfiguration() != null) {
            getNetworkInterfaceIpConfiguration().validate();
        }
    }
}
