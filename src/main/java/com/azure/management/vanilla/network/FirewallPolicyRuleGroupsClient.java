// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.management.vanilla.network;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.PollerFlux;
import com.azure.management.vanilla.network.implementation.FirewallPolicyRuleGroupsImpl;
import com.azure.management.vanilla.network.models.FirewallPolicyRuleGroup;

/** Initializes a new instance of the synchronous NetworkManagementClient type. */
@ServiceClient(builder = NetworkManagementClientBuilder.class)
public final class FirewallPolicyRuleGroupsClient {
    private FirewallPolicyRuleGroupsImpl serviceClient;

    /** Initializes an instance of FirewallPolicyRuleGroups client. */
    FirewallPolicyRuleGroupsClient(FirewallPolicyRuleGroupsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Deletes the specified FirewallPolicyRuleGroup.
     *
     * @param resourceGroupName The name of the resource group.
     * @param firewallPolicyName The name of the Firewall Policy.
     * @param ruleGroupName The name of the FirewallPolicyRuleGroup.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PollerFlux<PollResult<Void>, Void> beginDelete(
        String resourceGroupName, String firewallPolicyName, String ruleGroupName) {
        return this.serviceClient.beginDelete(resourceGroupName, firewallPolicyName, ruleGroupName);
    }

    /**
     * Deletes the specified FirewallPolicyRuleGroup.
     *
     * @param resourceGroupName The name of the resource group.
     * @param firewallPolicyName The name of the Firewall Policy.
     * @param ruleGroupName The name of the FirewallPolicyRuleGroup.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PollerFlux<PollResult<Void>, Void> beginDelete(
        String resourceGroupName, String firewallPolicyName, String ruleGroupName, Context context) {
        return this.serviceClient.beginDelete(resourceGroupName, firewallPolicyName, ruleGroupName, context);
    }

    /**
     * Deletes the specified FirewallPolicyRuleGroup.
     *
     * @param resourceGroupName The name of the resource group.
     * @param firewallPolicyName The name of the Firewall Policy.
     * @param ruleGroupName The name of the FirewallPolicyRuleGroup.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String firewallPolicyName, String ruleGroupName) {
        this.serviceClient.delete(resourceGroupName, firewallPolicyName, ruleGroupName);
    }

    /**
     * Deletes the specified FirewallPolicyRuleGroup.
     *
     * @param resourceGroupName The name of the resource group.
     * @param firewallPolicyName The name of the Firewall Policy.
     * @param ruleGroupName The name of the FirewallPolicyRuleGroup.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String firewallPolicyName, String ruleGroupName, Context context) {
        this.serviceClient.delete(resourceGroupName, firewallPolicyName, ruleGroupName, context);
    }

    /**
     * Gets the specified FirewallPolicyRuleGroup.
     *
     * @param resourceGroupName The name of the resource group.
     * @param firewallPolicyName The name of the Firewall Policy.
     * @param ruleGroupName The name of the FirewallPolicyRuleGroup.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the specified FirewallPolicyRuleGroup.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public FirewallPolicyRuleGroup get(String resourceGroupName, String firewallPolicyName, String ruleGroupName) {
        return this.serviceClient.get(resourceGroupName, firewallPolicyName, ruleGroupName);
    }

    /**
     * Gets the specified FirewallPolicyRuleGroup.
     *
     * @param resourceGroupName The name of the resource group.
     * @param firewallPolicyName The name of the Firewall Policy.
     * @param ruleGroupName The name of the FirewallPolicyRuleGroup.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the specified FirewallPolicyRuleGroup.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public FirewallPolicyRuleGroup get(
        String resourceGroupName, String firewallPolicyName, String ruleGroupName, Context context) {
        return this.serviceClient.get(resourceGroupName, firewallPolicyName, ruleGroupName, context);
    }

    /**
     * Creates or updates the specified FirewallPolicyRuleGroup.
     *
     * @param resourceGroupName The name of the resource group.
     * @param firewallPolicyName The name of the Firewall Policy.
     * @param ruleGroupName The name of the FirewallPolicyRuleGroup.
     * @param parameters Rule Group resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return rule Group resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PollerFlux<PollResult<FirewallPolicyRuleGroup>, FirewallPolicyRuleGroup> beginCreateOrUpdate(
        String resourceGroupName, String firewallPolicyName, String ruleGroupName, FirewallPolicyRuleGroup parameters) {
        return this.serviceClient.beginCreateOrUpdate(resourceGroupName, firewallPolicyName, ruleGroupName, parameters);
    }

    /**
     * Creates or updates the specified FirewallPolicyRuleGroup.
     *
     * @param resourceGroupName The name of the resource group.
     * @param firewallPolicyName The name of the Firewall Policy.
     * @param ruleGroupName The name of the FirewallPolicyRuleGroup.
     * @param parameters Rule Group resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return rule Group resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PollerFlux<PollResult<FirewallPolicyRuleGroup>, FirewallPolicyRuleGroup> beginCreateOrUpdate(
        String resourceGroupName,
        String firewallPolicyName,
        String ruleGroupName,
        FirewallPolicyRuleGroup parameters,
        Context context) {
        return this
            .serviceClient
            .beginCreateOrUpdate(resourceGroupName, firewallPolicyName, ruleGroupName, parameters, context);
    }

    /**
     * Creates or updates the specified FirewallPolicyRuleGroup.
     *
     * @param resourceGroupName The name of the resource group.
     * @param firewallPolicyName The name of the Firewall Policy.
     * @param ruleGroupName The name of the FirewallPolicyRuleGroup.
     * @param parameters Rule Group resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return rule Group resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public FirewallPolicyRuleGroup createOrUpdate(
        String resourceGroupName, String firewallPolicyName, String ruleGroupName, FirewallPolicyRuleGroup parameters) {
        return this.serviceClient.createOrUpdate(resourceGroupName, firewallPolicyName, ruleGroupName, parameters);
    }

    /**
     * Creates or updates the specified FirewallPolicyRuleGroup.
     *
     * @param resourceGroupName The name of the resource group.
     * @param firewallPolicyName The name of the Firewall Policy.
     * @param ruleGroupName The name of the FirewallPolicyRuleGroup.
     * @param parameters Rule Group resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return rule Group resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public FirewallPolicyRuleGroup createOrUpdate(
        String resourceGroupName,
        String firewallPolicyName,
        String ruleGroupName,
        FirewallPolicyRuleGroup parameters,
        Context context) {
        return this
            .serviceClient
            .createOrUpdate(resourceGroupName, firewallPolicyName, ruleGroupName, parameters, context);
    }

    /**
     * Lists all FirewallPolicyRuleGroups in a FirewallPolicy resource.
     *
     * @param resourceGroupName The name of the resource group.
     * @param firewallPolicyName The name of the Firewall Policy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for ListFirewallPolicyRuleGroups API service call.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<FirewallPolicyRuleGroup> list(String resourceGroupName, String firewallPolicyName) {
        return this.serviceClient.list(resourceGroupName, firewallPolicyName);
    }

    /**
     * Lists all FirewallPolicyRuleGroups in a FirewallPolicy resource.
     *
     * @param resourceGroupName The name of the resource group.
     * @param firewallPolicyName The name of the Firewall Policy.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for ListFirewallPolicyRuleGroups API service call.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<FirewallPolicyRuleGroup> list(
        String resourceGroupName, String firewallPolicyName, Context context) {
        return this.serviceClient.list(resourceGroupName, firewallPolicyName, context);
    }

    /**
     * Deletes the specified FirewallPolicyRuleGroup.
     *
     * @param resourceGroupName The name of the resource group.
     * @param firewallPolicyName The name of the Firewall Policy.
     * @param ruleGroupName The name of the FirewallPolicyRuleGroup.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void beginDeleteWithoutPolling(String resourceGroupName, String firewallPolicyName, String ruleGroupName) {
        this.serviceClient.beginDeleteWithoutPolling(resourceGroupName, firewallPolicyName, ruleGroupName);
    }

    /**
     * Deletes the specified FirewallPolicyRuleGroup.
     *
     * @param resourceGroupName The name of the resource group.
     * @param firewallPolicyName The name of the Firewall Policy.
     * @param ruleGroupName The name of the FirewallPolicyRuleGroup.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void beginDeleteWithoutPolling(
        String resourceGroupName, String firewallPolicyName, String ruleGroupName, Context context) {
        this.serviceClient.beginDeleteWithoutPolling(resourceGroupName, firewallPolicyName, ruleGroupName, context);
    }

    /**
     * Creates or updates the specified FirewallPolicyRuleGroup.
     *
     * @param resourceGroupName The name of the resource group.
     * @param firewallPolicyName The name of the Firewall Policy.
     * @param ruleGroupName The name of the FirewallPolicyRuleGroup.
     * @param parameters Rule Group resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return rule Group resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public FirewallPolicyRuleGroup beginCreateOrUpdateWithoutPolling(
        String resourceGroupName, String firewallPolicyName, String ruleGroupName, FirewallPolicyRuleGroup parameters) {
        return this
            .serviceClient
            .beginCreateOrUpdateWithoutPolling(resourceGroupName, firewallPolicyName, ruleGroupName, parameters);
    }

    /**
     * Creates or updates the specified FirewallPolicyRuleGroup.
     *
     * @param resourceGroupName The name of the resource group.
     * @param firewallPolicyName The name of the Firewall Policy.
     * @param ruleGroupName The name of the FirewallPolicyRuleGroup.
     * @param parameters Rule Group resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return rule Group resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public FirewallPolicyRuleGroup beginCreateOrUpdateWithoutPolling(
        String resourceGroupName,
        String firewallPolicyName,
        String ruleGroupName,
        FirewallPolicyRuleGroup parameters,
        Context context) {
        return this
            .serviceClient
            .beginCreateOrUpdateWithoutPolling(
                resourceGroupName, firewallPolicyName, ruleGroupName, parameters, context);
    }
}
