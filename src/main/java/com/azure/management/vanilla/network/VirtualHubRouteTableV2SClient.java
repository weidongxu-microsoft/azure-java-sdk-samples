// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.management.vanilla.network;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.PollerFlux;
import com.azure.management.vanilla.network.implementation.VirtualHubRouteTableV2SImpl;
import com.azure.management.vanilla.network.models.VirtualHubRouteTableV2;

/** Initializes a new instance of the synchronous NetworkManagementClient type. */
@ServiceClient(builder = NetworkManagementClientBuilder.class)
public final class VirtualHubRouteTableV2SClient {
    private VirtualHubRouteTableV2SImpl serviceClient;

    /** Initializes an instance of VirtualHubRouteTableV2S client. */
    VirtualHubRouteTableV2SClient(VirtualHubRouteTableV2SImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Retrieves the details of a VirtualHubRouteTableV2.
     *
     * @param resourceGroupName The resource group name of the VirtualHubRouteTableV2.
     * @param virtualHubName The name of the VirtualHub.
     * @param routeTableName The name of the VirtualHubRouteTableV2.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return virtualHubRouteTableV2 Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public VirtualHubRouteTableV2 get(String resourceGroupName, String virtualHubName, String routeTableName) {
        return this.serviceClient.get(resourceGroupName, virtualHubName, routeTableName);
    }

    /**
     * Retrieves the details of a VirtualHubRouteTableV2.
     *
     * @param resourceGroupName The resource group name of the VirtualHubRouteTableV2.
     * @param virtualHubName The name of the VirtualHub.
     * @param routeTableName The name of the VirtualHubRouteTableV2.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return virtualHubRouteTableV2 Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public VirtualHubRouteTableV2 get(
        String resourceGroupName, String virtualHubName, String routeTableName, Context context) {
        return this.serviceClient.get(resourceGroupName, virtualHubName, routeTableName, context);
    }

    /**
     * Creates a VirtualHubRouteTableV2 resource if it doesn't exist else updates the existing VirtualHubRouteTableV2.
     *
     * @param resourceGroupName The resource group name of the VirtualHub.
     * @param virtualHubName The name of the VirtualHub.
     * @param routeTableName The name of the VirtualHubRouteTableV2.
     * @param virtualHubRouteTableV2Parameters VirtualHubRouteTableV2 Resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return virtualHubRouteTableV2 Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PollerFlux<PollResult<VirtualHubRouteTableV2>, VirtualHubRouteTableV2> beginCreateOrUpdate(
        String resourceGroupName,
        String virtualHubName,
        String routeTableName,
        VirtualHubRouteTableV2 virtualHubRouteTableV2Parameters) {
        return this
            .serviceClient
            .beginCreateOrUpdate(resourceGroupName, virtualHubName, routeTableName, virtualHubRouteTableV2Parameters);
    }

    /**
     * Creates a VirtualHubRouteTableV2 resource if it doesn't exist else updates the existing VirtualHubRouteTableV2.
     *
     * @param resourceGroupName The resource group name of the VirtualHub.
     * @param virtualHubName The name of the VirtualHub.
     * @param routeTableName The name of the VirtualHubRouteTableV2.
     * @param virtualHubRouteTableV2Parameters VirtualHubRouteTableV2 Resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return virtualHubRouteTableV2 Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PollerFlux<PollResult<VirtualHubRouteTableV2>, VirtualHubRouteTableV2> beginCreateOrUpdate(
        String resourceGroupName,
        String virtualHubName,
        String routeTableName,
        VirtualHubRouteTableV2 virtualHubRouteTableV2Parameters,
        Context context) {
        return this
            .serviceClient
            .beginCreateOrUpdate(
                resourceGroupName, virtualHubName, routeTableName, virtualHubRouteTableV2Parameters, context);
    }

    /**
     * Creates a VirtualHubRouteTableV2 resource if it doesn't exist else updates the existing VirtualHubRouteTableV2.
     *
     * @param resourceGroupName The resource group name of the VirtualHub.
     * @param virtualHubName The name of the VirtualHub.
     * @param routeTableName The name of the VirtualHubRouteTableV2.
     * @param virtualHubRouteTableV2Parameters VirtualHubRouteTableV2 Resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return virtualHubRouteTableV2 Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public VirtualHubRouteTableV2 createOrUpdate(
        String resourceGroupName,
        String virtualHubName,
        String routeTableName,
        VirtualHubRouteTableV2 virtualHubRouteTableV2Parameters) {
        return this
            .serviceClient
            .createOrUpdate(resourceGroupName, virtualHubName, routeTableName, virtualHubRouteTableV2Parameters);
    }

    /**
     * Creates a VirtualHubRouteTableV2 resource if it doesn't exist else updates the existing VirtualHubRouteTableV2.
     *
     * @param resourceGroupName The resource group name of the VirtualHub.
     * @param virtualHubName The name of the VirtualHub.
     * @param routeTableName The name of the VirtualHubRouteTableV2.
     * @param virtualHubRouteTableV2Parameters VirtualHubRouteTableV2 Resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return virtualHubRouteTableV2 Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public VirtualHubRouteTableV2 createOrUpdate(
        String resourceGroupName,
        String virtualHubName,
        String routeTableName,
        VirtualHubRouteTableV2 virtualHubRouteTableV2Parameters,
        Context context) {
        return this
            .serviceClient
            .createOrUpdate(
                resourceGroupName, virtualHubName, routeTableName, virtualHubRouteTableV2Parameters, context);
    }

    /**
     * Deletes a VirtualHubRouteTableV2.
     *
     * @param resourceGroupName The resource group name of the VirtualHubRouteTableV2.
     * @param virtualHubName The name of the VirtualHub.
     * @param routeTableName The name of the VirtualHubRouteTableV2.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PollerFlux<PollResult<Void>, Void> beginDelete(
        String resourceGroupName, String virtualHubName, String routeTableName) {
        return this.serviceClient.beginDelete(resourceGroupName, virtualHubName, routeTableName);
    }

    /**
     * Deletes a VirtualHubRouteTableV2.
     *
     * @param resourceGroupName The resource group name of the VirtualHubRouteTableV2.
     * @param virtualHubName The name of the VirtualHub.
     * @param routeTableName The name of the VirtualHubRouteTableV2.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PollerFlux<PollResult<Void>, Void> beginDelete(
        String resourceGroupName, String virtualHubName, String routeTableName, Context context) {
        return this.serviceClient.beginDelete(resourceGroupName, virtualHubName, routeTableName, context);
    }

    /**
     * Deletes a VirtualHubRouteTableV2.
     *
     * @param resourceGroupName The resource group name of the VirtualHubRouteTableV2.
     * @param virtualHubName The name of the VirtualHub.
     * @param routeTableName The name of the VirtualHubRouteTableV2.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String virtualHubName, String routeTableName) {
        this.serviceClient.delete(resourceGroupName, virtualHubName, routeTableName);
    }

    /**
     * Deletes a VirtualHubRouteTableV2.
     *
     * @param resourceGroupName The resource group name of the VirtualHubRouteTableV2.
     * @param virtualHubName The name of the VirtualHub.
     * @param routeTableName The name of the VirtualHubRouteTableV2.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String virtualHubName, String routeTableName, Context context) {
        this.serviceClient.delete(resourceGroupName, virtualHubName, routeTableName, context);
    }

    /**
     * Retrieves the details of all VirtualHubRouteTableV2s.
     *
     * @param resourceGroupName The resource group name of the VirtualHub.
     * @param virtualHubName The name of the VirtualHub.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of VirtualHubRouteTableV2s and a URL nextLink to get the next set of results.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<VirtualHubRouteTableV2> list(String resourceGroupName, String virtualHubName) {
        return this.serviceClient.list(resourceGroupName, virtualHubName);
    }

    /**
     * Retrieves the details of all VirtualHubRouteTableV2s.
     *
     * @param resourceGroupName The resource group name of the VirtualHub.
     * @param virtualHubName The name of the VirtualHub.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of VirtualHubRouteTableV2s and a URL nextLink to get the next set of results.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<VirtualHubRouteTableV2> list(
        String resourceGroupName, String virtualHubName, Context context) {
        return this.serviceClient.list(resourceGroupName, virtualHubName, context);
    }

    /**
     * Creates a VirtualHubRouteTableV2 resource if it doesn't exist else updates the existing VirtualHubRouteTableV2.
     *
     * @param resourceGroupName The resource group name of the VirtualHub.
     * @param virtualHubName The name of the VirtualHub.
     * @param routeTableName The name of the VirtualHubRouteTableV2.
     * @param virtualHubRouteTableV2Parameters VirtualHubRouteTableV2 Resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return virtualHubRouteTableV2 Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public VirtualHubRouteTableV2 beginCreateOrUpdateWithoutPolling(
        String resourceGroupName,
        String virtualHubName,
        String routeTableName,
        VirtualHubRouteTableV2 virtualHubRouteTableV2Parameters) {
        return this
            .serviceClient
            .beginCreateOrUpdateWithoutPolling(
                resourceGroupName, virtualHubName, routeTableName, virtualHubRouteTableV2Parameters);
    }

    /**
     * Creates a VirtualHubRouteTableV2 resource if it doesn't exist else updates the existing VirtualHubRouteTableV2.
     *
     * @param resourceGroupName The resource group name of the VirtualHub.
     * @param virtualHubName The name of the VirtualHub.
     * @param routeTableName The name of the VirtualHubRouteTableV2.
     * @param virtualHubRouteTableV2Parameters VirtualHubRouteTableV2 Resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return virtualHubRouteTableV2 Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public VirtualHubRouteTableV2 beginCreateOrUpdateWithoutPolling(
        String resourceGroupName,
        String virtualHubName,
        String routeTableName,
        VirtualHubRouteTableV2 virtualHubRouteTableV2Parameters,
        Context context) {
        return this
            .serviceClient
            .beginCreateOrUpdateWithoutPolling(
                resourceGroupName, virtualHubName, routeTableName, virtualHubRouteTableV2Parameters, context);
    }

    /**
     * Deletes a VirtualHubRouteTableV2.
     *
     * @param resourceGroupName The resource group name of the VirtualHubRouteTableV2.
     * @param virtualHubName The name of the VirtualHub.
     * @param routeTableName The name of the VirtualHubRouteTableV2.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void beginDeleteWithoutPolling(String resourceGroupName, String virtualHubName, String routeTableName) {
        this.serviceClient.beginDeleteWithoutPolling(resourceGroupName, virtualHubName, routeTableName);
    }

    /**
     * Deletes a VirtualHubRouteTableV2.
     *
     * @param resourceGroupName The resource group name of the VirtualHubRouteTableV2.
     * @param virtualHubName The name of the VirtualHub.
     * @param routeTableName The name of the VirtualHubRouteTableV2.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void beginDeleteWithoutPolling(
        String resourceGroupName, String virtualHubName, String routeTableName, Context context) {
        this.serviceClient.beginDeleteWithoutPolling(resourceGroupName, virtualHubName, routeTableName, context);
    }
}
