// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.management.vanilla.network;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.Response;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.PollerFlux;
import com.azure.management.vanilla.network.implementation.VpnServerConfigurationsImpl;
import com.azure.management.vanilla.network.models.VpnServerConfiguration;
import java.nio.ByteBuffer;
import java.util.Map;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/** Initializes a new instance of the asynchronous NetworkManagementClient type. */
@ServiceClient(builder = NetworkManagementClientBuilder.class)
public final class VpnServerConfigurationsAsyncClient {
    private VpnServerConfigurationsImpl serviceClient;

    /** Initializes an instance of VpnServerConfigurations client. */
    VpnServerConfigurationsAsyncClient(VpnServerConfigurationsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Retrieves the details of a VpnServerConfiguration.
     *
     * @param resourceGroupName The resource group name of the VpnServerConfiguration.
     * @param vpnServerConfigurationName The name of the VpnServerConfiguration being retrieved.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return vpnServerConfiguration Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<VpnServerConfiguration>> getByResourceGroupWithResponse(
        String resourceGroupName, String vpnServerConfigurationName) {
        return this.serviceClient.getByResourceGroupWithResponseAsync(resourceGroupName, vpnServerConfigurationName);
    }

    /**
     * Retrieves the details of a VpnServerConfiguration.
     *
     * @param resourceGroupName The resource group name of the VpnServerConfiguration.
     * @param vpnServerConfigurationName The name of the VpnServerConfiguration being retrieved.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return vpnServerConfiguration Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<VpnServerConfiguration>> getByResourceGroupWithResponse(
        String resourceGroupName, String vpnServerConfigurationName, Context context) {
        return this
            .serviceClient
            .getByResourceGroupWithResponseAsync(resourceGroupName, vpnServerConfigurationName, context);
    }

    /**
     * Retrieves the details of a VpnServerConfiguration.
     *
     * @param resourceGroupName The resource group name of the VpnServerConfiguration.
     * @param vpnServerConfigurationName The name of the VpnServerConfiguration being retrieved.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return vpnServerConfiguration Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VpnServerConfiguration> getByResourceGroup(
        String resourceGroupName, String vpnServerConfigurationName) {
        return this.serviceClient.getByResourceGroupAsync(resourceGroupName, vpnServerConfigurationName);
    }

    /**
     * Retrieves the details of a VpnServerConfiguration.
     *
     * @param resourceGroupName The resource group name of the VpnServerConfiguration.
     * @param vpnServerConfigurationName The name of the VpnServerConfiguration being retrieved.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return vpnServerConfiguration Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VpnServerConfiguration> getByResourceGroup(
        String resourceGroupName, String vpnServerConfigurationName, Context context) {
        return this.serviceClient.getByResourceGroupAsync(resourceGroupName, vpnServerConfigurationName, context);
    }

    /**
     * Creates a VpnServerConfiguration resource if it doesn't exist else updates the existing VpnServerConfiguration.
     *
     * @param resourceGroupName The resource group name of the VpnServerConfiguration.
     * @param vpnServerConfigurationName The name of the VpnServerConfiguration being created or updated.
     * @param vpnServerConfigurationParameters VpnServerConfiguration Resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return vpnServerConfiguration Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponse(
        String resourceGroupName,
        String vpnServerConfigurationName,
        VpnServerConfiguration vpnServerConfigurationParameters) {
        return this
            .serviceClient
            .createOrUpdateWithResponseAsync(
                resourceGroupName, vpnServerConfigurationName, vpnServerConfigurationParameters);
    }

    /**
     * Creates a VpnServerConfiguration resource if it doesn't exist else updates the existing VpnServerConfiguration.
     *
     * @param resourceGroupName The resource group name of the VpnServerConfiguration.
     * @param vpnServerConfigurationName The name of the VpnServerConfiguration being created or updated.
     * @param vpnServerConfigurationParameters VpnServerConfiguration Resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return vpnServerConfiguration Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponse(
        String resourceGroupName,
        String vpnServerConfigurationName,
        VpnServerConfiguration vpnServerConfigurationParameters,
        Context context) {
        return this
            .serviceClient
            .createOrUpdateWithResponseAsync(
                resourceGroupName, vpnServerConfigurationName, vpnServerConfigurationParameters, context);
    }

    /**
     * Creates a VpnServerConfiguration resource if it doesn't exist else updates the existing VpnServerConfiguration.
     *
     * @param resourceGroupName The resource group name of the VpnServerConfiguration.
     * @param vpnServerConfigurationName The name of the VpnServerConfiguration being created or updated.
     * @param vpnServerConfigurationParameters VpnServerConfiguration Resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return vpnServerConfiguration Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PollerFlux<PollResult<VpnServerConfiguration>, VpnServerConfiguration> beginCreateOrUpdate(
        String resourceGroupName,
        String vpnServerConfigurationName,
        VpnServerConfiguration vpnServerConfigurationParameters) {
        return this
            .serviceClient
            .beginCreateOrUpdate(resourceGroupName, vpnServerConfigurationName, vpnServerConfigurationParameters);
    }

    /**
     * Creates a VpnServerConfiguration resource if it doesn't exist else updates the existing VpnServerConfiguration.
     *
     * @param resourceGroupName The resource group name of the VpnServerConfiguration.
     * @param vpnServerConfigurationName The name of the VpnServerConfiguration being created or updated.
     * @param vpnServerConfigurationParameters VpnServerConfiguration Resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return vpnServerConfiguration Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PollerFlux<PollResult<VpnServerConfiguration>, VpnServerConfiguration> beginCreateOrUpdate(
        String resourceGroupName,
        String vpnServerConfigurationName,
        VpnServerConfiguration vpnServerConfigurationParameters,
        Context context) {
        return this
            .serviceClient
            .beginCreateOrUpdate(
                resourceGroupName, vpnServerConfigurationName, vpnServerConfigurationParameters, context);
    }

    /**
     * Creates a VpnServerConfiguration resource if it doesn't exist else updates the existing VpnServerConfiguration.
     *
     * @param resourceGroupName The resource group name of the VpnServerConfiguration.
     * @param vpnServerConfigurationName The name of the VpnServerConfiguration being created or updated.
     * @param vpnServerConfigurationParameters VpnServerConfiguration Resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return vpnServerConfiguration Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VpnServerConfiguration> createOrUpdate(
        String resourceGroupName,
        String vpnServerConfigurationName,
        VpnServerConfiguration vpnServerConfigurationParameters) {
        return this
            .serviceClient
            .createOrUpdateAsync(resourceGroupName, vpnServerConfigurationName, vpnServerConfigurationParameters);
    }

    /**
     * Creates a VpnServerConfiguration resource if it doesn't exist else updates the existing VpnServerConfiguration.
     *
     * @param resourceGroupName The resource group name of the VpnServerConfiguration.
     * @param vpnServerConfigurationName The name of the VpnServerConfiguration being created or updated.
     * @param vpnServerConfigurationParameters VpnServerConfiguration Resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return vpnServerConfiguration Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VpnServerConfiguration> createOrUpdate(
        String resourceGroupName,
        String vpnServerConfigurationName,
        VpnServerConfiguration vpnServerConfigurationParameters,
        Context context) {
        return this
            .serviceClient
            .createOrUpdateAsync(
                resourceGroupName, vpnServerConfigurationName, vpnServerConfigurationParameters, context);
    }

    /**
     * Updates VpnServerConfiguration tags.
     *
     * @param resourceGroupName The resource group name of the VpnServerConfiguration.
     * @param vpnServerConfigurationName The name of the VpnServerConfiguration being updated.
     * @param tags Resource tags.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return vpnServerConfiguration Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<VpnServerConfiguration>> updateTagsWithResponse(
        String resourceGroupName, String vpnServerConfigurationName, Map<String, String> tags) {
        return this.serviceClient.updateTagsWithResponseAsync(resourceGroupName, vpnServerConfigurationName, tags);
    }

    /**
     * Updates VpnServerConfiguration tags.
     *
     * @param resourceGroupName The resource group name of the VpnServerConfiguration.
     * @param vpnServerConfigurationName The name of the VpnServerConfiguration being updated.
     * @param tags Resource tags.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return vpnServerConfiguration Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<VpnServerConfiguration>> updateTagsWithResponse(
        String resourceGroupName, String vpnServerConfigurationName, Map<String, String> tags, Context context) {
        return this
            .serviceClient
            .updateTagsWithResponseAsync(resourceGroupName, vpnServerConfigurationName, tags, context);
    }

    /**
     * Updates VpnServerConfiguration tags.
     *
     * @param resourceGroupName The resource group name of the VpnServerConfiguration.
     * @param vpnServerConfigurationName The name of the VpnServerConfiguration being updated.
     * @param tags Resource tags.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return vpnServerConfiguration Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VpnServerConfiguration> updateTags(
        String resourceGroupName, String vpnServerConfigurationName, Map<String, String> tags) {
        return this.serviceClient.updateTagsAsync(resourceGroupName, vpnServerConfigurationName, tags);
    }

    /**
     * Updates VpnServerConfiguration tags.
     *
     * @param resourceGroupName The resource group name of the VpnServerConfiguration.
     * @param vpnServerConfigurationName The name of the VpnServerConfiguration being updated.
     * @param tags Resource tags.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return vpnServerConfiguration Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VpnServerConfiguration> updateTags(
        String resourceGroupName, String vpnServerConfigurationName, Map<String, String> tags, Context context) {
        return this.serviceClient.updateTagsAsync(resourceGroupName, vpnServerConfigurationName, tags, context);
    }

    /**
     * Deletes a VpnServerConfiguration.
     *
     * @param resourceGroupName The resource group name of the VpnServerConfiguration.
     * @param vpnServerConfigurationName The name of the VpnServerConfiguration being deleted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Flux<ByteBuffer>>> deleteWithResponse(
        String resourceGroupName, String vpnServerConfigurationName) {
        return this.serviceClient.deleteWithResponseAsync(resourceGroupName, vpnServerConfigurationName);
    }

    /**
     * Deletes a VpnServerConfiguration.
     *
     * @param resourceGroupName The resource group name of the VpnServerConfiguration.
     * @param vpnServerConfigurationName The name of the VpnServerConfiguration being deleted.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Flux<ByteBuffer>>> deleteWithResponse(
        String resourceGroupName, String vpnServerConfigurationName, Context context) {
        return this.serviceClient.deleteWithResponseAsync(resourceGroupName, vpnServerConfigurationName, context);
    }

    /**
     * Deletes a VpnServerConfiguration.
     *
     * @param resourceGroupName The resource group name of the VpnServerConfiguration.
     * @param vpnServerConfigurationName The name of the VpnServerConfiguration being deleted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PollerFlux<PollResult<Void>, Void> beginDelete(String resourceGroupName, String vpnServerConfigurationName) {
        return this.serviceClient.beginDelete(resourceGroupName, vpnServerConfigurationName);
    }

    /**
     * Deletes a VpnServerConfiguration.
     *
     * @param resourceGroupName The resource group name of the VpnServerConfiguration.
     * @param vpnServerConfigurationName The name of the VpnServerConfiguration being deleted.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PollerFlux<PollResult<Void>, Void> beginDelete(
        String resourceGroupName, String vpnServerConfigurationName, Context context) {
        return this.serviceClient.beginDelete(resourceGroupName, vpnServerConfigurationName, context);
    }

    /**
     * Deletes a VpnServerConfiguration.
     *
     * @param resourceGroupName The resource group name of the VpnServerConfiguration.
     * @param vpnServerConfigurationName The name of the VpnServerConfiguration being deleted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> delete(String resourceGroupName, String vpnServerConfigurationName) {
        return this.serviceClient.deleteAsync(resourceGroupName, vpnServerConfigurationName);
    }

    /**
     * Deletes a VpnServerConfiguration.
     *
     * @param resourceGroupName The resource group name of the VpnServerConfiguration.
     * @param vpnServerConfigurationName The name of the VpnServerConfiguration being deleted.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> delete(String resourceGroupName, String vpnServerConfigurationName, Context context) {
        return this.serviceClient.deleteAsync(resourceGroupName, vpnServerConfigurationName, context);
    }

    /**
     * Lists all the vpnServerConfigurations in a resource group.
     *
     * @param resourceGroupName The resource group name of the VpnServerConfiguration.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the request to list all VpnServerConfigurations.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public Mono<PagedResponse<VpnServerConfiguration>> listByResourceGroupSinglePage(String resourceGroupName) {
        return this.serviceClient.listByResourceGroupSinglePageAsync(resourceGroupName);
    }

    /**
     * Lists all the vpnServerConfigurations in a resource group.
     *
     * @param resourceGroupName The resource group name of the VpnServerConfiguration.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the request to list all VpnServerConfigurations.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public Mono<PagedResponse<VpnServerConfiguration>> listByResourceGroupSinglePage(
        String resourceGroupName, Context context) {
        return this.serviceClient.listByResourceGroupSinglePageAsync(resourceGroupName, context);
    }

    /**
     * Lists all the vpnServerConfigurations in a resource group.
     *
     * @param resourceGroupName The resource group name of the VpnServerConfiguration.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the request to list all VpnServerConfigurations.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<VpnServerConfiguration> listByResourceGroup(String resourceGroupName) {
        return this.serviceClient.listByResourceGroupAsync(resourceGroupName);
    }

    /**
     * Lists all the vpnServerConfigurations in a resource group.
     *
     * @param resourceGroupName The resource group name of the VpnServerConfiguration.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the request to list all VpnServerConfigurations.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<VpnServerConfiguration> listByResourceGroup(String resourceGroupName, Context context) {
        return this.serviceClient.listByResourceGroupAsync(resourceGroupName, context);
    }

    /**
     * Lists all the VpnServerConfigurations in a subscription.
     *
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the request to list all VpnServerConfigurations.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public Mono<PagedResponse<VpnServerConfiguration>> listSinglePage() {
        return this.serviceClient.listSinglePageAsync();
    }

    /**
     * Lists all the VpnServerConfigurations in a subscription.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the request to list all VpnServerConfigurations.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public Mono<PagedResponse<VpnServerConfiguration>> listSinglePage(Context context) {
        return this.serviceClient.listSinglePageAsync(context);
    }

    /**
     * Lists all the VpnServerConfigurations in a subscription.
     *
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the request to list all VpnServerConfigurations.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<VpnServerConfiguration> list() {
        return this.serviceClient.listAsync();
    }

    /**
     * Lists all the VpnServerConfigurations in a subscription.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the request to list all VpnServerConfigurations.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<VpnServerConfiguration> list(Context context) {
        return this.serviceClient.listAsync(context);
    }

    /**
     * Creates a VpnServerConfiguration resource if it doesn't exist else updates the existing VpnServerConfiguration.
     *
     * @param resourceGroupName The resource group name of the VpnServerConfiguration.
     * @param vpnServerConfigurationName The name of the VpnServerConfiguration being created or updated.
     * @param vpnServerConfigurationParameters VpnServerConfiguration Resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return vpnServerConfiguration Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<VpnServerConfiguration>> beginCreateOrUpdateWithoutPollingWithResponse(
        String resourceGroupName,
        String vpnServerConfigurationName,
        VpnServerConfiguration vpnServerConfigurationParameters) {
        return this
            .serviceClient
            .beginCreateOrUpdateWithoutPollingWithResponseAsync(
                resourceGroupName, vpnServerConfigurationName, vpnServerConfigurationParameters);
    }

    /**
     * Creates a VpnServerConfiguration resource if it doesn't exist else updates the existing VpnServerConfiguration.
     *
     * @param resourceGroupName The resource group name of the VpnServerConfiguration.
     * @param vpnServerConfigurationName The name of the VpnServerConfiguration being created or updated.
     * @param vpnServerConfigurationParameters VpnServerConfiguration Resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return vpnServerConfiguration Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<VpnServerConfiguration>> beginCreateOrUpdateWithoutPollingWithResponse(
        String resourceGroupName,
        String vpnServerConfigurationName,
        VpnServerConfiguration vpnServerConfigurationParameters,
        Context context) {
        return this
            .serviceClient
            .beginCreateOrUpdateWithoutPollingWithResponseAsync(
                resourceGroupName, vpnServerConfigurationName, vpnServerConfigurationParameters, context);
    }

    /**
     * Creates a VpnServerConfiguration resource if it doesn't exist else updates the existing VpnServerConfiguration.
     *
     * @param resourceGroupName The resource group name of the VpnServerConfiguration.
     * @param vpnServerConfigurationName The name of the VpnServerConfiguration being created or updated.
     * @param vpnServerConfigurationParameters VpnServerConfiguration Resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return vpnServerConfiguration Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VpnServerConfiguration> beginCreateOrUpdateWithoutPolling(
        String resourceGroupName,
        String vpnServerConfigurationName,
        VpnServerConfiguration vpnServerConfigurationParameters) {
        return this
            .serviceClient
            .beginCreateOrUpdateWithoutPollingAsync(
                resourceGroupName, vpnServerConfigurationName, vpnServerConfigurationParameters);
    }

    /**
     * Creates a VpnServerConfiguration resource if it doesn't exist else updates the existing VpnServerConfiguration.
     *
     * @param resourceGroupName The resource group name of the VpnServerConfiguration.
     * @param vpnServerConfigurationName The name of the VpnServerConfiguration being created or updated.
     * @param vpnServerConfigurationParameters VpnServerConfiguration Resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return vpnServerConfiguration Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VpnServerConfiguration> beginCreateOrUpdateWithoutPolling(
        String resourceGroupName,
        String vpnServerConfigurationName,
        VpnServerConfiguration vpnServerConfigurationParameters,
        Context context) {
        return this
            .serviceClient
            .beginCreateOrUpdateWithoutPollingAsync(
                resourceGroupName, vpnServerConfigurationName, vpnServerConfigurationParameters, context);
    }

    /**
     * Deletes a VpnServerConfiguration.
     *
     * @param resourceGroupName The resource group name of the VpnServerConfiguration.
     * @param vpnServerConfigurationName The name of the VpnServerConfiguration being deleted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> beginDeleteWithoutPollingWithResponse(
        String resourceGroupName, String vpnServerConfigurationName) {
        return this
            .serviceClient
            .beginDeleteWithoutPollingWithResponseAsync(resourceGroupName, vpnServerConfigurationName);
    }

    /**
     * Deletes a VpnServerConfiguration.
     *
     * @param resourceGroupName The resource group name of the VpnServerConfiguration.
     * @param vpnServerConfigurationName The name of the VpnServerConfiguration being deleted.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> beginDeleteWithoutPollingWithResponse(
        String resourceGroupName, String vpnServerConfigurationName, Context context) {
        return this
            .serviceClient
            .beginDeleteWithoutPollingWithResponseAsync(resourceGroupName, vpnServerConfigurationName, context);
    }

    /**
     * Deletes a VpnServerConfiguration.
     *
     * @param resourceGroupName The resource group name of the VpnServerConfiguration.
     * @param vpnServerConfigurationName The name of the VpnServerConfiguration being deleted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> beginDeleteWithoutPolling(String resourceGroupName, String vpnServerConfigurationName) {
        return this.serviceClient.beginDeleteWithoutPollingAsync(resourceGroupName, vpnServerConfigurationName);
    }

    /**
     * Deletes a VpnServerConfiguration.
     *
     * @param resourceGroupName The resource group name of the VpnServerConfiguration.
     * @param vpnServerConfigurationName The name of the VpnServerConfiguration being deleted.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> beginDeleteWithoutPolling(
        String resourceGroupName, String vpnServerConfigurationName, Context context) {
        return this
            .serviceClient
            .beginDeleteWithoutPollingAsync(resourceGroupName, vpnServerConfigurationName, context);
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the request to list all VpnServerConfigurations.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public Mono<PagedResponse<VpnServerConfiguration>> listByResourceGroupNextSinglePage(String nextLink) {
        return this.serviceClient.listByResourceGroupNextSinglePageAsync(nextLink);
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink null
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the request to list all VpnServerConfigurations.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public Mono<PagedResponse<VpnServerConfiguration>> listByResourceGroupNextSinglePage(
        String nextLink, Context context) {
        return this.serviceClient.listByResourceGroupNextSinglePageAsync(nextLink, context);
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the request to list all VpnServerConfigurations.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public Mono<PagedResponse<VpnServerConfiguration>> listNextSinglePage(String nextLink) {
        return this.serviceClient.listNextSinglePageAsync(nextLink);
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink null
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the request to list all VpnServerConfigurations.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public Mono<PagedResponse<VpnServerConfiguration>> listNextSinglePage(String nextLink, Context context) {
        return this.serviceClient.listNextSinglePageAsync(nextLink, context);
    }
}
