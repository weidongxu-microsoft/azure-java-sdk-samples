// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.management.vanilla.network;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.PollerFlux;
import com.azure.management.vanilla.network.implementation.LoadBalancerBackendAddressPoolsImpl;
import com.azure.management.vanilla.network.models.BackendAddressPool;

/** Initializes a new instance of the synchronous NetworkManagementClient type. */
@ServiceClient(builder = NetworkManagementClientBuilder.class)
public final class LoadBalancerBackendAddressPoolsClient {
    private LoadBalancerBackendAddressPoolsImpl serviceClient;

    /** Initializes an instance of LoadBalancerBackendAddressPools client. */
    LoadBalancerBackendAddressPoolsClient(LoadBalancerBackendAddressPoolsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Gets all the load balancer backed address pools.
     *
     * @param resourceGroupName The name of the resource group.
     * @param loadBalancerName The name of the load balancer.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the load balancer backed address pools.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BackendAddressPool> list(String resourceGroupName, String loadBalancerName) {
        return this.serviceClient.list(resourceGroupName, loadBalancerName);
    }

    /**
     * Gets all the load balancer backed address pools.
     *
     * @param resourceGroupName The name of the resource group.
     * @param loadBalancerName The name of the load balancer.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the load balancer backed address pools.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BackendAddressPool> list(String resourceGroupName, String loadBalancerName, Context context) {
        return this.serviceClient.list(resourceGroupName, loadBalancerName, context);
    }

    /**
     * Gets load balancer backend address pool.
     *
     * @param resourceGroupName The name of the resource group.
     * @param loadBalancerName The name of the load balancer.
     * @param backendAddressPoolName The name of the backend address pool.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return load balancer backend address pool.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BackendAddressPool get(String resourceGroupName, String loadBalancerName, String backendAddressPoolName) {
        return this.serviceClient.get(resourceGroupName, loadBalancerName, backendAddressPoolName);
    }

    /**
     * Gets load balancer backend address pool.
     *
     * @param resourceGroupName The name of the resource group.
     * @param loadBalancerName The name of the load balancer.
     * @param backendAddressPoolName The name of the backend address pool.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return load balancer backend address pool.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BackendAddressPool get(
        String resourceGroupName, String loadBalancerName, String backendAddressPoolName, Context context) {
        return this.serviceClient.get(resourceGroupName, loadBalancerName, backendAddressPoolName, context);
    }

    /**
     * Creates or updates a load balancer backend address pool.
     *
     * @param resourceGroupName The name of the resource group.
     * @param loadBalancerName The name of the load balancer.
     * @param backendAddressPoolName The name of the backend address pool.
     * @param parameters Pool of backend IP addresses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return pool of backend IP addresses.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PollerFlux<PollResult<BackendAddressPool>, BackendAddressPool> beginCreateOrUpdate(
        String resourceGroupName,
        String loadBalancerName,
        String backendAddressPoolName,
        BackendAddressPool parameters) {
        return this
            .serviceClient
            .beginCreateOrUpdate(resourceGroupName, loadBalancerName, backendAddressPoolName, parameters);
    }

    /**
     * Creates or updates a load balancer backend address pool.
     *
     * @param resourceGroupName The name of the resource group.
     * @param loadBalancerName The name of the load balancer.
     * @param backendAddressPoolName The name of the backend address pool.
     * @param parameters Pool of backend IP addresses.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return pool of backend IP addresses.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PollerFlux<PollResult<BackendAddressPool>, BackendAddressPool> beginCreateOrUpdate(
        String resourceGroupName,
        String loadBalancerName,
        String backendAddressPoolName,
        BackendAddressPool parameters,
        Context context) {
        return this
            .serviceClient
            .beginCreateOrUpdate(resourceGroupName, loadBalancerName, backendAddressPoolName, parameters, context);
    }

    /**
     * Creates or updates a load balancer backend address pool.
     *
     * @param resourceGroupName The name of the resource group.
     * @param loadBalancerName The name of the load balancer.
     * @param backendAddressPoolName The name of the backend address pool.
     * @param parameters Pool of backend IP addresses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return pool of backend IP addresses.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BackendAddressPool createOrUpdate(
        String resourceGroupName,
        String loadBalancerName,
        String backendAddressPoolName,
        BackendAddressPool parameters) {
        return this
            .serviceClient
            .createOrUpdate(resourceGroupName, loadBalancerName, backendAddressPoolName, parameters);
    }

    /**
     * Creates or updates a load balancer backend address pool.
     *
     * @param resourceGroupName The name of the resource group.
     * @param loadBalancerName The name of the load balancer.
     * @param backendAddressPoolName The name of the backend address pool.
     * @param parameters Pool of backend IP addresses.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return pool of backend IP addresses.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BackendAddressPool createOrUpdate(
        String resourceGroupName,
        String loadBalancerName,
        String backendAddressPoolName,
        BackendAddressPool parameters,
        Context context) {
        return this
            .serviceClient
            .createOrUpdate(resourceGroupName, loadBalancerName, backendAddressPoolName, parameters, context);
    }

    /**
     * Deletes the specified load balancer backend address pool.
     *
     * @param resourceGroupName The name of the resource group.
     * @param loadBalancerName The name of the load balancer.
     * @param backendAddressPoolName The name of the backend address pool.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PollerFlux<PollResult<Void>, Void> beginDelete(
        String resourceGroupName, String loadBalancerName, String backendAddressPoolName) {
        return this.serviceClient.beginDelete(resourceGroupName, loadBalancerName, backendAddressPoolName);
    }

    /**
     * Deletes the specified load balancer backend address pool.
     *
     * @param resourceGroupName The name of the resource group.
     * @param loadBalancerName The name of the load balancer.
     * @param backendAddressPoolName The name of the backend address pool.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PollerFlux<PollResult<Void>, Void> beginDelete(
        String resourceGroupName, String loadBalancerName, String backendAddressPoolName, Context context) {
        return this.serviceClient.beginDelete(resourceGroupName, loadBalancerName, backendAddressPoolName, context);
    }

    /**
     * Deletes the specified load balancer backend address pool.
     *
     * @param resourceGroupName The name of the resource group.
     * @param loadBalancerName The name of the load balancer.
     * @param backendAddressPoolName The name of the backend address pool.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String loadBalancerName, String backendAddressPoolName) {
        this.serviceClient.delete(resourceGroupName, loadBalancerName, backendAddressPoolName);
    }

    /**
     * Deletes the specified load balancer backend address pool.
     *
     * @param resourceGroupName The name of the resource group.
     * @param loadBalancerName The name of the load balancer.
     * @param backendAddressPoolName The name of the backend address pool.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(
        String resourceGroupName, String loadBalancerName, String backendAddressPoolName, Context context) {
        this.serviceClient.delete(resourceGroupName, loadBalancerName, backendAddressPoolName, context);
    }

    /**
     * Creates or updates a load balancer backend address pool.
     *
     * @param resourceGroupName The name of the resource group.
     * @param loadBalancerName The name of the load balancer.
     * @param backendAddressPoolName The name of the backend address pool.
     * @param parameters Pool of backend IP addresses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return pool of backend IP addresses.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BackendAddressPool beginCreateOrUpdateWithoutPolling(
        String resourceGroupName,
        String loadBalancerName,
        String backendAddressPoolName,
        BackendAddressPool parameters) {
        return this
            .serviceClient
            .beginCreateOrUpdateWithoutPolling(resourceGroupName, loadBalancerName, backendAddressPoolName, parameters);
    }

    /**
     * Creates or updates a load balancer backend address pool.
     *
     * @param resourceGroupName The name of the resource group.
     * @param loadBalancerName The name of the load balancer.
     * @param backendAddressPoolName The name of the backend address pool.
     * @param parameters Pool of backend IP addresses.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return pool of backend IP addresses.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BackendAddressPool beginCreateOrUpdateWithoutPolling(
        String resourceGroupName,
        String loadBalancerName,
        String backendAddressPoolName,
        BackendAddressPool parameters,
        Context context) {
        return this
            .serviceClient
            .beginCreateOrUpdateWithoutPolling(
                resourceGroupName, loadBalancerName, backendAddressPoolName, parameters, context);
    }

    /**
     * Deletes the specified load balancer backend address pool.
     *
     * @param resourceGroupName The name of the resource group.
     * @param loadBalancerName The name of the load balancer.
     * @param backendAddressPoolName The name of the backend address pool.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void beginDeleteWithoutPolling(
        String resourceGroupName, String loadBalancerName, String backendAddressPoolName) {
        this.serviceClient.beginDeleteWithoutPolling(resourceGroupName, loadBalancerName, backendAddressPoolName);
    }

    /**
     * Deletes the specified load balancer backend address pool.
     *
     * @param resourceGroupName The name of the resource group.
     * @param loadBalancerName The name of the load balancer.
     * @param backendAddressPoolName The name of the backend address pool.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void beginDeleteWithoutPolling(
        String resourceGroupName, String loadBalancerName, String backendAddressPoolName, Context context) {
        this
            .serviceClient
            .beginDeleteWithoutPolling(resourceGroupName, loadBalancerName, backendAddressPoolName, context);
    }
}
