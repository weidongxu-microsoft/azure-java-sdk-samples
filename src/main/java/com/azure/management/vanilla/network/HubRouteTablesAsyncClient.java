// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.management.vanilla.network;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.Response;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.PollerFlux;
import com.azure.management.vanilla.network.implementation.HubRouteTablesImpl;
import com.azure.management.vanilla.network.models.HubRouteTable;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/** Initializes a new instance of the asynchronous NetworkManagementClient type. */
@ServiceClient(builder = NetworkManagementClientBuilder.class)
public final class HubRouteTablesAsyncClient {
    private HubRouteTablesImpl serviceClient;

    /** Initializes an instance of HubRouteTables client. */
    HubRouteTablesAsyncClient(HubRouteTablesImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Creates a RouteTable resource if it doesn't exist else updates the existing RouteTable.
     *
     * @param resourceGroupName The resource group name of the VirtualHub.
     * @param virtualHubName The name of the VirtualHub.
     * @param routeTableName The name of the RouteTable.
     * @param routeTableParameters RouteTable resource in a virtual hub.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return routeTable resource in a virtual hub.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponse(
        String resourceGroupName, String virtualHubName, String routeTableName, HubRouteTable routeTableParameters) {
        return this
            .serviceClient
            .createOrUpdateWithResponseAsync(resourceGroupName, virtualHubName, routeTableName, routeTableParameters);
    }

    /**
     * Creates a RouteTable resource if it doesn't exist else updates the existing RouteTable.
     *
     * @param resourceGroupName The resource group name of the VirtualHub.
     * @param virtualHubName The name of the VirtualHub.
     * @param routeTableName The name of the RouteTable.
     * @param routeTableParameters RouteTable resource in a virtual hub.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return routeTable resource in a virtual hub.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponse(
        String resourceGroupName,
        String virtualHubName,
        String routeTableName,
        HubRouteTable routeTableParameters,
        Context context) {
        return this
            .serviceClient
            .createOrUpdateWithResponseAsync(
                resourceGroupName, virtualHubName, routeTableName, routeTableParameters, context);
    }

    /**
     * Creates a RouteTable resource if it doesn't exist else updates the existing RouteTable.
     *
     * @param resourceGroupName The resource group name of the VirtualHub.
     * @param virtualHubName The name of the VirtualHub.
     * @param routeTableName The name of the RouteTable.
     * @param routeTableParameters RouteTable resource in a virtual hub.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return routeTable resource in a virtual hub.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PollerFlux<PollResult<HubRouteTable>, HubRouteTable> beginCreateOrUpdate(
        String resourceGroupName, String virtualHubName, String routeTableName, HubRouteTable routeTableParameters) {
        return this
            .serviceClient
            .beginCreateOrUpdate(resourceGroupName, virtualHubName, routeTableName, routeTableParameters);
    }

    /**
     * Creates a RouteTable resource if it doesn't exist else updates the existing RouteTable.
     *
     * @param resourceGroupName The resource group name of the VirtualHub.
     * @param virtualHubName The name of the VirtualHub.
     * @param routeTableName The name of the RouteTable.
     * @param routeTableParameters RouteTable resource in a virtual hub.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return routeTable resource in a virtual hub.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PollerFlux<PollResult<HubRouteTable>, HubRouteTable> beginCreateOrUpdate(
        String resourceGroupName,
        String virtualHubName,
        String routeTableName,
        HubRouteTable routeTableParameters,
        Context context) {
        return this
            .serviceClient
            .beginCreateOrUpdate(resourceGroupName, virtualHubName, routeTableName, routeTableParameters, context);
    }

    /**
     * Creates a RouteTable resource if it doesn't exist else updates the existing RouteTable.
     *
     * @param resourceGroupName The resource group name of the VirtualHub.
     * @param virtualHubName The name of the VirtualHub.
     * @param routeTableName The name of the RouteTable.
     * @param routeTableParameters RouteTable resource in a virtual hub.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return routeTable resource in a virtual hub.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<HubRouteTable> createOrUpdate(
        String resourceGroupName, String virtualHubName, String routeTableName, HubRouteTable routeTableParameters) {
        return this
            .serviceClient
            .createOrUpdateAsync(resourceGroupName, virtualHubName, routeTableName, routeTableParameters);
    }

    /**
     * Creates a RouteTable resource if it doesn't exist else updates the existing RouteTable.
     *
     * @param resourceGroupName The resource group name of the VirtualHub.
     * @param virtualHubName The name of the VirtualHub.
     * @param routeTableName The name of the RouteTable.
     * @param routeTableParameters RouteTable resource in a virtual hub.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return routeTable resource in a virtual hub.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<HubRouteTable> createOrUpdate(
        String resourceGroupName,
        String virtualHubName,
        String routeTableName,
        HubRouteTable routeTableParameters,
        Context context) {
        return this
            .serviceClient
            .createOrUpdateAsync(resourceGroupName, virtualHubName, routeTableName, routeTableParameters, context);
    }

    /**
     * Retrieves the details of a RouteTable.
     *
     * @param resourceGroupName The resource group name of the VirtualHub.
     * @param virtualHubName The name of the VirtualHub.
     * @param routeTableName The name of the RouteTable.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return routeTable resource in a virtual hub.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<HubRouteTable>> getWithResponse(
        String resourceGroupName, String virtualHubName, String routeTableName) {
        return this.serviceClient.getWithResponseAsync(resourceGroupName, virtualHubName, routeTableName);
    }

    /**
     * Retrieves the details of a RouteTable.
     *
     * @param resourceGroupName The resource group name of the VirtualHub.
     * @param virtualHubName The name of the VirtualHub.
     * @param routeTableName The name of the RouteTable.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return routeTable resource in a virtual hub.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<HubRouteTable>> getWithResponse(
        String resourceGroupName, String virtualHubName, String routeTableName, Context context) {
        return this.serviceClient.getWithResponseAsync(resourceGroupName, virtualHubName, routeTableName, context);
    }

    /**
     * Retrieves the details of a RouteTable.
     *
     * @param resourceGroupName The resource group name of the VirtualHub.
     * @param virtualHubName The name of the VirtualHub.
     * @param routeTableName The name of the RouteTable.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return routeTable resource in a virtual hub.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<HubRouteTable> get(String resourceGroupName, String virtualHubName, String routeTableName) {
        return this.serviceClient.getAsync(resourceGroupName, virtualHubName, routeTableName);
    }

    /**
     * Retrieves the details of a RouteTable.
     *
     * @param resourceGroupName The resource group name of the VirtualHub.
     * @param virtualHubName The name of the VirtualHub.
     * @param routeTableName The name of the RouteTable.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return routeTable resource in a virtual hub.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<HubRouteTable> get(
        String resourceGroupName, String virtualHubName, String routeTableName, Context context) {
        return this.serviceClient.getAsync(resourceGroupName, virtualHubName, routeTableName, context);
    }

    /**
     * Deletes a RouteTable.
     *
     * @param resourceGroupName The resource group name of the RouteTable.
     * @param virtualHubName The name of the VirtualHub.
     * @param routeTableName The name of the RouteTable.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Flux<ByteBuffer>>> deleteWithResponse(
        String resourceGroupName, String virtualHubName, String routeTableName) {
        return this.serviceClient.deleteWithResponseAsync(resourceGroupName, virtualHubName, routeTableName);
    }

    /**
     * Deletes a RouteTable.
     *
     * @param resourceGroupName The resource group name of the RouteTable.
     * @param virtualHubName The name of the VirtualHub.
     * @param routeTableName The name of the RouteTable.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Flux<ByteBuffer>>> deleteWithResponse(
        String resourceGroupName, String virtualHubName, String routeTableName, Context context) {
        return this.serviceClient.deleteWithResponseAsync(resourceGroupName, virtualHubName, routeTableName, context);
    }

    /**
     * Deletes a RouteTable.
     *
     * @param resourceGroupName The resource group name of the RouteTable.
     * @param virtualHubName The name of the VirtualHub.
     * @param routeTableName The name of the RouteTable.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PollerFlux<PollResult<Void>, Void> beginDelete(
        String resourceGroupName, String virtualHubName, String routeTableName) {
        return this.serviceClient.beginDelete(resourceGroupName, virtualHubName, routeTableName);
    }

    /**
     * Deletes a RouteTable.
     *
     * @param resourceGroupName The resource group name of the RouteTable.
     * @param virtualHubName The name of the VirtualHub.
     * @param routeTableName The name of the RouteTable.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PollerFlux<PollResult<Void>, Void> beginDelete(
        String resourceGroupName, String virtualHubName, String routeTableName, Context context) {
        return this.serviceClient.beginDelete(resourceGroupName, virtualHubName, routeTableName, context);
    }

    /**
     * Deletes a RouteTable.
     *
     * @param resourceGroupName The resource group name of the RouteTable.
     * @param virtualHubName The name of the VirtualHub.
     * @param routeTableName The name of the RouteTable.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> delete(String resourceGroupName, String virtualHubName, String routeTableName) {
        return this.serviceClient.deleteAsync(resourceGroupName, virtualHubName, routeTableName);
    }

    /**
     * Deletes a RouteTable.
     *
     * @param resourceGroupName The resource group name of the RouteTable.
     * @param virtualHubName The name of the VirtualHub.
     * @param routeTableName The name of the RouteTable.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> delete(String resourceGroupName, String virtualHubName, String routeTableName, Context context) {
        return this.serviceClient.deleteAsync(resourceGroupName, virtualHubName, routeTableName, context);
    }

    /**
     * Retrieves the details of all RouteTables.
     *
     * @param resourceGroupName The resource group name of the VirtualHub.
     * @param virtualHubName The name of the VirtualHub.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of RouteTables and a URL nextLink to get the next set of results.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public Mono<PagedResponse<HubRouteTable>> listSinglePage(String resourceGroupName, String virtualHubName) {
        return this.serviceClient.listSinglePageAsync(resourceGroupName, virtualHubName);
    }

    /**
     * Retrieves the details of all RouteTables.
     *
     * @param resourceGroupName The resource group name of the VirtualHub.
     * @param virtualHubName The name of the VirtualHub.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of RouteTables and a URL nextLink to get the next set of results.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public Mono<PagedResponse<HubRouteTable>> listSinglePage(
        String resourceGroupName, String virtualHubName, Context context) {
        return this.serviceClient.listSinglePageAsync(resourceGroupName, virtualHubName, context);
    }

    /**
     * Retrieves the details of all RouteTables.
     *
     * @param resourceGroupName The resource group name of the VirtualHub.
     * @param virtualHubName The name of the VirtualHub.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of RouteTables and a URL nextLink to get the next set of results.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<HubRouteTable> list(String resourceGroupName, String virtualHubName) {
        return this.serviceClient.listAsync(resourceGroupName, virtualHubName);
    }

    /**
     * Retrieves the details of all RouteTables.
     *
     * @param resourceGroupName The resource group name of the VirtualHub.
     * @param virtualHubName The name of the VirtualHub.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of RouteTables and a URL nextLink to get the next set of results.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<HubRouteTable> list(String resourceGroupName, String virtualHubName, Context context) {
        return this.serviceClient.listAsync(resourceGroupName, virtualHubName, context);
    }

    /**
     * Creates a RouteTable resource if it doesn't exist else updates the existing RouteTable.
     *
     * @param resourceGroupName The resource group name of the VirtualHub.
     * @param virtualHubName The name of the VirtualHub.
     * @param routeTableName The name of the RouteTable.
     * @param routeTableParameters RouteTable resource in a virtual hub.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return routeTable resource in a virtual hub.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<HubRouteTable>> beginCreateOrUpdateWithoutPollingWithResponse(
        String resourceGroupName, String virtualHubName, String routeTableName, HubRouteTable routeTableParameters) {
        return this
            .serviceClient
            .beginCreateOrUpdateWithoutPollingWithResponseAsync(
                resourceGroupName, virtualHubName, routeTableName, routeTableParameters);
    }

    /**
     * Creates a RouteTable resource if it doesn't exist else updates the existing RouteTable.
     *
     * @param resourceGroupName The resource group name of the VirtualHub.
     * @param virtualHubName The name of the VirtualHub.
     * @param routeTableName The name of the RouteTable.
     * @param routeTableParameters RouteTable resource in a virtual hub.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return routeTable resource in a virtual hub.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<HubRouteTable>> beginCreateOrUpdateWithoutPollingWithResponse(
        String resourceGroupName,
        String virtualHubName,
        String routeTableName,
        HubRouteTable routeTableParameters,
        Context context) {
        return this
            .serviceClient
            .beginCreateOrUpdateWithoutPollingWithResponseAsync(
                resourceGroupName, virtualHubName, routeTableName, routeTableParameters, context);
    }

    /**
     * Creates a RouteTable resource if it doesn't exist else updates the existing RouteTable.
     *
     * @param resourceGroupName The resource group name of the VirtualHub.
     * @param virtualHubName The name of the VirtualHub.
     * @param routeTableName The name of the RouteTable.
     * @param routeTableParameters RouteTable resource in a virtual hub.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return routeTable resource in a virtual hub.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<HubRouteTable> beginCreateOrUpdateWithoutPolling(
        String resourceGroupName, String virtualHubName, String routeTableName, HubRouteTable routeTableParameters) {
        return this
            .serviceClient
            .beginCreateOrUpdateWithoutPollingAsync(
                resourceGroupName, virtualHubName, routeTableName, routeTableParameters);
    }

    /**
     * Creates a RouteTable resource if it doesn't exist else updates the existing RouteTable.
     *
     * @param resourceGroupName The resource group name of the VirtualHub.
     * @param virtualHubName The name of the VirtualHub.
     * @param routeTableName The name of the RouteTable.
     * @param routeTableParameters RouteTable resource in a virtual hub.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return routeTable resource in a virtual hub.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<HubRouteTable> beginCreateOrUpdateWithoutPolling(
        String resourceGroupName,
        String virtualHubName,
        String routeTableName,
        HubRouteTable routeTableParameters,
        Context context) {
        return this
            .serviceClient
            .beginCreateOrUpdateWithoutPollingAsync(
                resourceGroupName, virtualHubName, routeTableName, routeTableParameters, context);
    }

    /**
     * Deletes a RouteTable.
     *
     * @param resourceGroupName The resource group name of the RouteTable.
     * @param virtualHubName The name of the VirtualHub.
     * @param routeTableName The name of the RouteTable.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> beginDeleteWithoutPollingWithResponse(
        String resourceGroupName, String virtualHubName, String routeTableName) {
        return this
            .serviceClient
            .beginDeleteWithoutPollingWithResponseAsync(resourceGroupName, virtualHubName, routeTableName);
    }

    /**
     * Deletes a RouteTable.
     *
     * @param resourceGroupName The resource group name of the RouteTable.
     * @param virtualHubName The name of the VirtualHub.
     * @param routeTableName The name of the RouteTable.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> beginDeleteWithoutPollingWithResponse(
        String resourceGroupName, String virtualHubName, String routeTableName, Context context) {
        return this
            .serviceClient
            .beginDeleteWithoutPollingWithResponseAsync(resourceGroupName, virtualHubName, routeTableName, context);
    }

    /**
     * Deletes a RouteTable.
     *
     * @param resourceGroupName The resource group name of the RouteTable.
     * @param virtualHubName The name of the VirtualHub.
     * @param routeTableName The name of the RouteTable.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> beginDeleteWithoutPolling(
        String resourceGroupName, String virtualHubName, String routeTableName) {
        return this.serviceClient.beginDeleteWithoutPollingAsync(resourceGroupName, virtualHubName, routeTableName);
    }

    /**
     * Deletes a RouteTable.
     *
     * @param resourceGroupName The resource group name of the RouteTable.
     * @param virtualHubName The name of the VirtualHub.
     * @param routeTableName The name of the RouteTable.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> beginDeleteWithoutPolling(
        String resourceGroupName, String virtualHubName, String routeTableName, Context context) {
        return this
            .serviceClient
            .beginDeleteWithoutPollingAsync(resourceGroupName, virtualHubName, routeTableName, context);
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of RouteTables and a URL nextLink to get the next set of results.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public Mono<PagedResponse<HubRouteTable>> listNextSinglePage(String nextLink) {
        return this.serviceClient.listNextSinglePageAsync(nextLink);
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink null
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of RouteTables and a URL nextLink to get the next set of results.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public Mono<PagedResponse<HubRouteTable>> listNextSinglePage(String nextLink, Context context) {
        return this.serviceClient.listNextSinglePageAsync(nextLink, context);
    }
}
