// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.management.vanilla.network.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** The FirewallPolicyTransportSecurity model. */
@Fluent
public final class FirewallPolicyTransportSecurity {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(FirewallPolicyTransportSecurity.class);

    /*
     * The CA used for intermediate CA generation.
     */
    @JsonProperty(value = "certificateAuthority")
    private FirewallPolicyCertificateAuthority certificateAuthority;

    /*
     * List of domains which are excluded from TLS termination.
     */
    @JsonProperty(value = "excludedDomains")
    private List<String> excludedDomains;

    /*
     * Certificates which are to be trusted by the firewall.
     */
    @JsonProperty(value = "trustedRootCertificates")
    private List<FirewallPolicyTrustedRootCertificate> trustedRootCertificates;

    /**
     * Get the certificateAuthority property: The CA used for intermediate CA generation.
     *
     * @return the certificateAuthority value.
     */
    public FirewallPolicyCertificateAuthority getCertificateAuthority() {
        return this.certificateAuthority;
    }

    /**
     * Set the certificateAuthority property: The CA used for intermediate CA generation.
     *
     * @param certificateAuthority the certificateAuthority value to set.
     * @return the FirewallPolicyTransportSecurity object itself.
     */
    public FirewallPolicyTransportSecurity setCertificateAuthority(
        FirewallPolicyCertificateAuthority certificateAuthority) {
        this.certificateAuthority = certificateAuthority;
        return this;
    }

    /**
     * Get the excludedDomains property: List of domains which are excluded from TLS termination.
     *
     * @return the excludedDomains value.
     */
    public List<String> getExcludedDomains() {
        return this.excludedDomains;
    }

    /**
     * Set the excludedDomains property: List of domains which are excluded from TLS termination.
     *
     * @param excludedDomains the excludedDomains value to set.
     * @return the FirewallPolicyTransportSecurity object itself.
     */
    public FirewallPolicyTransportSecurity setExcludedDomains(List<String> excludedDomains) {
        this.excludedDomains = excludedDomains;
        return this;
    }

    /**
     * Get the trustedRootCertificates property: Certificates which are to be trusted by the firewall.
     *
     * @return the trustedRootCertificates value.
     */
    public List<FirewallPolicyTrustedRootCertificate> getTrustedRootCertificates() {
        return this.trustedRootCertificates;
    }

    /**
     * Set the trustedRootCertificates property: Certificates which are to be trusted by the firewall.
     *
     * @param trustedRootCertificates the trustedRootCertificates value to set.
     * @return the FirewallPolicyTransportSecurity object itself.
     */
    public FirewallPolicyTransportSecurity setTrustedRootCertificates(
        List<FirewallPolicyTrustedRootCertificate> trustedRootCertificates) {
        this.trustedRootCertificates = trustedRootCertificates;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (getCertificateAuthority() != null) {
            getCertificateAuthority().validate();
        }
        if (getTrustedRootCertificates() != null) {
            getTrustedRootCertificates().forEach(e -> e.validate());
        }
    }
}
