// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.management.vanilla.network;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.Response;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.PollerFlux;
import com.azure.management.vanilla.network.implementation.NetworkManagementClientImpl;
import com.azure.management.vanilla.network.models.BastionActiveSessionListResult;
import com.azure.management.vanilla.network.models.BastionSessionState;
import com.azure.management.vanilla.network.models.BastionShareableLink;
import com.azure.management.vanilla.network.models.BastionShareableLinkListResult;
import com.azure.management.vanilla.network.models.DnsNameAvailabilityResult;
import com.azure.management.vanilla.network.models.VirtualWanSecurityProviders;
import com.azure.management.vanilla.network.models.VirtualWanVpnProfileParameters;
import com.azure.management.vanilla.network.models.VpnProfileResponse;
import java.nio.ByteBuffer;
import java.util.List;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/** Initializes a new instance of the asynchronous NetworkManagementClient type. */
@ServiceClient(builder = NetworkManagementClientBuilder.class)
public final class NetworkManagementAsyncClient {
    private NetworkManagementClientImpl serviceClient;

    /** Initializes an instance of NetworkManagementClient client. */
    NetworkManagementAsyncClient(NetworkManagementClientImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Creates a Bastion Shareable Links for all the VMs specified in the request.
     *
     * @param resourceGroupName The name of the resource group.
     * @param bastionHostname The name of the Bastion Host.
     * @param vms List of VM references.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for all the Bastion Shareable Link endpoints.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Flux<ByteBuffer>>> putBastionShareableLinkWithResponse(
        String resourceGroupName, String bastionHostname, List<BastionShareableLink> vms) {
        return this.serviceClient.putBastionShareableLinkWithResponseAsync(resourceGroupName, bastionHostname, vms);
    }

    /**
     * Creates a Bastion Shareable Links for all the VMs specified in the request.
     *
     * @param resourceGroupName The name of the resource group.
     * @param bastionHostname The name of the Bastion Host.
     * @param vms List of VM references.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for all the Bastion Shareable Link endpoints.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Flux<ByteBuffer>>> putBastionShareableLinkWithResponse(
        String resourceGroupName, String bastionHostname, List<BastionShareableLink> vms, Context context) {
        return this
            .serviceClient
            .putBastionShareableLinkWithResponseAsync(resourceGroupName, bastionHostname, vms, context);
    }

    /**
     * Creates a Bastion Shareable Links for all the VMs specified in the request.
     *
     * @param resourceGroupName The name of the resource group.
     * @param bastionHostname The name of the Bastion Host.
     * @param vms List of VM references.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for all the Bastion Shareable Link endpoints.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PollerFlux<PollResult<BastionShareableLinkListResult>, BastionShareableLinkListResult>
        beginPutBastionShareableLink(String resourceGroupName, String bastionHostname, List<BastionShareableLink> vms) {
        return this.serviceClient.beginPutBastionShareableLink(resourceGroupName, bastionHostname, vms);
    }

    /**
     * Creates a Bastion Shareable Links for all the VMs specified in the request.
     *
     * @param resourceGroupName The name of the resource group.
     * @param bastionHostname The name of the Bastion Host.
     * @param vms List of VM references.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for all the Bastion Shareable Link endpoints.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PollerFlux<PollResult<BastionShareableLinkListResult>, BastionShareableLinkListResult>
        beginPutBastionShareableLink(
            String resourceGroupName, String bastionHostname, List<BastionShareableLink> vms, Context context) {
        return this.serviceClient.beginPutBastionShareableLink(resourceGroupName, bastionHostname, vms, context);
    }

    /**
     * Creates a Bastion Shareable Links for all the VMs specified in the request.
     *
     * @param resourceGroupName The name of the resource group.
     * @param bastionHostname The name of the Bastion Host.
     * @param vms List of VM references.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for all the Bastion Shareable Link endpoints.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BastionShareableLinkListResult> putBastionShareableLink(
        String resourceGroupName, String bastionHostname, List<BastionShareableLink> vms) {
        return this.serviceClient.putBastionShareableLinkAsync(resourceGroupName, bastionHostname, vms);
    }

    /**
     * Creates a Bastion Shareable Links for all the VMs specified in the request.
     *
     * @param resourceGroupName The name of the resource group.
     * @param bastionHostname The name of the Bastion Host.
     * @param vms List of VM references.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for all the Bastion Shareable Link endpoints.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BastionShareableLinkListResult> putBastionShareableLink(
        String resourceGroupName, String bastionHostname, List<BastionShareableLink> vms, Context context) {
        return this.serviceClient.putBastionShareableLinkAsync(resourceGroupName, bastionHostname, vms, context);
    }

    /**
     * Deletes the Bastion Shareable Links for all the VMs specified in the request.
     *
     * @param resourceGroupName The name of the resource group.
     * @param bastionHostname The name of the Bastion Host.
     * @param vms List of VM references.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Flux<ByteBuffer>>> deleteBastionShareableLinkWithResponse(
        String resourceGroupName, String bastionHostname, List<BastionShareableLink> vms) {
        return this.serviceClient.deleteBastionShareableLinkWithResponseAsync(resourceGroupName, bastionHostname, vms);
    }

    /**
     * Deletes the Bastion Shareable Links for all the VMs specified in the request.
     *
     * @param resourceGroupName The name of the resource group.
     * @param bastionHostname The name of the Bastion Host.
     * @param vms List of VM references.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Flux<ByteBuffer>>> deleteBastionShareableLinkWithResponse(
        String resourceGroupName, String bastionHostname, List<BastionShareableLink> vms, Context context) {
        return this
            .serviceClient
            .deleteBastionShareableLinkWithResponseAsync(resourceGroupName, bastionHostname, vms, context);
    }

    /**
     * Deletes the Bastion Shareable Links for all the VMs specified in the request.
     *
     * @param resourceGroupName The name of the resource group.
     * @param bastionHostname The name of the Bastion Host.
     * @param vms List of VM references.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PollerFlux<PollResult<Void>, Void> beginDeleteBastionShareableLink(
        String resourceGroupName, String bastionHostname, List<BastionShareableLink> vms) {
        return this.serviceClient.beginDeleteBastionShareableLink(resourceGroupName, bastionHostname, vms);
    }

    /**
     * Deletes the Bastion Shareable Links for all the VMs specified in the request.
     *
     * @param resourceGroupName The name of the resource group.
     * @param bastionHostname The name of the Bastion Host.
     * @param vms List of VM references.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PollerFlux<PollResult<Void>, Void> beginDeleteBastionShareableLink(
        String resourceGroupName, String bastionHostname, List<BastionShareableLink> vms, Context context) {
        return this.serviceClient.beginDeleteBastionShareableLink(resourceGroupName, bastionHostname, vms, context);
    }

    /**
     * Deletes the Bastion Shareable Links for all the VMs specified in the request.
     *
     * @param resourceGroupName The name of the resource group.
     * @param bastionHostname The name of the Bastion Host.
     * @param vms List of VM references.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteBastionShareableLink(
        String resourceGroupName, String bastionHostname, List<BastionShareableLink> vms) {
        return this.serviceClient.deleteBastionShareableLinkAsync(resourceGroupName, bastionHostname, vms);
    }

    /**
     * Deletes the Bastion Shareable Links for all the VMs specified in the request.
     *
     * @param resourceGroupName The name of the resource group.
     * @param bastionHostname The name of the Bastion Host.
     * @param vms List of VM references.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteBastionShareableLink(
        String resourceGroupName, String bastionHostname, List<BastionShareableLink> vms, Context context) {
        return this.serviceClient.deleteBastionShareableLinkAsync(resourceGroupName, bastionHostname, vms, context);
    }

    /**
     * Return the Bastion Shareable Links for all the VMs specified in the request.
     *
     * @param resourceGroupName The name of the resource group.
     * @param bastionHostname The name of the Bastion Host.
     * @param vms List of VM references.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for all the Bastion Shareable Link endpoints.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public Mono<PagedResponse<BastionShareableLink>> getBastionShareableLinkSinglePage(
        String resourceGroupName, String bastionHostname, List<BastionShareableLink> vms) {
        return this.serviceClient.getBastionShareableLinkSinglePageAsync(resourceGroupName, bastionHostname, vms);
    }

    /**
     * Return the Bastion Shareable Links for all the VMs specified in the request.
     *
     * @param resourceGroupName The name of the resource group.
     * @param bastionHostname The name of the Bastion Host.
     * @param vms List of VM references.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for all the Bastion Shareable Link endpoints.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public Mono<PagedResponse<BastionShareableLink>> getBastionShareableLinkSinglePage(
        String resourceGroupName, String bastionHostname, List<BastionShareableLink> vms, Context context) {
        return this
            .serviceClient
            .getBastionShareableLinkSinglePageAsync(resourceGroupName, bastionHostname, vms, context);
    }

    /**
     * Return the Bastion Shareable Links for all the VMs specified in the request.
     *
     * @param resourceGroupName The name of the resource group.
     * @param bastionHostname The name of the Bastion Host.
     * @param vms List of VM references.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for all the Bastion Shareable Link endpoints.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BastionShareableLink> getBastionShareableLink(
        String resourceGroupName, String bastionHostname, List<BastionShareableLink> vms) {
        return this.serviceClient.getBastionShareableLinkAsync(resourceGroupName, bastionHostname, vms);
    }

    /**
     * Return the Bastion Shareable Links for all the VMs specified in the request.
     *
     * @param resourceGroupName The name of the resource group.
     * @param bastionHostname The name of the Bastion Host.
     * @param vms List of VM references.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for all the Bastion Shareable Link endpoints.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BastionShareableLink> getBastionShareableLink(
        String resourceGroupName, String bastionHostname, List<BastionShareableLink> vms, Context context) {
        return this.serviceClient.getBastionShareableLinkAsync(resourceGroupName, bastionHostname, vms, context);
    }

    /**
     * Returns the list of currently active sessions on the Bastion.
     *
     * @param resourceGroupName The name of the resource group.
     * @param bastionHostname The name of the Bastion Host.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for GetActiveSessions.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Flux<ByteBuffer>>> getActiveSessionsWithResponse(
        String resourceGroupName, String bastionHostname) {
        return this.serviceClient.getActiveSessionsWithResponseAsync(resourceGroupName, bastionHostname);
    }

    /**
     * Returns the list of currently active sessions on the Bastion.
     *
     * @param resourceGroupName The name of the resource group.
     * @param bastionHostname The name of the Bastion Host.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for GetActiveSessions.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Flux<ByteBuffer>>> getActiveSessionsWithResponse(
        String resourceGroupName, String bastionHostname, Context context) {
        return this.serviceClient.getActiveSessionsWithResponseAsync(resourceGroupName, bastionHostname, context);
    }

    /**
     * Returns the list of currently active sessions on the Bastion.
     *
     * @param resourceGroupName The name of the resource group.
     * @param bastionHostname The name of the Bastion Host.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for GetActiveSessions.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PollerFlux<PollResult<BastionActiveSessionListResult>, BastionActiveSessionListResult>
        beginGetActiveSessions(String resourceGroupName, String bastionHostname) {
        return this.serviceClient.beginGetActiveSessions(resourceGroupName, bastionHostname);
    }

    /**
     * Returns the list of currently active sessions on the Bastion.
     *
     * @param resourceGroupName The name of the resource group.
     * @param bastionHostname The name of the Bastion Host.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for GetActiveSessions.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PollerFlux<PollResult<BastionActiveSessionListResult>, BastionActiveSessionListResult>
        beginGetActiveSessions(String resourceGroupName, String bastionHostname, Context context) {
        return this.serviceClient.beginGetActiveSessions(resourceGroupName, bastionHostname, context);
    }

    /**
     * Returns the list of currently active sessions on the Bastion.
     *
     * @param resourceGroupName The name of the resource group.
     * @param bastionHostname The name of the Bastion Host.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for GetActiveSessions.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BastionActiveSessionListResult> getActiveSessions(String resourceGroupName, String bastionHostname) {
        return this.serviceClient.getActiveSessionsAsync(resourceGroupName, bastionHostname);
    }

    /**
     * Returns the list of currently active sessions on the Bastion.
     *
     * @param resourceGroupName The name of the resource group.
     * @param bastionHostname The name of the Bastion Host.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for GetActiveSessions.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BastionActiveSessionListResult> getActiveSessions(
        String resourceGroupName, String bastionHostname, Context context) {
        return this.serviceClient.getActiveSessionsAsync(resourceGroupName, bastionHostname, context);
    }

    /**
     * Returns the list of currently active sessions on the Bastion.
     *
     * @param resourceGroupName The name of the resource group.
     * @param bastionHostname The name of the Bastion Host.
     * @param sessionIdsSessionIds List of session IDs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for DisconnectActiveSessions.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public Mono<PagedResponse<BastionSessionState>> disconnectActiveSessionsSinglePage(
        String resourceGroupName, String bastionHostname, List<String> sessionIdsSessionIds) {
        return this
            .serviceClient
            .disconnectActiveSessionsSinglePageAsync(resourceGroupName, bastionHostname, sessionIdsSessionIds);
    }

    /**
     * Returns the list of currently active sessions on the Bastion.
     *
     * @param resourceGroupName The name of the resource group.
     * @param bastionHostname The name of the Bastion Host.
     * @param sessionIdsSessionIds List of session IDs.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for DisconnectActiveSessions.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public Mono<PagedResponse<BastionSessionState>> disconnectActiveSessionsSinglePage(
        String resourceGroupName, String bastionHostname, List<String> sessionIdsSessionIds, Context context) {
        return this
            .serviceClient
            .disconnectActiveSessionsSinglePageAsync(resourceGroupName, bastionHostname, sessionIdsSessionIds, context);
    }

    /**
     * Returns the list of currently active sessions on the Bastion.
     *
     * @param resourceGroupName The name of the resource group.
     * @param bastionHostname The name of the Bastion Host.
     * @param sessionIdsSessionIds List of session IDs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for DisconnectActiveSessions.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BastionSessionState> disconnectActiveSessions(
        String resourceGroupName, String bastionHostname, List<String> sessionIdsSessionIds) {
        return this
            .serviceClient
            .disconnectActiveSessionsAsync(resourceGroupName, bastionHostname, sessionIdsSessionIds);
    }

    /**
     * Returns the list of currently active sessions on the Bastion.
     *
     * @param resourceGroupName The name of the resource group.
     * @param bastionHostname The name of the Bastion Host.
     * @param sessionIdsSessionIds List of session IDs.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for DisconnectActiveSessions.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BastionSessionState> disconnectActiveSessions(
        String resourceGroupName, String bastionHostname, List<String> sessionIdsSessionIds, Context context) {
        return this
            .serviceClient
            .disconnectActiveSessionsAsync(resourceGroupName, bastionHostname, sessionIdsSessionIds, context);
    }

    /**
     * Checks whether a domain name in the cloudapp.azure.com zone is available for use.
     *
     * @param location The location of the domain name.
     * @param domainNameLabel The domain name to be verified. It must conform to the following regular expression:
     *     ^[a-z][a-z0-9-]{1,61}[a-z0-9]$.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for the CheckDnsNameAvailability API service call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<DnsNameAvailabilityResult>> checkDnsNameAvailabilityWithResponse(
        String location, String domainNameLabel) {
        return this.serviceClient.checkDnsNameAvailabilityWithResponseAsync(location, domainNameLabel);
    }

    /**
     * Checks whether a domain name in the cloudapp.azure.com zone is available for use.
     *
     * @param location The location of the domain name.
     * @param domainNameLabel The domain name to be verified. It must conform to the following regular expression:
     *     ^[a-z][a-z0-9-]{1,61}[a-z0-9]$.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for the CheckDnsNameAvailability API service call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<DnsNameAvailabilityResult>> checkDnsNameAvailabilityWithResponse(
        String location, String domainNameLabel, Context context) {
        return this.serviceClient.checkDnsNameAvailabilityWithResponseAsync(location, domainNameLabel, context);
    }

    /**
     * Checks whether a domain name in the cloudapp.azure.com zone is available for use.
     *
     * @param location The location of the domain name.
     * @param domainNameLabel The domain name to be verified. It must conform to the following regular expression:
     *     ^[a-z][a-z0-9-]{1,61}[a-z0-9]$.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for the CheckDnsNameAvailability API service call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DnsNameAvailabilityResult> checkDnsNameAvailability(String location, String domainNameLabel) {
        return this.serviceClient.checkDnsNameAvailabilityAsync(location, domainNameLabel);
    }

    /**
     * Checks whether a domain name in the cloudapp.azure.com zone is available for use.
     *
     * @param location The location of the domain name.
     * @param domainNameLabel The domain name to be verified. It must conform to the following regular expression:
     *     ^[a-z][a-z0-9-]{1,61}[a-z0-9]$.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for the CheckDnsNameAvailability API service call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DnsNameAvailabilityResult> checkDnsNameAvailability(
        String location, String domainNameLabel, Context context) {
        return this.serviceClient.checkDnsNameAvailabilityAsync(location, domainNameLabel, context);
    }

    /**
     * Gives the supported security providers for the virtual wan.
     *
     * @param resourceGroupName The resource group name.
     * @param virtualWanName The name of the VirtualWAN for which supported security providers are needed.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of SecurityProviders.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<VirtualWanSecurityProviders>> supportedSecurityProvidersWithResponse(
        String resourceGroupName, String virtualWanName) {
        return this.serviceClient.supportedSecurityProvidersWithResponseAsync(resourceGroupName, virtualWanName);
    }

    /**
     * Gives the supported security providers for the virtual wan.
     *
     * @param resourceGroupName The resource group name.
     * @param virtualWanName The name of the VirtualWAN for which supported security providers are needed.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of SecurityProviders.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<VirtualWanSecurityProviders>> supportedSecurityProvidersWithResponse(
        String resourceGroupName, String virtualWanName, Context context) {
        return this
            .serviceClient
            .supportedSecurityProvidersWithResponseAsync(resourceGroupName, virtualWanName, context);
    }

    /**
     * Gives the supported security providers for the virtual wan.
     *
     * @param resourceGroupName The resource group name.
     * @param virtualWanName The name of the VirtualWAN for which supported security providers are needed.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of SecurityProviders.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VirtualWanSecurityProviders> supportedSecurityProviders(
        String resourceGroupName, String virtualWanName) {
        return this.serviceClient.supportedSecurityProvidersAsync(resourceGroupName, virtualWanName);
    }

    /**
     * Gives the supported security providers for the virtual wan.
     *
     * @param resourceGroupName The resource group name.
     * @param virtualWanName The name of the VirtualWAN for which supported security providers are needed.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of SecurityProviders.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VirtualWanSecurityProviders> supportedSecurityProviders(
        String resourceGroupName, String virtualWanName, Context context) {
        return this.serviceClient.supportedSecurityProvidersAsync(resourceGroupName, virtualWanName, context);
    }

    /**
     * Generates a unique VPN profile for P2S clients for VirtualWan and associated VpnServerConfiguration combination
     * in the specified resource group.
     *
     * @param resourceGroupName The resource group name.
     * @param virtualWanName The name of the VirtualWAN whose associated VpnServerConfigurations is needed.
     * @param vpnClientParams Virtual Wan Vpn profile parameters Vpn profile generation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return vpn Profile Response for package generation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Flux<ByteBuffer>>> generatevirtualwanvpnserverconfigurationvpnprofileWithResponse(
        String resourceGroupName, String virtualWanName, VirtualWanVpnProfileParameters vpnClientParams) {
        return this
            .serviceClient
            .generatevirtualwanvpnserverconfigurationvpnprofileWithResponseAsync(
                resourceGroupName, virtualWanName, vpnClientParams);
    }

    /**
     * Generates a unique VPN profile for P2S clients for VirtualWan and associated VpnServerConfiguration combination
     * in the specified resource group.
     *
     * @param resourceGroupName The resource group name.
     * @param virtualWanName The name of the VirtualWAN whose associated VpnServerConfigurations is needed.
     * @param vpnClientParams Virtual Wan Vpn profile parameters Vpn profile generation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return vpn Profile Response for package generation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Flux<ByteBuffer>>> generatevirtualwanvpnserverconfigurationvpnprofileWithResponse(
        String resourceGroupName,
        String virtualWanName,
        VirtualWanVpnProfileParameters vpnClientParams,
        Context context) {
        return this
            .serviceClient
            .generatevirtualwanvpnserverconfigurationvpnprofileWithResponseAsync(
                resourceGroupName, virtualWanName, vpnClientParams, context);
    }

    /**
     * Generates a unique VPN profile for P2S clients for VirtualWan and associated VpnServerConfiguration combination
     * in the specified resource group.
     *
     * @param resourceGroupName The resource group name.
     * @param virtualWanName The name of the VirtualWAN whose associated VpnServerConfigurations is needed.
     * @param vpnClientParams Virtual Wan Vpn profile parameters Vpn profile generation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return vpn Profile Response for package generation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PollerFlux<PollResult<VpnProfileResponse>, VpnProfileResponse>
        beginGeneratevirtualwanvpnserverconfigurationvpnprofile(
            String resourceGroupName, String virtualWanName, VirtualWanVpnProfileParameters vpnClientParams) {
        return this
            .serviceClient
            .beginGeneratevirtualwanvpnserverconfigurationvpnprofile(
                resourceGroupName, virtualWanName, vpnClientParams);
    }

    /**
     * Generates a unique VPN profile for P2S clients for VirtualWan and associated VpnServerConfiguration combination
     * in the specified resource group.
     *
     * @param resourceGroupName The resource group name.
     * @param virtualWanName The name of the VirtualWAN whose associated VpnServerConfigurations is needed.
     * @param vpnClientParams Virtual Wan Vpn profile parameters Vpn profile generation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return vpn Profile Response for package generation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PollerFlux<PollResult<VpnProfileResponse>, VpnProfileResponse>
        beginGeneratevirtualwanvpnserverconfigurationvpnprofile(
            String resourceGroupName,
            String virtualWanName,
            VirtualWanVpnProfileParameters vpnClientParams,
            Context context) {
        return this
            .serviceClient
            .beginGeneratevirtualwanvpnserverconfigurationvpnprofile(
                resourceGroupName, virtualWanName, vpnClientParams, context);
    }

    /**
     * Generates a unique VPN profile for P2S clients for VirtualWan and associated VpnServerConfiguration combination
     * in the specified resource group.
     *
     * @param resourceGroupName The resource group name.
     * @param virtualWanName The name of the VirtualWAN whose associated VpnServerConfigurations is needed.
     * @param vpnClientParams Virtual Wan Vpn profile parameters Vpn profile generation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return vpn Profile Response for package generation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VpnProfileResponse> generatevirtualwanvpnserverconfigurationvpnprofile(
        String resourceGroupName, String virtualWanName, VirtualWanVpnProfileParameters vpnClientParams) {
        return this
            .serviceClient
            .generatevirtualwanvpnserverconfigurationvpnprofileAsync(
                resourceGroupName, virtualWanName, vpnClientParams);
    }

    /**
     * Generates a unique VPN profile for P2S clients for VirtualWan and associated VpnServerConfiguration combination
     * in the specified resource group.
     *
     * @param resourceGroupName The resource group name.
     * @param virtualWanName The name of the VirtualWAN whose associated VpnServerConfigurations is needed.
     * @param vpnClientParams Virtual Wan Vpn profile parameters Vpn profile generation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return vpn Profile Response for package generation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VpnProfileResponse> generatevirtualwanvpnserverconfigurationvpnprofile(
        String resourceGroupName,
        String virtualWanName,
        VirtualWanVpnProfileParameters vpnClientParams,
        Context context) {
        return this
            .serviceClient
            .generatevirtualwanvpnserverconfigurationvpnprofileAsync(
                resourceGroupName, virtualWanName, vpnClientParams, context);
    }

    /**
     * Creates a Bastion Shareable Links for all the VMs specified in the request.
     *
     * @param resourceGroupName The name of the resource group.
     * @param bastionHostname The name of the Bastion Host.
     * @param vms List of VM references.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for all the Bastion Shareable Link endpoints.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BastionShareableLinkListResult>> beginPutBastionShareableLinkWithoutPollingWithResponse(
        String resourceGroupName, String bastionHostname, List<BastionShareableLink> vms) {
        return this
            .serviceClient
            .beginPutBastionShareableLinkWithoutPollingWithResponseAsync(resourceGroupName, bastionHostname, vms);
    }

    /**
     * Creates a Bastion Shareable Links for all the VMs specified in the request.
     *
     * @param resourceGroupName The name of the resource group.
     * @param bastionHostname The name of the Bastion Host.
     * @param vms List of VM references.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for all the Bastion Shareable Link endpoints.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BastionShareableLinkListResult>> beginPutBastionShareableLinkWithoutPollingWithResponse(
        String resourceGroupName, String bastionHostname, List<BastionShareableLink> vms, Context context) {
        return this
            .serviceClient
            .beginPutBastionShareableLinkWithoutPollingWithResponseAsync(
                resourceGroupName, bastionHostname, vms, context);
    }

    /**
     * Creates a Bastion Shareable Links for all the VMs specified in the request.
     *
     * @param resourceGroupName The name of the resource group.
     * @param bastionHostname The name of the Bastion Host.
     * @param vms List of VM references.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for all the Bastion Shareable Link endpoints.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BastionShareableLinkListResult> beginPutBastionShareableLinkWithoutPolling(
        String resourceGroupName, String bastionHostname, List<BastionShareableLink> vms) {
        return this
            .serviceClient
            .beginPutBastionShareableLinkWithoutPollingAsync(resourceGroupName, bastionHostname, vms);
    }

    /**
     * Creates a Bastion Shareable Links for all the VMs specified in the request.
     *
     * @param resourceGroupName The name of the resource group.
     * @param bastionHostname The name of the Bastion Host.
     * @param vms List of VM references.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for all the Bastion Shareable Link endpoints.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BastionShareableLinkListResult> beginPutBastionShareableLinkWithoutPolling(
        String resourceGroupName, String bastionHostname, List<BastionShareableLink> vms, Context context) {
        return this
            .serviceClient
            .beginPutBastionShareableLinkWithoutPollingAsync(resourceGroupName, bastionHostname, vms, context);
    }

    /**
     * Deletes the Bastion Shareable Links for all the VMs specified in the request.
     *
     * @param resourceGroupName The name of the resource group.
     * @param bastionHostname The name of the Bastion Host.
     * @param vms List of VM references.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> beginDeleteBastionShareableLinkWithoutPollingWithResponse(
        String resourceGroupName, String bastionHostname, List<BastionShareableLink> vms) {
        return this
            .serviceClient
            .beginDeleteBastionShareableLinkWithoutPollingWithResponseAsync(resourceGroupName, bastionHostname, vms);
    }

    /**
     * Deletes the Bastion Shareable Links for all the VMs specified in the request.
     *
     * @param resourceGroupName The name of the resource group.
     * @param bastionHostname The name of the Bastion Host.
     * @param vms List of VM references.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> beginDeleteBastionShareableLinkWithoutPollingWithResponse(
        String resourceGroupName, String bastionHostname, List<BastionShareableLink> vms, Context context) {
        return this
            .serviceClient
            .beginDeleteBastionShareableLinkWithoutPollingWithResponseAsync(
                resourceGroupName, bastionHostname, vms, context);
    }

    /**
     * Deletes the Bastion Shareable Links for all the VMs specified in the request.
     *
     * @param resourceGroupName The name of the resource group.
     * @param bastionHostname The name of the Bastion Host.
     * @param vms List of VM references.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> beginDeleteBastionShareableLinkWithoutPolling(
        String resourceGroupName, String bastionHostname, List<BastionShareableLink> vms) {
        return this
            .serviceClient
            .beginDeleteBastionShareableLinkWithoutPollingAsync(resourceGroupName, bastionHostname, vms);
    }

    /**
     * Deletes the Bastion Shareable Links for all the VMs specified in the request.
     *
     * @param resourceGroupName The name of the resource group.
     * @param bastionHostname The name of the Bastion Host.
     * @param vms List of VM references.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> beginDeleteBastionShareableLinkWithoutPolling(
        String resourceGroupName, String bastionHostname, List<BastionShareableLink> vms, Context context) {
        return this
            .serviceClient
            .beginDeleteBastionShareableLinkWithoutPollingAsync(resourceGroupName, bastionHostname, vms, context);
    }

    /**
     * Returns the list of currently active sessions on the Bastion.
     *
     * @param resourceGroupName The name of the resource group.
     * @param bastionHostname The name of the Bastion Host.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for GetActiveSessions.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BastionActiveSessionListResult>> beginGetActiveSessionsWithoutPollingWithResponse(
        String resourceGroupName, String bastionHostname) {
        return this
            .serviceClient
            .beginGetActiveSessionsWithoutPollingWithResponseAsync(resourceGroupName, bastionHostname);
    }

    /**
     * Returns the list of currently active sessions on the Bastion.
     *
     * @param resourceGroupName The name of the resource group.
     * @param bastionHostname The name of the Bastion Host.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for GetActiveSessions.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BastionActiveSessionListResult>> beginGetActiveSessionsWithoutPollingWithResponse(
        String resourceGroupName, String bastionHostname, Context context) {
        return this
            .serviceClient
            .beginGetActiveSessionsWithoutPollingWithResponseAsync(resourceGroupName, bastionHostname, context);
    }

    /**
     * Returns the list of currently active sessions on the Bastion.
     *
     * @param resourceGroupName The name of the resource group.
     * @param bastionHostname The name of the Bastion Host.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for GetActiveSessions.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BastionActiveSessionListResult> beginGetActiveSessionsWithoutPolling(
        String resourceGroupName, String bastionHostname) {
        return this.serviceClient.beginGetActiveSessionsWithoutPollingAsync(resourceGroupName, bastionHostname);
    }

    /**
     * Returns the list of currently active sessions on the Bastion.
     *
     * @param resourceGroupName The name of the resource group.
     * @param bastionHostname The name of the Bastion Host.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for GetActiveSessions.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BastionActiveSessionListResult> beginGetActiveSessionsWithoutPolling(
        String resourceGroupName, String bastionHostname, Context context) {
        return this
            .serviceClient
            .beginGetActiveSessionsWithoutPollingAsync(resourceGroupName, bastionHostname, context);
    }

    /**
     * Generates a unique VPN profile for P2S clients for VirtualWan and associated VpnServerConfiguration combination
     * in the specified resource group.
     *
     * @param resourceGroupName The resource group name.
     * @param virtualWanName The name of the VirtualWAN whose associated VpnServerConfigurations is needed.
     * @param vpnClientParams Virtual Wan Vpn profile parameters Vpn profile generation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return vpn Profile Response for package generation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<VpnProfileResponse>>
        beginGeneratevirtualwanvpnserverconfigurationvpnprofileWithoutPollingWithResponse(
            String resourceGroupName, String virtualWanName, VirtualWanVpnProfileParameters vpnClientParams) {
        return this
            .serviceClient
            .beginGeneratevirtualwanvpnserverconfigurationvpnprofileWithoutPollingWithResponseAsync(
                resourceGroupName, virtualWanName, vpnClientParams);
    }

    /**
     * Generates a unique VPN profile for P2S clients for VirtualWan and associated VpnServerConfiguration combination
     * in the specified resource group.
     *
     * @param resourceGroupName The resource group name.
     * @param virtualWanName The name of the VirtualWAN whose associated VpnServerConfigurations is needed.
     * @param vpnClientParams Virtual Wan Vpn profile parameters Vpn profile generation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return vpn Profile Response for package generation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<VpnProfileResponse>>
        beginGeneratevirtualwanvpnserverconfigurationvpnprofileWithoutPollingWithResponse(
            String resourceGroupName,
            String virtualWanName,
            VirtualWanVpnProfileParameters vpnClientParams,
            Context context) {
        return this
            .serviceClient
            .beginGeneratevirtualwanvpnserverconfigurationvpnprofileWithoutPollingWithResponseAsync(
                resourceGroupName, virtualWanName, vpnClientParams, context);
    }

    /**
     * Generates a unique VPN profile for P2S clients for VirtualWan and associated VpnServerConfiguration combination
     * in the specified resource group.
     *
     * @param resourceGroupName The resource group name.
     * @param virtualWanName The name of the VirtualWAN whose associated VpnServerConfigurations is needed.
     * @param vpnClientParams Virtual Wan Vpn profile parameters Vpn profile generation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return vpn Profile Response for package generation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VpnProfileResponse> beginGeneratevirtualwanvpnserverconfigurationvpnprofileWithoutPolling(
        String resourceGroupName, String virtualWanName, VirtualWanVpnProfileParameters vpnClientParams) {
        return this
            .serviceClient
            .beginGeneratevirtualwanvpnserverconfigurationvpnprofileWithoutPollingAsync(
                resourceGroupName, virtualWanName, vpnClientParams);
    }

    /**
     * Generates a unique VPN profile for P2S clients for VirtualWan and associated VpnServerConfiguration combination
     * in the specified resource group.
     *
     * @param resourceGroupName The resource group name.
     * @param virtualWanName The name of the VirtualWAN whose associated VpnServerConfigurations is needed.
     * @param vpnClientParams Virtual Wan Vpn profile parameters Vpn profile generation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return vpn Profile Response for package generation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VpnProfileResponse> beginGeneratevirtualwanvpnserverconfigurationvpnprofileWithoutPolling(
        String resourceGroupName,
        String virtualWanName,
        VirtualWanVpnProfileParameters vpnClientParams,
        Context context) {
        return this
            .serviceClient
            .beginGeneratevirtualwanvpnserverconfigurationvpnprofileWithoutPollingAsync(
                resourceGroupName, virtualWanName, vpnClientParams, context);
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for all the Bastion Shareable Link endpoints.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public Mono<PagedResponse<BastionShareableLink>> getBastionShareableLinkNextSinglePage(String nextLink) {
        return this.serviceClient.getBastionShareableLinkNextSinglePageAsync(nextLink);
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink null
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for all the Bastion Shareable Link endpoints.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public Mono<PagedResponse<BastionShareableLink>> getBastionShareableLinkNextSinglePage(
        String nextLink, Context context) {
        return this.serviceClient.getBastionShareableLinkNextSinglePageAsync(nextLink, context);
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for DisconnectActiveSessions.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public Mono<PagedResponse<BastionSessionState>> disconnectActiveSessionsNextSinglePage(String nextLink) {
        return this.serviceClient.disconnectActiveSessionsNextSinglePageAsync(nextLink);
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink null
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for DisconnectActiveSessions.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public Mono<PagedResponse<BastionSessionState>> disconnectActiveSessionsNextSinglePage(
        String nextLink, Context context) {
        return this.serviceClient.disconnectActiveSessionsNextSinglePageAsync(nextLink, context);
    }
}
