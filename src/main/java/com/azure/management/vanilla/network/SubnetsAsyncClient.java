// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.management.vanilla.network;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.Response;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.PollerFlux;
import com.azure.management.vanilla.network.implementation.SubnetsImpl;
import com.azure.management.vanilla.network.models.PrepareNetworkPoliciesRequest;
import com.azure.management.vanilla.network.models.Subnet;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/** Initializes a new instance of the asynchronous NetworkManagementClient type. */
@ServiceClient(builder = NetworkManagementClientBuilder.class)
public final class SubnetsAsyncClient {
    private SubnetsImpl serviceClient;

    /** Initializes an instance of Subnets client. */
    SubnetsAsyncClient(SubnetsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Deletes the specified subnet.
     *
     * @param resourceGroupName The name of the resource group.
     * @param virtualNetworkName The name of the virtual network.
     * @param subnetName The name of the subnet.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Flux<ByteBuffer>>> deleteWithResponse(
        String resourceGroupName, String virtualNetworkName, String subnetName) {
        return this.serviceClient.deleteWithResponseAsync(resourceGroupName, virtualNetworkName, subnetName);
    }

    /**
     * Deletes the specified subnet.
     *
     * @param resourceGroupName The name of the resource group.
     * @param virtualNetworkName The name of the virtual network.
     * @param subnetName The name of the subnet.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Flux<ByteBuffer>>> deleteWithResponse(
        String resourceGroupName, String virtualNetworkName, String subnetName, Context context) {
        return this.serviceClient.deleteWithResponseAsync(resourceGroupName, virtualNetworkName, subnetName, context);
    }

    /**
     * Deletes the specified subnet.
     *
     * @param resourceGroupName The name of the resource group.
     * @param virtualNetworkName The name of the virtual network.
     * @param subnetName The name of the subnet.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PollerFlux<PollResult<Void>, Void> beginDelete(
        String resourceGroupName, String virtualNetworkName, String subnetName) {
        return this.serviceClient.beginDelete(resourceGroupName, virtualNetworkName, subnetName);
    }

    /**
     * Deletes the specified subnet.
     *
     * @param resourceGroupName The name of the resource group.
     * @param virtualNetworkName The name of the virtual network.
     * @param subnetName The name of the subnet.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PollerFlux<PollResult<Void>, Void> beginDelete(
        String resourceGroupName, String virtualNetworkName, String subnetName, Context context) {
        return this.serviceClient.beginDelete(resourceGroupName, virtualNetworkName, subnetName, context);
    }

    /**
     * Deletes the specified subnet.
     *
     * @param resourceGroupName The name of the resource group.
     * @param virtualNetworkName The name of the virtual network.
     * @param subnetName The name of the subnet.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> delete(String resourceGroupName, String virtualNetworkName, String subnetName) {
        return this.serviceClient.deleteAsync(resourceGroupName, virtualNetworkName, subnetName);
    }

    /**
     * Deletes the specified subnet.
     *
     * @param resourceGroupName The name of the resource group.
     * @param virtualNetworkName The name of the virtual network.
     * @param subnetName The name of the subnet.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> delete(String resourceGroupName, String virtualNetworkName, String subnetName, Context context) {
        return this.serviceClient.deleteAsync(resourceGroupName, virtualNetworkName, subnetName, context);
    }

    /**
     * Gets the specified subnet by virtual network and resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param virtualNetworkName The name of the virtual network.
     * @param subnetName The name of the subnet.
     * @param expand Expands referenced resources.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the specified subnet by virtual network and resource group.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Subnet>> getWithResponse(
        String resourceGroupName, String virtualNetworkName, String subnetName, String expand) {
        return this.serviceClient.getWithResponseAsync(resourceGroupName, virtualNetworkName, subnetName, expand);
    }

    /**
     * Gets the specified subnet by virtual network and resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param virtualNetworkName The name of the virtual network.
     * @param subnetName The name of the subnet.
     * @param expand Expands referenced resources.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the specified subnet by virtual network and resource group.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Subnet>> getWithResponse(
        String resourceGroupName, String virtualNetworkName, String subnetName, String expand, Context context) {
        return this
            .serviceClient
            .getWithResponseAsync(resourceGroupName, virtualNetworkName, subnetName, expand, context);
    }

    /**
     * Gets the specified subnet by virtual network and resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param virtualNetworkName The name of the virtual network.
     * @param subnetName The name of the subnet.
     * @param expand Expands referenced resources.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the specified subnet by virtual network and resource group.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Subnet> get(String resourceGroupName, String virtualNetworkName, String subnetName, String expand) {
        return this.serviceClient.getAsync(resourceGroupName, virtualNetworkName, subnetName, expand);
    }

    /**
     * Gets the specified subnet by virtual network and resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param virtualNetworkName The name of the virtual network.
     * @param subnetName The name of the subnet.
     * @param expand Expands referenced resources.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the specified subnet by virtual network and resource group.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Subnet> get(
        String resourceGroupName, String virtualNetworkName, String subnetName, String expand, Context context) {
        return this.serviceClient.getAsync(resourceGroupName, virtualNetworkName, subnetName, expand, context);
    }

    /**
     * Gets the specified subnet by virtual network and resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param virtualNetworkName The name of the virtual network.
     * @param subnetName The name of the subnet.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the specified subnet by virtual network and resource group.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Subnet> get(String resourceGroupName, String virtualNetworkName, String subnetName) {
        return this.serviceClient.getAsync(resourceGroupName, virtualNetworkName, subnetName);
    }

    /**
     * Creates or updates a subnet in the specified virtual network.
     *
     * @param resourceGroupName The name of the resource group.
     * @param virtualNetworkName The name of the virtual network.
     * @param subnetName The name of the subnet.
     * @param subnetParameters Subnet in a virtual network resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return subnet in a virtual network resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponse(
        String resourceGroupName, String virtualNetworkName, String subnetName, Subnet subnetParameters) {
        return this
            .serviceClient
            .createOrUpdateWithResponseAsync(resourceGroupName, virtualNetworkName, subnetName, subnetParameters);
    }

    /**
     * Creates or updates a subnet in the specified virtual network.
     *
     * @param resourceGroupName The name of the resource group.
     * @param virtualNetworkName The name of the virtual network.
     * @param subnetName The name of the subnet.
     * @param subnetParameters Subnet in a virtual network resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return subnet in a virtual network resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponse(
        String resourceGroupName,
        String virtualNetworkName,
        String subnetName,
        Subnet subnetParameters,
        Context context) {
        return this
            .serviceClient
            .createOrUpdateWithResponseAsync(
                resourceGroupName, virtualNetworkName, subnetName, subnetParameters, context);
    }

    /**
     * Creates or updates a subnet in the specified virtual network.
     *
     * @param resourceGroupName The name of the resource group.
     * @param virtualNetworkName The name of the virtual network.
     * @param subnetName The name of the subnet.
     * @param subnetParameters Subnet in a virtual network resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return subnet in a virtual network resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PollerFlux<PollResult<Subnet>, Subnet> beginCreateOrUpdate(
        String resourceGroupName, String virtualNetworkName, String subnetName, Subnet subnetParameters) {
        return this
            .serviceClient
            .beginCreateOrUpdate(resourceGroupName, virtualNetworkName, subnetName, subnetParameters);
    }

    /**
     * Creates or updates a subnet in the specified virtual network.
     *
     * @param resourceGroupName The name of the resource group.
     * @param virtualNetworkName The name of the virtual network.
     * @param subnetName The name of the subnet.
     * @param subnetParameters Subnet in a virtual network resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return subnet in a virtual network resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PollerFlux<PollResult<Subnet>, Subnet> beginCreateOrUpdate(
        String resourceGroupName,
        String virtualNetworkName,
        String subnetName,
        Subnet subnetParameters,
        Context context) {
        return this
            .serviceClient
            .beginCreateOrUpdate(resourceGroupName, virtualNetworkName, subnetName, subnetParameters, context);
    }

    /**
     * Creates or updates a subnet in the specified virtual network.
     *
     * @param resourceGroupName The name of the resource group.
     * @param virtualNetworkName The name of the virtual network.
     * @param subnetName The name of the subnet.
     * @param subnetParameters Subnet in a virtual network resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return subnet in a virtual network resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Subnet> createOrUpdate(
        String resourceGroupName, String virtualNetworkName, String subnetName, Subnet subnetParameters) {
        return this
            .serviceClient
            .createOrUpdateAsync(resourceGroupName, virtualNetworkName, subnetName, subnetParameters);
    }

    /**
     * Creates or updates a subnet in the specified virtual network.
     *
     * @param resourceGroupName The name of the resource group.
     * @param virtualNetworkName The name of the virtual network.
     * @param subnetName The name of the subnet.
     * @param subnetParameters Subnet in a virtual network resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return subnet in a virtual network resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Subnet> createOrUpdate(
        String resourceGroupName,
        String virtualNetworkName,
        String subnetName,
        Subnet subnetParameters,
        Context context) {
        return this
            .serviceClient
            .createOrUpdateAsync(resourceGroupName, virtualNetworkName, subnetName, subnetParameters, context);
    }

    /**
     * Prepares a subnet by applying network intent policies.
     *
     * @param resourceGroupName The name of the resource group.
     * @param virtualNetworkName The name of the virtual network.
     * @param subnetName The name of the subnet.
     * @param prepareNetworkPoliciesRequestParameters Details of PrepareNetworkPolicies for Subnet.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Flux<ByteBuffer>>> prepareNetworkPoliciesWithResponse(
        String resourceGroupName,
        String virtualNetworkName,
        String subnetName,
        PrepareNetworkPoliciesRequest prepareNetworkPoliciesRequestParameters) {
        return this
            .serviceClient
            .prepareNetworkPoliciesWithResponseAsync(
                resourceGroupName, virtualNetworkName, subnetName, prepareNetworkPoliciesRequestParameters);
    }

    /**
     * Prepares a subnet by applying network intent policies.
     *
     * @param resourceGroupName The name of the resource group.
     * @param virtualNetworkName The name of the virtual network.
     * @param subnetName The name of the subnet.
     * @param prepareNetworkPoliciesRequestParameters Details of PrepareNetworkPolicies for Subnet.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Flux<ByteBuffer>>> prepareNetworkPoliciesWithResponse(
        String resourceGroupName,
        String virtualNetworkName,
        String subnetName,
        PrepareNetworkPoliciesRequest prepareNetworkPoliciesRequestParameters,
        Context context) {
        return this
            .serviceClient
            .prepareNetworkPoliciesWithResponseAsync(
                resourceGroupName, virtualNetworkName, subnetName, prepareNetworkPoliciesRequestParameters, context);
    }

    /**
     * Prepares a subnet by applying network intent policies.
     *
     * @param resourceGroupName The name of the resource group.
     * @param virtualNetworkName The name of the virtual network.
     * @param subnetName The name of the subnet.
     * @param prepareNetworkPoliciesRequestParameters Details of PrepareNetworkPolicies for Subnet.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PollerFlux<PollResult<Void>, Void> beginPrepareNetworkPolicies(
        String resourceGroupName,
        String virtualNetworkName,
        String subnetName,
        PrepareNetworkPoliciesRequest prepareNetworkPoliciesRequestParameters) {
        return this
            .serviceClient
            .beginPrepareNetworkPolicies(
                resourceGroupName, virtualNetworkName, subnetName, prepareNetworkPoliciesRequestParameters);
    }

    /**
     * Prepares a subnet by applying network intent policies.
     *
     * @param resourceGroupName The name of the resource group.
     * @param virtualNetworkName The name of the virtual network.
     * @param subnetName The name of the subnet.
     * @param prepareNetworkPoliciesRequestParameters Details of PrepareNetworkPolicies for Subnet.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PollerFlux<PollResult<Void>, Void> beginPrepareNetworkPolicies(
        String resourceGroupName,
        String virtualNetworkName,
        String subnetName,
        PrepareNetworkPoliciesRequest prepareNetworkPoliciesRequestParameters,
        Context context) {
        return this
            .serviceClient
            .beginPrepareNetworkPolicies(
                resourceGroupName, virtualNetworkName, subnetName, prepareNetworkPoliciesRequestParameters, context);
    }

    /**
     * Prepares a subnet by applying network intent policies.
     *
     * @param resourceGroupName The name of the resource group.
     * @param virtualNetworkName The name of the virtual network.
     * @param subnetName The name of the subnet.
     * @param prepareNetworkPoliciesRequestParameters Details of PrepareNetworkPolicies for Subnet.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> prepareNetworkPolicies(
        String resourceGroupName,
        String virtualNetworkName,
        String subnetName,
        PrepareNetworkPoliciesRequest prepareNetworkPoliciesRequestParameters) {
        return this
            .serviceClient
            .prepareNetworkPoliciesAsync(
                resourceGroupName, virtualNetworkName, subnetName, prepareNetworkPoliciesRequestParameters);
    }

    /**
     * Prepares a subnet by applying network intent policies.
     *
     * @param resourceGroupName The name of the resource group.
     * @param virtualNetworkName The name of the virtual network.
     * @param subnetName The name of the subnet.
     * @param prepareNetworkPoliciesRequestParameters Details of PrepareNetworkPolicies for Subnet.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> prepareNetworkPolicies(
        String resourceGroupName,
        String virtualNetworkName,
        String subnetName,
        PrepareNetworkPoliciesRequest prepareNetworkPoliciesRequestParameters,
        Context context) {
        return this
            .serviceClient
            .prepareNetworkPoliciesAsync(
                resourceGroupName, virtualNetworkName, subnetName, prepareNetworkPoliciesRequestParameters, context);
    }

    /**
     * Unprepares a subnet by removing network intent policies.
     *
     * @param resourceGroupName The name of the resource group.
     * @param virtualNetworkName The name of the virtual network.
     * @param subnetName The name of the subnet.
     * @param serviceName The name of the service for which subnet is being unprepared for.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Flux<ByteBuffer>>> unprepareNetworkPoliciesWithResponse(
        String resourceGroupName, String virtualNetworkName, String subnetName, String serviceName) {
        return this
            .serviceClient
            .unprepareNetworkPoliciesWithResponseAsync(resourceGroupName, virtualNetworkName, subnetName, serviceName);
    }

    /**
     * Unprepares a subnet by removing network intent policies.
     *
     * @param resourceGroupName The name of the resource group.
     * @param virtualNetworkName The name of the virtual network.
     * @param subnetName The name of the subnet.
     * @param serviceName The name of the service for which subnet is being unprepared for.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Flux<ByteBuffer>>> unprepareNetworkPoliciesWithResponse(
        String resourceGroupName, String virtualNetworkName, String subnetName, String serviceName, Context context) {
        return this
            .serviceClient
            .unprepareNetworkPoliciesWithResponseAsync(
                resourceGroupName, virtualNetworkName, subnetName, serviceName, context);
    }

    /**
     * Unprepares a subnet by removing network intent policies.
     *
     * @param resourceGroupName The name of the resource group.
     * @param virtualNetworkName The name of the virtual network.
     * @param subnetName The name of the subnet.
     * @param serviceName The name of the service for which subnet is being unprepared for.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PollerFlux<PollResult<Void>, Void> beginUnprepareNetworkPolicies(
        String resourceGroupName, String virtualNetworkName, String subnetName, String serviceName) {
        return this
            .serviceClient
            .beginUnprepareNetworkPolicies(resourceGroupName, virtualNetworkName, subnetName, serviceName);
    }

    /**
     * Unprepares a subnet by removing network intent policies.
     *
     * @param resourceGroupName The name of the resource group.
     * @param virtualNetworkName The name of the virtual network.
     * @param subnetName The name of the subnet.
     * @param serviceName The name of the service for which subnet is being unprepared for.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PollerFlux<PollResult<Void>, Void> beginUnprepareNetworkPolicies(
        String resourceGroupName, String virtualNetworkName, String subnetName, String serviceName, Context context) {
        return this
            .serviceClient
            .beginUnprepareNetworkPolicies(resourceGroupName, virtualNetworkName, subnetName, serviceName, context);
    }

    /**
     * Unprepares a subnet by removing network intent policies.
     *
     * @param resourceGroupName The name of the resource group.
     * @param virtualNetworkName The name of the virtual network.
     * @param subnetName The name of the subnet.
     * @param serviceName The name of the service for which subnet is being unprepared for.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> unprepareNetworkPolicies(
        String resourceGroupName, String virtualNetworkName, String subnetName, String serviceName) {
        return this
            .serviceClient
            .unprepareNetworkPoliciesAsync(resourceGroupName, virtualNetworkName, subnetName, serviceName);
    }

    /**
     * Unprepares a subnet by removing network intent policies.
     *
     * @param resourceGroupName The name of the resource group.
     * @param virtualNetworkName The name of the virtual network.
     * @param subnetName The name of the subnet.
     * @param serviceName The name of the service for which subnet is being unprepared for.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> unprepareNetworkPolicies(
        String resourceGroupName, String virtualNetworkName, String subnetName, String serviceName, Context context) {
        return this
            .serviceClient
            .unprepareNetworkPoliciesAsync(resourceGroupName, virtualNetworkName, subnetName, serviceName, context);
    }

    /**
     * Gets all subnets in a virtual network.
     *
     * @param resourceGroupName The name of the resource group.
     * @param virtualNetworkName The name of the virtual network.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all subnets in a virtual network.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public Mono<PagedResponse<Subnet>> listSinglePage(String resourceGroupName, String virtualNetworkName) {
        return this.serviceClient.listSinglePageAsync(resourceGroupName, virtualNetworkName);
    }

    /**
     * Gets all subnets in a virtual network.
     *
     * @param resourceGroupName The name of the resource group.
     * @param virtualNetworkName The name of the virtual network.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all subnets in a virtual network.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public Mono<PagedResponse<Subnet>> listSinglePage(
        String resourceGroupName, String virtualNetworkName, Context context) {
        return this.serviceClient.listSinglePageAsync(resourceGroupName, virtualNetworkName, context);
    }

    /**
     * Gets all subnets in a virtual network.
     *
     * @param resourceGroupName The name of the resource group.
     * @param virtualNetworkName The name of the virtual network.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all subnets in a virtual network.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<Subnet> list(String resourceGroupName, String virtualNetworkName) {
        return this.serviceClient.listAsync(resourceGroupName, virtualNetworkName);
    }

    /**
     * Gets all subnets in a virtual network.
     *
     * @param resourceGroupName The name of the resource group.
     * @param virtualNetworkName The name of the virtual network.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all subnets in a virtual network.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<Subnet> list(String resourceGroupName, String virtualNetworkName, Context context) {
        return this.serviceClient.listAsync(resourceGroupName, virtualNetworkName, context);
    }

    /**
     * Deletes the specified subnet.
     *
     * @param resourceGroupName The name of the resource group.
     * @param virtualNetworkName The name of the virtual network.
     * @param subnetName The name of the subnet.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> beginDeleteWithoutPollingWithResponse(
        String resourceGroupName, String virtualNetworkName, String subnetName) {
        return this
            .serviceClient
            .beginDeleteWithoutPollingWithResponseAsync(resourceGroupName, virtualNetworkName, subnetName);
    }

    /**
     * Deletes the specified subnet.
     *
     * @param resourceGroupName The name of the resource group.
     * @param virtualNetworkName The name of the virtual network.
     * @param subnetName The name of the subnet.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> beginDeleteWithoutPollingWithResponse(
        String resourceGroupName, String virtualNetworkName, String subnetName, Context context) {
        return this
            .serviceClient
            .beginDeleteWithoutPollingWithResponseAsync(resourceGroupName, virtualNetworkName, subnetName, context);
    }

    /**
     * Deletes the specified subnet.
     *
     * @param resourceGroupName The name of the resource group.
     * @param virtualNetworkName The name of the virtual network.
     * @param subnetName The name of the subnet.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> beginDeleteWithoutPolling(
        String resourceGroupName, String virtualNetworkName, String subnetName) {
        return this.serviceClient.beginDeleteWithoutPollingAsync(resourceGroupName, virtualNetworkName, subnetName);
    }

    /**
     * Deletes the specified subnet.
     *
     * @param resourceGroupName The name of the resource group.
     * @param virtualNetworkName The name of the virtual network.
     * @param subnetName The name of the subnet.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> beginDeleteWithoutPolling(
        String resourceGroupName, String virtualNetworkName, String subnetName, Context context) {
        return this
            .serviceClient
            .beginDeleteWithoutPollingAsync(resourceGroupName, virtualNetworkName, subnetName, context);
    }

    /**
     * Creates or updates a subnet in the specified virtual network.
     *
     * @param resourceGroupName The name of the resource group.
     * @param virtualNetworkName The name of the virtual network.
     * @param subnetName The name of the subnet.
     * @param subnetParameters Subnet in a virtual network resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return subnet in a virtual network resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Subnet>> beginCreateOrUpdateWithoutPollingWithResponse(
        String resourceGroupName, String virtualNetworkName, String subnetName, Subnet subnetParameters) {
        return this
            .serviceClient
            .beginCreateOrUpdateWithoutPollingWithResponseAsync(
                resourceGroupName, virtualNetworkName, subnetName, subnetParameters);
    }

    /**
     * Creates or updates a subnet in the specified virtual network.
     *
     * @param resourceGroupName The name of the resource group.
     * @param virtualNetworkName The name of the virtual network.
     * @param subnetName The name of the subnet.
     * @param subnetParameters Subnet in a virtual network resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return subnet in a virtual network resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Subnet>> beginCreateOrUpdateWithoutPollingWithResponse(
        String resourceGroupName,
        String virtualNetworkName,
        String subnetName,
        Subnet subnetParameters,
        Context context) {
        return this
            .serviceClient
            .beginCreateOrUpdateWithoutPollingWithResponseAsync(
                resourceGroupName, virtualNetworkName, subnetName, subnetParameters, context);
    }

    /**
     * Creates or updates a subnet in the specified virtual network.
     *
     * @param resourceGroupName The name of the resource group.
     * @param virtualNetworkName The name of the virtual network.
     * @param subnetName The name of the subnet.
     * @param subnetParameters Subnet in a virtual network resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return subnet in a virtual network resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Subnet> beginCreateOrUpdateWithoutPolling(
        String resourceGroupName, String virtualNetworkName, String subnetName, Subnet subnetParameters) {
        return this
            .serviceClient
            .beginCreateOrUpdateWithoutPollingAsync(
                resourceGroupName, virtualNetworkName, subnetName, subnetParameters);
    }

    /**
     * Creates or updates a subnet in the specified virtual network.
     *
     * @param resourceGroupName The name of the resource group.
     * @param virtualNetworkName The name of the virtual network.
     * @param subnetName The name of the subnet.
     * @param subnetParameters Subnet in a virtual network resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return subnet in a virtual network resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Subnet> beginCreateOrUpdateWithoutPolling(
        String resourceGroupName,
        String virtualNetworkName,
        String subnetName,
        Subnet subnetParameters,
        Context context) {
        return this
            .serviceClient
            .beginCreateOrUpdateWithoutPollingAsync(
                resourceGroupName, virtualNetworkName, subnetName, subnetParameters, context);
    }

    /**
     * Prepares a subnet by applying network intent policies.
     *
     * @param resourceGroupName The name of the resource group.
     * @param virtualNetworkName The name of the virtual network.
     * @param subnetName The name of the subnet.
     * @param prepareNetworkPoliciesRequestParameters Details of PrepareNetworkPolicies for Subnet.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> beginPrepareNetworkPoliciesWithoutPollingWithResponse(
        String resourceGroupName,
        String virtualNetworkName,
        String subnetName,
        PrepareNetworkPoliciesRequest prepareNetworkPoliciesRequestParameters) {
        return this
            .serviceClient
            .beginPrepareNetworkPoliciesWithoutPollingWithResponseAsync(
                resourceGroupName, virtualNetworkName, subnetName, prepareNetworkPoliciesRequestParameters);
    }

    /**
     * Prepares a subnet by applying network intent policies.
     *
     * @param resourceGroupName The name of the resource group.
     * @param virtualNetworkName The name of the virtual network.
     * @param subnetName The name of the subnet.
     * @param prepareNetworkPoliciesRequestParameters Details of PrepareNetworkPolicies for Subnet.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> beginPrepareNetworkPoliciesWithoutPollingWithResponse(
        String resourceGroupName,
        String virtualNetworkName,
        String subnetName,
        PrepareNetworkPoliciesRequest prepareNetworkPoliciesRequestParameters,
        Context context) {
        return this
            .serviceClient
            .beginPrepareNetworkPoliciesWithoutPollingWithResponseAsync(
                resourceGroupName, virtualNetworkName, subnetName, prepareNetworkPoliciesRequestParameters, context);
    }

    /**
     * Prepares a subnet by applying network intent policies.
     *
     * @param resourceGroupName The name of the resource group.
     * @param virtualNetworkName The name of the virtual network.
     * @param subnetName The name of the subnet.
     * @param prepareNetworkPoliciesRequestParameters Details of PrepareNetworkPolicies for Subnet.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> beginPrepareNetworkPoliciesWithoutPolling(
        String resourceGroupName,
        String virtualNetworkName,
        String subnetName,
        PrepareNetworkPoliciesRequest prepareNetworkPoliciesRequestParameters) {
        return this
            .serviceClient
            .beginPrepareNetworkPoliciesWithoutPollingAsync(
                resourceGroupName, virtualNetworkName, subnetName, prepareNetworkPoliciesRequestParameters);
    }

    /**
     * Prepares a subnet by applying network intent policies.
     *
     * @param resourceGroupName The name of the resource group.
     * @param virtualNetworkName The name of the virtual network.
     * @param subnetName The name of the subnet.
     * @param prepareNetworkPoliciesRequestParameters Details of PrepareNetworkPolicies for Subnet.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> beginPrepareNetworkPoliciesWithoutPolling(
        String resourceGroupName,
        String virtualNetworkName,
        String subnetName,
        PrepareNetworkPoliciesRequest prepareNetworkPoliciesRequestParameters,
        Context context) {
        return this
            .serviceClient
            .beginPrepareNetworkPoliciesWithoutPollingAsync(
                resourceGroupName, virtualNetworkName, subnetName, prepareNetworkPoliciesRequestParameters, context);
    }

    /**
     * Unprepares a subnet by removing network intent policies.
     *
     * @param resourceGroupName The name of the resource group.
     * @param virtualNetworkName The name of the virtual network.
     * @param subnetName The name of the subnet.
     * @param serviceName The name of the service for which subnet is being unprepared for.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> beginUnprepareNetworkPoliciesWithoutPollingWithResponse(
        String resourceGroupName, String virtualNetworkName, String subnetName, String serviceName) {
        return this
            .serviceClient
            .beginUnprepareNetworkPoliciesWithoutPollingWithResponseAsync(
                resourceGroupName, virtualNetworkName, subnetName, serviceName);
    }

    /**
     * Unprepares a subnet by removing network intent policies.
     *
     * @param resourceGroupName The name of the resource group.
     * @param virtualNetworkName The name of the virtual network.
     * @param subnetName The name of the subnet.
     * @param serviceName The name of the service for which subnet is being unprepared for.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> beginUnprepareNetworkPoliciesWithoutPollingWithResponse(
        String resourceGroupName, String virtualNetworkName, String subnetName, String serviceName, Context context) {
        return this
            .serviceClient
            .beginUnprepareNetworkPoliciesWithoutPollingWithResponseAsync(
                resourceGroupName, virtualNetworkName, subnetName, serviceName, context);
    }

    /**
     * Unprepares a subnet by removing network intent policies.
     *
     * @param resourceGroupName The name of the resource group.
     * @param virtualNetworkName The name of the virtual network.
     * @param subnetName The name of the subnet.
     * @param serviceName The name of the service for which subnet is being unprepared for.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> beginUnprepareNetworkPoliciesWithoutPolling(
        String resourceGroupName, String virtualNetworkName, String subnetName, String serviceName) {
        return this
            .serviceClient
            .beginUnprepareNetworkPoliciesWithoutPollingAsync(
                resourceGroupName, virtualNetworkName, subnetName, serviceName);
    }

    /**
     * Unprepares a subnet by removing network intent policies.
     *
     * @param resourceGroupName The name of the resource group.
     * @param virtualNetworkName The name of the virtual network.
     * @param subnetName The name of the subnet.
     * @param serviceName The name of the service for which subnet is being unprepared for.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> beginUnprepareNetworkPoliciesWithoutPolling(
        String resourceGroupName, String virtualNetworkName, String subnetName, String serviceName, Context context) {
        return this
            .serviceClient
            .beginUnprepareNetworkPoliciesWithoutPollingAsync(
                resourceGroupName, virtualNetworkName, subnetName, serviceName, context);
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for ListSubnets API service callRetrieves all subnet that belongs to a virtual network.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public Mono<PagedResponse<Subnet>> listNextSinglePage(String nextLink) {
        return this.serviceClient.listNextSinglePageAsync(nextLink);
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink null
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for ListSubnets API service callRetrieves all subnet that belongs to a virtual network.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public Mono<PagedResponse<Subnet>> listNextSinglePage(String nextLink, Context context) {
        return this.serviceClient.listNextSinglePageAsync(nextLink, context);
    }
}
