// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.management.vanilla.resources;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.management.vanilla.resources.implementation.DeploymentOperationsImpl;
import com.azure.management.vanilla.resources.models.DeploymentOperation;

/** Initializes a new instance of the synchronous ResourceManagementClient type. */
@ServiceClient(builder = ResourceManagementClientBuilder.class)
public final class DeploymentOperationsClient {
    private DeploymentOperationsImpl serviceClient;

    /** Initializes an instance of DeploymentOperations client. */
    DeploymentOperationsClient(DeploymentOperationsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Gets a deployments operation.
     *
     * @param scope The scope of a deployment.
     * @param deploymentName The name of the deployment.
     * @param operationId The ID of the operation to get.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a deployments operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DeploymentOperation getAtScope(String scope, String deploymentName, String operationId) {
        return this.serviceClient.getAtScope(scope, deploymentName, operationId);
    }

    /**
     * Gets a deployments operation.
     *
     * @param scope The scope of a deployment.
     * @param deploymentName The name of the deployment.
     * @param operationId The ID of the operation to get.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a deployments operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DeploymentOperation getAtScope(String scope, String deploymentName, String operationId, Context context) {
        return this.serviceClient.getAtScope(scope, deploymentName, operationId, context);
    }

    /**
     * Gets all deployments operations for a deployment.
     *
     * @param scope The scope of a deployment.
     * @param deploymentName The name of the deployment.
     * @param top The number of results to return.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all deployments operations for a deployment.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DeploymentOperation> listAtScope(String scope, String deploymentName, Integer top) {
        return this.serviceClient.listAtScope(scope, deploymentName, top);
    }

    /**
     * Gets all deployments operations for a deployment.
     *
     * @param scope The scope of a deployment.
     * @param deploymentName The name of the deployment.
     * @param top The number of results to return.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all deployments operations for a deployment.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DeploymentOperation> listAtScope(
        String scope, String deploymentName, Integer top, Context context) {
        return this.serviceClient.listAtScope(scope, deploymentName, top, context);
    }

    /**
     * Gets all deployments operations for a deployment.
     *
     * @param scope The scope of a deployment.
     * @param deploymentName The name of the deployment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all deployments operations for a deployment.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DeploymentOperation> listAtScope(String scope, String deploymentName) {
        return this.serviceClient.listAtScope(scope, deploymentName);
    }

    /**
     * Gets a deployments operation.
     *
     * @param deploymentName The name of the deployment.
     * @param operationId The ID of the operation to get.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a deployments operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DeploymentOperation getAtTenantScope(String deploymentName, String operationId) {
        return this.serviceClient.getAtTenantScope(deploymentName, operationId);
    }

    /**
     * Gets a deployments operation.
     *
     * @param deploymentName The name of the deployment.
     * @param operationId The ID of the operation to get.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a deployments operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DeploymentOperation getAtTenantScope(String deploymentName, String operationId, Context context) {
        return this.serviceClient.getAtTenantScope(deploymentName, operationId, context);
    }

    /**
     * Gets all deployments operations for a deployment.
     *
     * @param deploymentName The name of the deployment.
     * @param top The number of results to return.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all deployments operations for a deployment.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DeploymentOperation> listAtTenantScope(String deploymentName, Integer top) {
        return this.serviceClient.listAtTenantScope(deploymentName, top);
    }

    /**
     * Gets all deployments operations for a deployment.
     *
     * @param deploymentName The name of the deployment.
     * @param top The number of results to return.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all deployments operations for a deployment.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DeploymentOperation> listAtTenantScope(String deploymentName, Integer top, Context context) {
        return this.serviceClient.listAtTenantScope(deploymentName, top, context);
    }

    /**
     * Gets all deployments operations for a deployment.
     *
     * @param deploymentName The name of the deployment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all deployments operations for a deployment.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DeploymentOperation> listAtTenantScope(String deploymentName) {
        return this.serviceClient.listAtTenantScope(deploymentName);
    }

    /**
     * Gets a deployments operation.
     *
     * @param groupId The management group ID.
     * @param deploymentName The name of the deployment.
     * @param operationId The ID of the operation to get.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a deployments operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DeploymentOperation getAtManagementGroupScope(String groupId, String deploymentName, String operationId) {
        return this.serviceClient.getAtManagementGroupScope(groupId, deploymentName, operationId);
    }

    /**
     * Gets a deployments operation.
     *
     * @param groupId The management group ID.
     * @param deploymentName The name of the deployment.
     * @param operationId The ID of the operation to get.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a deployments operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DeploymentOperation getAtManagementGroupScope(
        String groupId, String deploymentName, String operationId, Context context) {
        return this.serviceClient.getAtManagementGroupScope(groupId, deploymentName, operationId, context);
    }

    /**
     * Gets all deployments operations for a deployment.
     *
     * @param groupId The management group ID.
     * @param deploymentName The name of the deployment.
     * @param top The number of results to return.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all deployments operations for a deployment.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DeploymentOperation> listAtManagementGroupScope(
        String groupId, String deploymentName, Integer top) {
        return this.serviceClient.listAtManagementGroupScope(groupId, deploymentName, top);
    }

    /**
     * Gets all deployments operations for a deployment.
     *
     * @param groupId The management group ID.
     * @param deploymentName The name of the deployment.
     * @param top The number of results to return.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all deployments operations for a deployment.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DeploymentOperation> listAtManagementGroupScope(
        String groupId, String deploymentName, Integer top, Context context) {
        return this.serviceClient.listAtManagementGroupScope(groupId, deploymentName, top, context);
    }

    /**
     * Gets all deployments operations for a deployment.
     *
     * @param groupId The management group ID.
     * @param deploymentName The name of the deployment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all deployments operations for a deployment.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DeploymentOperation> listAtManagementGroupScope(String groupId, String deploymentName) {
        return this.serviceClient.listAtManagementGroupScope(groupId, deploymentName);
    }

    /**
     * Gets a deployments operation.
     *
     * @param deploymentName The name of the deployment.
     * @param operationId The ID of the operation to get.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a deployments operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DeploymentOperation getAtSubscriptionScope(String deploymentName, String operationId) {
        return this.serviceClient.getAtSubscriptionScope(deploymentName, operationId);
    }

    /**
     * Gets a deployments operation.
     *
     * @param deploymentName The name of the deployment.
     * @param operationId The ID of the operation to get.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a deployments operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DeploymentOperation getAtSubscriptionScope(String deploymentName, String operationId, Context context) {
        return this.serviceClient.getAtSubscriptionScope(deploymentName, operationId, context);
    }

    /**
     * Gets all deployments operations for a deployment.
     *
     * @param deploymentName The name of the deployment.
     * @param top The number of results to return.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all deployments operations for a deployment.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DeploymentOperation> listAtSubscriptionScope(String deploymentName, Integer top) {
        return this.serviceClient.listAtSubscriptionScope(deploymentName, top);
    }

    /**
     * Gets all deployments operations for a deployment.
     *
     * @param deploymentName The name of the deployment.
     * @param top The number of results to return.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all deployments operations for a deployment.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DeploymentOperation> listAtSubscriptionScope(
        String deploymentName, Integer top, Context context) {
        return this.serviceClient.listAtSubscriptionScope(deploymentName, top, context);
    }

    /**
     * Gets all deployments operations for a deployment.
     *
     * @param deploymentName The name of the deployment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all deployments operations for a deployment.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DeploymentOperation> listAtSubscriptionScope(String deploymentName) {
        return this.serviceClient.listAtSubscriptionScope(deploymentName);
    }

    /**
     * Gets a deployments operation.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param deploymentName The name of the deployment.
     * @param operationId The ID of the operation to get.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a deployments operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DeploymentOperation get(String resourceGroupName, String deploymentName, String operationId) {
        return this.serviceClient.get(resourceGroupName, deploymentName, operationId);
    }

    /**
     * Gets a deployments operation.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param deploymentName The name of the deployment.
     * @param operationId The ID of the operation to get.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a deployments operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DeploymentOperation get(
        String resourceGroupName, String deploymentName, String operationId, Context context) {
        return this.serviceClient.get(resourceGroupName, deploymentName, operationId, context);
    }

    /**
     * Gets all deployments operations for a deployment.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param deploymentName The name of the deployment.
     * @param top The number of results to return.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all deployments operations for a deployment.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DeploymentOperation> listByResourceGroup(
        String resourceGroupName, String deploymentName, Integer top) {
        return this.serviceClient.listByResourceGroup(resourceGroupName, deploymentName, top);
    }

    /**
     * Gets all deployments operations for a deployment.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param deploymentName The name of the deployment.
     * @param top The number of results to return.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all deployments operations for a deployment.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DeploymentOperation> listByResourceGroup(
        String resourceGroupName, String deploymentName, Integer top, Context context) {
        return this.serviceClient.listByResourceGroup(resourceGroupName, deploymentName, top, context);
    }

    /**
     * Gets all deployments operations for a deployment.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param deploymentName The name of the deployment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all deployments operations for a deployment.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DeploymentOperation> listByResourceGroup(String resourceGroupName, String deploymentName) {
        return this.serviceClient.listByResourceGroup(resourceGroupName, deploymentName);
    }
}
