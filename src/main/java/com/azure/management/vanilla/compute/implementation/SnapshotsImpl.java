// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.management.vanilla.compute.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.core.util.polling.AsyncPollResponse;
import com.azure.core.util.polling.PollerFlux;
import com.azure.management.resources.fluentcore.collection.InnerSupportsDelete;
import com.azure.management.resources.fluentcore.collection.InnerSupportsGet;
import com.azure.management.resources.fluentcore.collection.InnerSupportsListing;
import com.azure.management.vanilla.compute.models.AccessUri;
import com.azure.management.vanilla.compute.models.GrantAccessData;
import com.azure.management.vanilla.compute.models.Snapshot;
import com.azure.management.vanilla.compute.models.SnapshotList;
import com.azure.management.vanilla.compute.models.SnapshotUpdate;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in Snapshots. */
public final class SnapshotsImpl
    implements InnerSupportsGet<Snapshot>, InnerSupportsListing<Snapshot>, InnerSupportsDelete<Void> {
    private final ClientLogger logger = new ClientLogger(SnapshotsImpl.class);

    /** The proxy service used to perform REST calls. */
    private final SnapshotsService service;

    /** The service client containing this operation class. */
    private final ComputeManagementClientImpl client;

    /**
     * Initializes an instance of SnapshotsImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    SnapshotsImpl(ComputeManagementClientImpl client) {
        this.service =
            RestProxy.create(SnapshotsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for ComputeManagementClientSnapshots to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "ComputeManagementCli")
    private interface SnapshotsService {
        @Headers({"Accept: application/json", "Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/snapshots"
                + "/{snapshotName}")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createOrUpdate(
            @HostParam("$host") String host,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("snapshotName") String snapshotName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") Snapshot snapshot,
            Context context);

        @Headers({"Accept: application/json", "Content-Type: application/json"})
        @Patch(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/snapshots"
                + "/{snapshotName}")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> update(
            @HostParam("$host") String host,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("snapshotName") String snapshotName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") SnapshotUpdate snapshot,
            Context context);

        @Headers({"Accept: application/json", "Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/snapshots"
                + "/{snapshotName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Snapshot>> getByResourceGroup(
            @HostParam("$host") String host,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("snapshotName") String snapshotName,
            @QueryParam("api-version") String apiVersion,
            Context context);

        @Headers({"Accept: application/json;q=0.9", "Content-Type: application/json"})
        @Delete(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/snapshots"
                + "/{snapshotName}")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(
            @HostParam("$host") String host,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("snapshotName") String snapshotName,
            @QueryParam("api-version") String apiVersion,
            Context context);

        @Headers({"Accept: application/json", "Content-Type: application/json"})
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/snapshots")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SnapshotList>> listByResourceGroup(
            @HostParam("$host") String host,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @QueryParam("api-version") String apiVersion,
            Context context);

        @Headers({"Accept: application/json", "Content-Type: application/json"})
        @Get("/subscriptions/{subscriptionId}/providers/Microsoft.Compute/snapshots")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SnapshotList>> list(
            @HostParam("$host") String host,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            Context context);

        @Headers({"Accept: application/json", "Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/snapshots"
                + "/{snapshotName}/beginGetAccess")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> grantAccess(
            @HostParam("$host") String host,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("snapshotName") String snapshotName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") GrantAccessData grantAccessData,
            Context context);

        @Headers({"Accept: application/json;q=0.9", "Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/snapshots"
                + "/{snapshotName}/endGetAccess")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> revokeAccess(
            @HostParam("$host") String host,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("snapshotName") String snapshotName,
            @QueryParam("api-version") String apiVersion,
            Context context);

        @Headers({"Accept: application/json", "Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/snapshots"
                + "/{snapshotName}")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Snapshot>> beginCreateOrUpdateWithoutPolling(
            @HostParam("$host") String host,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("snapshotName") String snapshotName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") Snapshot snapshot,
            Context context);

        @Headers({"Accept: application/json", "Content-Type: application/json"})
        @Patch(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/snapshots"
                + "/{snapshotName}")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Snapshot>> beginUpdateWithoutPolling(
            @HostParam("$host") String host,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("snapshotName") String snapshotName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") SnapshotUpdate snapshot,
            Context context);

        @Headers({"Accept: application/json;q=0.9", "Content-Type: application/json"})
        @Delete(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/snapshots"
                + "/{snapshotName}")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Void>> beginDeleteWithoutPolling(
            @HostParam("$host") String host,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("snapshotName") String snapshotName,
            @QueryParam("api-version") String apiVersion,
            Context context);

        @Headers({"Accept: application/json", "Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/snapshots"
                + "/{snapshotName}/beginGetAccess")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<AccessUri>> beginGrantAccessWithoutPolling(
            @HostParam("$host") String host,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("snapshotName") String snapshotName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") GrantAccessData grantAccessData,
            Context context);

        @Headers({"Accept: application/json;q=0.9", "Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/snapshots"
                + "/{snapshotName}/endGetAccess")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Void>> beginRevokeAccessWithoutPolling(
            @HostParam("$host") String host,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("snapshotName") String snapshotName,
            @QueryParam("api-version") String apiVersion,
            Context context);

        @Headers({"Accept: application/json", "Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SnapshotList>> listByResourceGroupNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, Context context);

        @Headers({"Accept: application/json", "Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SnapshotList>> listNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, Context context);
    }

    /**
     * Creates or updates a snapshot.
     *
     * @param resourceGroupName The name of the resource group.
     * @param snapshotName The name of the snapshot that is being created. The name can't be changed after the snapshot
     *     is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @param snapshot Snapshot resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return snapshot resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(
        String resourceGroupName, String snapshotName, Snapshot snapshot) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (snapshotName == null) {
            return Mono.error(new IllegalArgumentException("Parameter snapshotName is required and cannot be null."));
        }
        if (snapshot == null) {
            return Mono.error(new IllegalArgumentException("Parameter snapshot is required and cannot be null."));
        } else {
            snapshot.validate();
        }
        final String apiVersion = "2019-11-01";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .createOrUpdate(
                            this.client.getHost(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            snapshotName,
                            apiVersion,
                            snapshot,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Creates or updates a snapshot.
     *
     * @param resourceGroupName The name of the resource group.
     * @param snapshotName The name of the snapshot that is being created. The name can't be changed after the snapshot
     *     is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @param snapshot Snapshot resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return snapshot resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(
        String resourceGroupName, String snapshotName, Snapshot snapshot, Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (snapshotName == null) {
            return Mono.error(new IllegalArgumentException("Parameter snapshotName is required and cannot be null."));
        }
        if (snapshot == null) {
            return Mono.error(new IllegalArgumentException("Parameter snapshot is required and cannot be null."));
        } else {
            snapshot.validate();
        }
        final String apiVersion = "2019-11-01";
        return service
            .createOrUpdate(
                this.client.getHost(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                snapshotName,
                apiVersion,
                snapshot,
                context);
    }

    /**
     * Creates or updates a snapshot.
     *
     * @param resourceGroupName The name of the resource group.
     * @param snapshotName The name of the snapshot that is being created. The name can't be changed after the snapshot
     *     is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @param snapshot Snapshot resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return snapshot resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PollerFlux<PollResult<Snapshot>, Snapshot> beginCreateOrUpdate(
        String resourceGroupName, String snapshotName, Snapshot snapshot) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            createOrUpdateWithResponseAsync(resourceGroupName, snapshotName, snapshot);
        return this
            .client
            .<Snapshot, Snapshot>getLroResultAsync(mono, this.client.getHttpPipeline(), Snapshot.class, Snapshot.class);
    }

    /**
     * Creates or updates a snapshot.
     *
     * @param resourceGroupName The name of the resource group.
     * @param snapshotName The name of the snapshot that is being created. The name can't be changed after the snapshot
     *     is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @param snapshot Snapshot resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return snapshot resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PollerFlux<PollResult<Snapshot>, Snapshot> beginCreateOrUpdate(
        String resourceGroupName, String snapshotName, Snapshot snapshot, Context context) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            createOrUpdateWithResponseAsync(resourceGroupName, snapshotName, snapshot, context);
        return this
            .client
            .<Snapshot, Snapshot>getLroResultAsync(mono, this.client.getHttpPipeline(), Snapshot.class, Snapshot.class);
    }

    /**
     * Creates or updates a snapshot.
     *
     * @param resourceGroupName The name of the resource group.
     * @param snapshotName The name of the snapshot that is being created. The name can't be changed after the snapshot
     *     is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @param snapshot Snapshot resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return snapshot resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Snapshot> createOrUpdateAsync(String resourceGroupName, String snapshotName, Snapshot snapshot) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            createOrUpdateWithResponseAsync(resourceGroupName, snapshotName, snapshot);
        return this
            .client
            .<Snapshot, Snapshot>getLroResultAsync(mono, this.client.getHttpPipeline(), Snapshot.class, Snapshot.class)
            .last()
            .flatMap(AsyncPollResponse::getFinalResult);
    }

    /**
     * Creates or updates a snapshot.
     *
     * @param resourceGroupName The name of the resource group.
     * @param snapshotName The name of the snapshot that is being created. The name can't be changed after the snapshot
     *     is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @param snapshot Snapshot resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return snapshot resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Snapshot> createOrUpdateAsync(
        String resourceGroupName, String snapshotName, Snapshot snapshot, Context context) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            createOrUpdateWithResponseAsync(resourceGroupName, snapshotName, snapshot, context);
        return this
            .client
            .<Snapshot, Snapshot>getLroResultAsync(mono, this.client.getHttpPipeline(), Snapshot.class, Snapshot.class)
            .last()
            .flatMap(AsyncPollResponse::getFinalResult);
    }

    /**
     * Creates or updates a snapshot.
     *
     * @param resourceGroupName The name of the resource group.
     * @param snapshotName The name of the snapshot that is being created. The name can't be changed after the snapshot
     *     is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @param snapshot Snapshot resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return snapshot resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Snapshot createOrUpdate(String resourceGroupName, String snapshotName, Snapshot snapshot) {
        return createOrUpdateAsync(resourceGroupName, snapshotName, snapshot).block();
    }

    /**
     * Creates or updates a snapshot.
     *
     * @param resourceGroupName The name of the resource group.
     * @param snapshotName The name of the snapshot that is being created. The name can't be changed after the snapshot
     *     is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @param snapshot Snapshot resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return snapshot resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Snapshot createOrUpdate(String resourceGroupName, String snapshotName, Snapshot snapshot, Context context) {
        return createOrUpdateAsync(resourceGroupName, snapshotName, snapshot, context).block();
    }

    /**
     * Updates (patches) a snapshot.
     *
     * @param resourceGroupName The name of the resource group.
     * @param snapshotName The name of the snapshot that is being created. The name can't be changed after the snapshot
     *     is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @param snapshot Snapshot update resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return snapshot resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(
        String resourceGroupName, String snapshotName, SnapshotUpdate snapshot) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (snapshotName == null) {
            return Mono.error(new IllegalArgumentException("Parameter snapshotName is required and cannot be null."));
        }
        if (snapshot == null) {
            return Mono.error(new IllegalArgumentException("Parameter snapshot is required and cannot be null."));
        } else {
            snapshot.validate();
        }
        final String apiVersion = "2019-11-01";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .update(
                            this.client.getHost(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            snapshotName,
                            apiVersion,
                            snapshot,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Updates (patches) a snapshot.
     *
     * @param resourceGroupName The name of the resource group.
     * @param snapshotName The name of the snapshot that is being created. The name can't be changed after the snapshot
     *     is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @param snapshot Snapshot update resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return snapshot resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(
        String resourceGroupName, String snapshotName, SnapshotUpdate snapshot, Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (snapshotName == null) {
            return Mono.error(new IllegalArgumentException("Parameter snapshotName is required and cannot be null."));
        }
        if (snapshot == null) {
            return Mono.error(new IllegalArgumentException("Parameter snapshot is required and cannot be null."));
        } else {
            snapshot.validate();
        }
        final String apiVersion = "2019-11-01";
        return service
            .update(
                this.client.getHost(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                snapshotName,
                apiVersion,
                snapshot,
                context);
    }

    /**
     * Updates (patches) a snapshot.
     *
     * @param resourceGroupName The name of the resource group.
     * @param snapshotName The name of the snapshot that is being created. The name can't be changed after the snapshot
     *     is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @param snapshot Snapshot update resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return snapshot resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PollerFlux<PollResult<Snapshot>, Snapshot> beginUpdate(
        String resourceGroupName, String snapshotName, SnapshotUpdate snapshot) {
        Mono<Response<Flux<ByteBuffer>>> mono = updateWithResponseAsync(resourceGroupName, snapshotName, snapshot);
        return this
            .client
            .<Snapshot, Snapshot>getLroResultAsync(mono, this.client.getHttpPipeline(), Snapshot.class, Snapshot.class);
    }

    /**
     * Updates (patches) a snapshot.
     *
     * @param resourceGroupName The name of the resource group.
     * @param snapshotName The name of the snapshot that is being created. The name can't be changed after the snapshot
     *     is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @param snapshot Snapshot update resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return snapshot resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PollerFlux<PollResult<Snapshot>, Snapshot> beginUpdate(
        String resourceGroupName, String snapshotName, SnapshotUpdate snapshot, Context context) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            updateWithResponseAsync(resourceGroupName, snapshotName, snapshot, context);
        return this
            .client
            .<Snapshot, Snapshot>getLroResultAsync(mono, this.client.getHttpPipeline(), Snapshot.class, Snapshot.class);
    }

    /**
     * Updates (patches) a snapshot.
     *
     * @param resourceGroupName The name of the resource group.
     * @param snapshotName The name of the snapshot that is being created. The name can't be changed after the snapshot
     *     is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @param snapshot Snapshot update resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return snapshot resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Snapshot> updateAsync(String resourceGroupName, String snapshotName, SnapshotUpdate snapshot) {
        Mono<Response<Flux<ByteBuffer>>> mono = updateWithResponseAsync(resourceGroupName, snapshotName, snapshot);
        return this
            .client
            .<Snapshot, Snapshot>getLroResultAsync(mono, this.client.getHttpPipeline(), Snapshot.class, Snapshot.class)
            .last()
            .flatMap(AsyncPollResponse::getFinalResult);
    }

    /**
     * Updates (patches) a snapshot.
     *
     * @param resourceGroupName The name of the resource group.
     * @param snapshotName The name of the snapshot that is being created. The name can't be changed after the snapshot
     *     is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @param snapshot Snapshot update resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return snapshot resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Snapshot> updateAsync(
        String resourceGroupName, String snapshotName, SnapshotUpdate snapshot, Context context) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            updateWithResponseAsync(resourceGroupName, snapshotName, snapshot, context);
        return this
            .client
            .<Snapshot, Snapshot>getLroResultAsync(mono, this.client.getHttpPipeline(), Snapshot.class, Snapshot.class)
            .last()
            .flatMap(AsyncPollResponse::getFinalResult);
    }

    /**
     * Updates (patches) a snapshot.
     *
     * @param resourceGroupName The name of the resource group.
     * @param snapshotName The name of the snapshot that is being created. The name can't be changed after the snapshot
     *     is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @param snapshot Snapshot update resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return snapshot resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Snapshot update(String resourceGroupName, String snapshotName, SnapshotUpdate snapshot) {
        return updateAsync(resourceGroupName, snapshotName, snapshot).block();
    }

    /**
     * Updates (patches) a snapshot.
     *
     * @param resourceGroupName The name of the resource group.
     * @param snapshotName The name of the snapshot that is being created. The name can't be changed after the snapshot
     *     is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @param snapshot Snapshot update resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return snapshot resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Snapshot update(String resourceGroupName, String snapshotName, SnapshotUpdate snapshot, Context context) {
        return updateAsync(resourceGroupName, snapshotName, snapshot, context).block();
    }

    /**
     * Gets information about a snapshot.
     *
     * @param resourceGroupName The name of the resource group.
     * @param snapshotName The name of the snapshot that is being created. The name can't be changed after the snapshot
     *     is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about a snapshot.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Snapshot>> getByResourceGroupWithResponseAsync(String resourceGroupName, String snapshotName) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (snapshotName == null) {
            return Mono.error(new IllegalArgumentException("Parameter snapshotName is required and cannot be null."));
        }
        final String apiVersion = "2019-11-01";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getByResourceGroup(
                            this.client.getHost(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            snapshotName,
                            apiVersion,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Gets information about a snapshot.
     *
     * @param resourceGroupName The name of the resource group.
     * @param snapshotName The name of the snapshot that is being created. The name can't be changed after the snapshot
     *     is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about a snapshot.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Snapshot>> getByResourceGroupWithResponseAsync(
        String resourceGroupName, String snapshotName, Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (snapshotName == null) {
            return Mono.error(new IllegalArgumentException("Parameter snapshotName is required and cannot be null."));
        }
        final String apiVersion = "2019-11-01";
        return service
            .getByResourceGroup(
                this.client.getHost(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                snapshotName,
                apiVersion,
                context);
    }

    /**
     * Gets information about a snapshot.
     *
     * @param resourceGroupName The name of the resource group.
     * @param snapshotName The name of the snapshot that is being created. The name can't be changed after the snapshot
     *     is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about a snapshot.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Snapshot> getByResourceGroupAsync(String resourceGroupName, String snapshotName) {
        return getByResourceGroupWithResponseAsync(resourceGroupName, snapshotName)
            .flatMap(
                (Response<Snapshot> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Gets information about a snapshot.
     *
     * @param resourceGroupName The name of the resource group.
     * @param snapshotName The name of the snapshot that is being created. The name can't be changed after the snapshot
     *     is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about a snapshot.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Snapshot> getByResourceGroupAsync(String resourceGroupName, String snapshotName, Context context) {
        return getByResourceGroupWithResponseAsync(resourceGroupName, snapshotName, context)
            .flatMap(
                (Response<Snapshot> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Gets information about a snapshot.
     *
     * @param resourceGroupName The name of the resource group.
     * @param snapshotName The name of the snapshot that is being created. The name can't be changed after the snapshot
     *     is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about a snapshot.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Snapshot getByResourceGroup(String resourceGroupName, String snapshotName) {
        return getByResourceGroupAsync(resourceGroupName, snapshotName).block();
    }

    /**
     * Gets information about a snapshot.
     *
     * @param resourceGroupName The name of the resource group.
     * @param snapshotName The name of the snapshot that is being created. The name can't be changed after the snapshot
     *     is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about a snapshot.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Snapshot getByResourceGroup(String resourceGroupName, String snapshotName, Context context) {
        return getByResourceGroupAsync(resourceGroupName, snapshotName, context).block();
    }

    /**
     * Deletes a snapshot.
     *
     * @param resourceGroupName The name of the resource group.
     * @param snapshotName The name of the snapshot that is being created. The name can't be changed after the snapshot
     *     is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceGroupName, String snapshotName) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (snapshotName == null) {
            return Mono.error(new IllegalArgumentException("Parameter snapshotName is required and cannot be null."));
        }
        final String apiVersion = "2019-11-01";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .delete(
                            this.client.getHost(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            snapshotName,
                            apiVersion,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Deletes a snapshot.
     *
     * @param resourceGroupName The name of the resource group.
     * @param snapshotName The name of the snapshot that is being created. The name can't be changed after the snapshot
     *     is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(
        String resourceGroupName, String snapshotName, Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (snapshotName == null) {
            return Mono.error(new IllegalArgumentException("Parameter snapshotName is required and cannot be null."));
        }
        final String apiVersion = "2019-11-01";
        return service
            .delete(
                this.client.getHost(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                snapshotName,
                apiVersion,
                context);
    }

    /**
     * Deletes a snapshot.
     *
     * @param resourceGroupName The name of the resource group.
     * @param snapshotName The name of the snapshot that is being created. The name can't be changed after the snapshot
     *     is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PollerFlux<PollResult<Void>, Void> beginDelete(String resourceGroupName, String snapshotName) {
        Mono<Response<Flux<ByteBuffer>>> mono = deleteWithResponseAsync(resourceGroupName, snapshotName);
        return this.client.<Void, Void>getLroResultAsync(mono, this.client.getHttpPipeline(), Void.class, Void.class);
    }

    /**
     * Deletes a snapshot.
     *
     * @param resourceGroupName The name of the resource group.
     * @param snapshotName The name of the snapshot that is being created. The name can't be changed after the snapshot
     *     is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PollerFlux<PollResult<Void>, Void> beginDelete(
        String resourceGroupName, String snapshotName, Context context) {
        Mono<Response<Flux<ByteBuffer>>> mono = deleteWithResponseAsync(resourceGroupName, snapshotName, context);
        return this.client.<Void, Void>getLroResultAsync(mono, this.client.getHttpPipeline(), Void.class, Void.class);
    }

    /**
     * Deletes a snapshot.
     *
     * @param resourceGroupName The name of the resource group.
     * @param snapshotName The name of the snapshot that is being created. The name can't be changed after the snapshot
     *     is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteAsync(String resourceGroupName, String snapshotName) {
        Mono<Response<Flux<ByteBuffer>>> mono = deleteWithResponseAsync(resourceGroupName, snapshotName);
        return this
            .client
            .<Void, Void>getLroResultAsync(mono, this.client.getHttpPipeline(), Void.class, Void.class)
            .last()
            .flatMap(AsyncPollResponse::getFinalResult);
    }

    /**
     * Deletes a snapshot.
     *
     * @param resourceGroupName The name of the resource group.
     * @param snapshotName The name of the snapshot that is being created. The name can't be changed after the snapshot
     *     is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteAsync(String resourceGroupName, String snapshotName, Context context) {
        Mono<Response<Flux<ByteBuffer>>> mono = deleteWithResponseAsync(resourceGroupName, snapshotName, context);
        return this
            .client
            .<Void, Void>getLroResultAsync(mono, this.client.getHttpPipeline(), Void.class, Void.class)
            .last()
            .flatMap(AsyncPollResponse::getFinalResult);
    }

    /**
     * Deletes a snapshot.
     *
     * @param resourceGroupName The name of the resource group.
     * @param snapshotName The name of the snapshot that is being created. The name can't be changed after the snapshot
     *     is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String snapshotName) {
        deleteAsync(resourceGroupName, snapshotName).block();
    }

    /**
     * Deletes a snapshot.
     *
     * @param resourceGroupName The name of the resource group.
     * @param snapshotName The name of the snapshot that is being created. The name can't be changed after the snapshot
     *     is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String snapshotName, Context context) {
        deleteAsync(resourceGroupName, snapshotName, context).block();
    }

    /**
     * Lists snapshots under a resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List Snapshots operation response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<Snapshot>> listByResourceGroupSinglePageAsync(String resourceGroupName) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        final String apiVersion = "2019-11-01";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listByResourceGroup(
                            this.client.getHost(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            apiVersion,
                            context))
            .<PagedResponse<Snapshot>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().getValue(),
                        res.getValue().getNextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Lists snapshots under a resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List Snapshots operation response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<Snapshot>> listByResourceGroupSinglePageAsync(String resourceGroupName, Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        final String apiVersion = "2019-11-01";
        return service
            .listByResourceGroup(
                this.client.getHost(), this.client.getSubscriptionId(), resourceGroupName, apiVersion, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().getValue(),
                        res.getValue().getNextLink(),
                        null));
    }

    /**
     * Lists snapshots under a resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List Snapshots operation response.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<Snapshot> listByResourceGroupAsync(String resourceGroupName) {
        return new PagedFlux<>(
            () -> listByResourceGroupSinglePageAsync(resourceGroupName),
            nextLink -> listByResourceGroupNextSinglePageAsync(nextLink));
    }

    /**
     * Lists snapshots under a resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List Snapshots operation response.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<Snapshot> listByResourceGroupAsync(String resourceGroupName, Context context) {
        return new PagedFlux<>(
            () -> listByResourceGroupSinglePageAsync(resourceGroupName, context),
            nextLink -> listByResourceGroupNextSinglePageAsync(nextLink));
    }

    /**
     * Lists snapshots under a resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List Snapshots operation response.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<Snapshot> listByResourceGroup(String resourceGroupName) {
        return new PagedIterable<>(listByResourceGroupAsync(resourceGroupName));
    }

    /**
     * Lists snapshots under a resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List Snapshots operation response.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<Snapshot> listByResourceGroup(String resourceGroupName, Context context) {
        return new PagedIterable<>(listByResourceGroupAsync(resourceGroupName, context));
    }

    /**
     * Lists snapshots under a subscription.
     *
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List Snapshots operation response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<Snapshot>> listSinglePageAsync() {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2019-11-01";
        return FluxUtil
            .withContext(
                context -> service.list(this.client.getHost(), this.client.getSubscriptionId(), apiVersion, context))
            .<PagedResponse<Snapshot>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().getValue(),
                        res.getValue().getNextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Lists snapshots under a subscription.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List Snapshots operation response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<Snapshot>> listSinglePageAsync(Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2019-11-01";
        return service
            .list(this.client.getHost(), this.client.getSubscriptionId(), apiVersion, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().getValue(),
                        res.getValue().getNextLink(),
                        null));
    }

    /**
     * Lists snapshots under a subscription.
     *
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List Snapshots operation response.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<Snapshot> listAsync() {
        return new PagedFlux<>(() -> listSinglePageAsync(), nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * Lists snapshots under a subscription.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List Snapshots operation response.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<Snapshot> listAsync(Context context) {
        return new PagedFlux<>(() -> listSinglePageAsync(context), nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * Lists snapshots under a subscription.
     *
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List Snapshots operation response.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<Snapshot> list() {
        return new PagedIterable<>(listAsync());
    }

    /**
     * Lists snapshots under a subscription.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List Snapshots operation response.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<Snapshot> list(Context context) {
        return new PagedIterable<>(listAsync(context));
    }

    /**
     * Grants access to a snapshot.
     *
     * @param resourceGroupName The name of the resource group.
     * @param snapshotName The name of the snapshot that is being created. The name can't be changed after the snapshot
     *     is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @param grantAccessData Data used for requesting a SAS.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a disk access SAS uri.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Flux<ByteBuffer>>> grantAccessWithResponseAsync(
        String resourceGroupName, String snapshotName, GrantAccessData grantAccessData) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (snapshotName == null) {
            return Mono.error(new IllegalArgumentException("Parameter snapshotName is required and cannot be null."));
        }
        if (grantAccessData == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter grantAccessData is required and cannot be null."));
        } else {
            grantAccessData.validate();
        }
        final String apiVersion = "2019-11-01";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .grantAccess(
                            this.client.getHost(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            snapshotName,
                            apiVersion,
                            grantAccessData,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Grants access to a snapshot.
     *
     * @param resourceGroupName The name of the resource group.
     * @param snapshotName The name of the snapshot that is being created. The name can't be changed after the snapshot
     *     is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @param grantAccessData Data used for requesting a SAS.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a disk access SAS uri.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Flux<ByteBuffer>>> grantAccessWithResponseAsync(
        String resourceGroupName, String snapshotName, GrantAccessData grantAccessData, Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (snapshotName == null) {
            return Mono.error(new IllegalArgumentException("Parameter snapshotName is required and cannot be null."));
        }
        if (grantAccessData == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter grantAccessData is required and cannot be null."));
        } else {
            grantAccessData.validate();
        }
        final String apiVersion = "2019-11-01";
        return service
            .grantAccess(
                this.client.getHost(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                snapshotName,
                apiVersion,
                grantAccessData,
                context);
    }

    /**
     * Grants access to a snapshot.
     *
     * @param resourceGroupName The name of the resource group.
     * @param snapshotName The name of the snapshot that is being created. The name can't be changed after the snapshot
     *     is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @param grantAccessData Data used for requesting a SAS.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a disk access SAS uri.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PollerFlux<PollResult<AccessUri>, AccessUri> beginGrantAccess(
        String resourceGroupName, String snapshotName, GrantAccessData grantAccessData) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            grantAccessWithResponseAsync(resourceGroupName, snapshotName, grantAccessData);
        return this
            .client
            .<AccessUri, AccessUri>getLroResultAsync(
                mono, this.client.getHttpPipeline(), AccessUri.class, AccessUri.class);
    }

    /**
     * Grants access to a snapshot.
     *
     * @param resourceGroupName The name of the resource group.
     * @param snapshotName The name of the snapshot that is being created. The name can't be changed after the snapshot
     *     is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @param grantAccessData Data used for requesting a SAS.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a disk access SAS uri.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PollerFlux<PollResult<AccessUri>, AccessUri> beginGrantAccess(
        String resourceGroupName, String snapshotName, GrantAccessData grantAccessData, Context context) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            grantAccessWithResponseAsync(resourceGroupName, snapshotName, grantAccessData, context);
        return this
            .client
            .<AccessUri, AccessUri>getLroResultAsync(
                mono, this.client.getHttpPipeline(), AccessUri.class, AccessUri.class);
    }

    /**
     * Grants access to a snapshot.
     *
     * @param resourceGroupName The name of the resource group.
     * @param snapshotName The name of the snapshot that is being created. The name can't be changed after the snapshot
     *     is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @param grantAccessData Data used for requesting a SAS.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a disk access SAS uri.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AccessUri> grantAccessAsync(
        String resourceGroupName, String snapshotName, GrantAccessData grantAccessData) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            grantAccessWithResponseAsync(resourceGroupName, snapshotName, grantAccessData);
        return this
            .client
            .<AccessUri, AccessUri>getLroResultAsync(
                mono, this.client.getHttpPipeline(), AccessUri.class, AccessUri.class)
            .last()
            .flatMap(AsyncPollResponse::getFinalResult);
    }

    /**
     * Grants access to a snapshot.
     *
     * @param resourceGroupName The name of the resource group.
     * @param snapshotName The name of the snapshot that is being created. The name can't be changed after the snapshot
     *     is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @param grantAccessData Data used for requesting a SAS.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a disk access SAS uri.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AccessUri> grantAccessAsync(
        String resourceGroupName, String snapshotName, GrantAccessData grantAccessData, Context context) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            grantAccessWithResponseAsync(resourceGroupName, snapshotName, grantAccessData, context);
        return this
            .client
            .<AccessUri, AccessUri>getLroResultAsync(
                mono, this.client.getHttpPipeline(), AccessUri.class, AccessUri.class)
            .last()
            .flatMap(AsyncPollResponse::getFinalResult);
    }

    /**
     * Grants access to a snapshot.
     *
     * @param resourceGroupName The name of the resource group.
     * @param snapshotName The name of the snapshot that is being created. The name can't be changed after the snapshot
     *     is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @param grantAccessData Data used for requesting a SAS.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a disk access SAS uri.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AccessUri grantAccess(String resourceGroupName, String snapshotName, GrantAccessData grantAccessData) {
        return grantAccessAsync(resourceGroupName, snapshotName, grantAccessData).block();
    }

    /**
     * Grants access to a snapshot.
     *
     * @param resourceGroupName The name of the resource group.
     * @param snapshotName The name of the snapshot that is being created. The name can't be changed after the snapshot
     *     is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @param grantAccessData Data used for requesting a SAS.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a disk access SAS uri.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AccessUri grantAccess(
        String resourceGroupName, String snapshotName, GrantAccessData grantAccessData, Context context) {
        return grantAccessAsync(resourceGroupName, snapshotName, grantAccessData, context).block();
    }

    /**
     * Revokes access to a snapshot.
     *
     * @param resourceGroupName The name of the resource group.
     * @param snapshotName The name of the snapshot that is being created. The name can't be changed after the snapshot
     *     is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Flux<ByteBuffer>>> revokeAccessWithResponseAsync(
        String resourceGroupName, String snapshotName) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (snapshotName == null) {
            return Mono.error(new IllegalArgumentException("Parameter snapshotName is required and cannot be null."));
        }
        final String apiVersion = "2019-11-01";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .revokeAccess(
                            this.client.getHost(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            snapshotName,
                            apiVersion,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Revokes access to a snapshot.
     *
     * @param resourceGroupName The name of the resource group.
     * @param snapshotName The name of the snapshot that is being created. The name can't be changed after the snapshot
     *     is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Flux<ByteBuffer>>> revokeAccessWithResponseAsync(
        String resourceGroupName, String snapshotName, Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (snapshotName == null) {
            return Mono.error(new IllegalArgumentException("Parameter snapshotName is required and cannot be null."));
        }
        final String apiVersion = "2019-11-01";
        return service
            .revokeAccess(
                this.client.getHost(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                snapshotName,
                apiVersion,
                context);
    }

    /**
     * Revokes access to a snapshot.
     *
     * @param resourceGroupName The name of the resource group.
     * @param snapshotName The name of the snapshot that is being created. The name can't be changed after the snapshot
     *     is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PollerFlux<PollResult<Void>, Void> beginRevokeAccess(String resourceGroupName, String snapshotName) {
        Mono<Response<Flux<ByteBuffer>>> mono = revokeAccessWithResponseAsync(resourceGroupName, snapshotName);
        return this.client.<Void, Void>getLroResultAsync(mono, this.client.getHttpPipeline(), Void.class, Void.class);
    }

    /**
     * Revokes access to a snapshot.
     *
     * @param resourceGroupName The name of the resource group.
     * @param snapshotName The name of the snapshot that is being created. The name can't be changed after the snapshot
     *     is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PollerFlux<PollResult<Void>, Void> beginRevokeAccess(
        String resourceGroupName, String snapshotName, Context context) {
        Mono<Response<Flux<ByteBuffer>>> mono = revokeAccessWithResponseAsync(resourceGroupName, snapshotName, context);
        return this.client.<Void, Void>getLroResultAsync(mono, this.client.getHttpPipeline(), Void.class, Void.class);
    }

    /**
     * Revokes access to a snapshot.
     *
     * @param resourceGroupName The name of the resource group.
     * @param snapshotName The name of the snapshot that is being created. The name can't be changed after the snapshot
     *     is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> revokeAccessAsync(String resourceGroupName, String snapshotName) {
        Mono<Response<Flux<ByteBuffer>>> mono = revokeAccessWithResponseAsync(resourceGroupName, snapshotName);
        return this
            .client
            .<Void, Void>getLroResultAsync(mono, this.client.getHttpPipeline(), Void.class, Void.class)
            .last()
            .flatMap(AsyncPollResponse::getFinalResult);
    }

    /**
     * Revokes access to a snapshot.
     *
     * @param resourceGroupName The name of the resource group.
     * @param snapshotName The name of the snapshot that is being created. The name can't be changed after the snapshot
     *     is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> revokeAccessAsync(String resourceGroupName, String snapshotName, Context context) {
        Mono<Response<Flux<ByteBuffer>>> mono = revokeAccessWithResponseAsync(resourceGroupName, snapshotName, context);
        return this
            .client
            .<Void, Void>getLroResultAsync(mono, this.client.getHttpPipeline(), Void.class, Void.class)
            .last()
            .flatMap(AsyncPollResponse::getFinalResult);
    }

    /**
     * Revokes access to a snapshot.
     *
     * @param resourceGroupName The name of the resource group.
     * @param snapshotName The name of the snapshot that is being created. The name can't be changed after the snapshot
     *     is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void revokeAccess(String resourceGroupName, String snapshotName) {
        revokeAccessAsync(resourceGroupName, snapshotName).block();
    }

    /**
     * Revokes access to a snapshot.
     *
     * @param resourceGroupName The name of the resource group.
     * @param snapshotName The name of the snapshot that is being created. The name can't be changed after the snapshot
     *     is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void revokeAccess(String resourceGroupName, String snapshotName, Context context) {
        revokeAccessAsync(resourceGroupName, snapshotName, context).block();
    }

    /**
     * Creates or updates a snapshot.
     *
     * @param resourceGroupName The name of the resource group.
     * @param snapshotName The name of the snapshot that is being created. The name can't be changed after the snapshot
     *     is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @param snapshot Snapshot resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return snapshot resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Snapshot>> beginCreateOrUpdateWithoutPollingWithResponseAsync(
        String resourceGroupName, String snapshotName, Snapshot snapshot) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (snapshotName == null) {
            return Mono.error(new IllegalArgumentException("Parameter snapshotName is required and cannot be null."));
        }
        if (snapshot == null) {
            return Mono.error(new IllegalArgumentException("Parameter snapshot is required and cannot be null."));
        } else {
            snapshot.validate();
        }
        final String apiVersion = "2019-11-01";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .beginCreateOrUpdateWithoutPolling(
                            this.client.getHost(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            snapshotName,
                            apiVersion,
                            snapshot,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Creates or updates a snapshot.
     *
     * @param resourceGroupName The name of the resource group.
     * @param snapshotName The name of the snapshot that is being created. The name can't be changed after the snapshot
     *     is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @param snapshot Snapshot resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return snapshot resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Snapshot>> beginCreateOrUpdateWithoutPollingWithResponseAsync(
        String resourceGroupName, String snapshotName, Snapshot snapshot, Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (snapshotName == null) {
            return Mono.error(new IllegalArgumentException("Parameter snapshotName is required and cannot be null."));
        }
        if (snapshot == null) {
            return Mono.error(new IllegalArgumentException("Parameter snapshot is required and cannot be null."));
        } else {
            snapshot.validate();
        }
        final String apiVersion = "2019-11-01";
        return service
            .beginCreateOrUpdateWithoutPolling(
                this.client.getHost(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                snapshotName,
                apiVersion,
                snapshot,
                context);
    }

    /**
     * Creates or updates a snapshot.
     *
     * @param resourceGroupName The name of the resource group.
     * @param snapshotName The name of the snapshot that is being created. The name can't be changed after the snapshot
     *     is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @param snapshot Snapshot resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return snapshot resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Snapshot> beginCreateOrUpdateWithoutPollingAsync(
        String resourceGroupName, String snapshotName, Snapshot snapshot) {
        return beginCreateOrUpdateWithoutPollingWithResponseAsync(resourceGroupName, snapshotName, snapshot)
            .flatMap(
                (Response<Snapshot> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Creates or updates a snapshot.
     *
     * @param resourceGroupName The name of the resource group.
     * @param snapshotName The name of the snapshot that is being created. The name can't be changed after the snapshot
     *     is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @param snapshot Snapshot resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return snapshot resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Snapshot> beginCreateOrUpdateWithoutPollingAsync(
        String resourceGroupName, String snapshotName, Snapshot snapshot, Context context) {
        return beginCreateOrUpdateWithoutPollingWithResponseAsync(resourceGroupName, snapshotName, snapshot, context)
            .flatMap(
                (Response<Snapshot> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Creates or updates a snapshot.
     *
     * @param resourceGroupName The name of the resource group.
     * @param snapshotName The name of the snapshot that is being created. The name can't be changed after the snapshot
     *     is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @param snapshot Snapshot resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return snapshot resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Snapshot beginCreateOrUpdateWithoutPolling(
        String resourceGroupName, String snapshotName, Snapshot snapshot) {
        return beginCreateOrUpdateWithoutPollingAsync(resourceGroupName, snapshotName, snapshot).block();
    }

    /**
     * Creates or updates a snapshot.
     *
     * @param resourceGroupName The name of the resource group.
     * @param snapshotName The name of the snapshot that is being created. The name can't be changed after the snapshot
     *     is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @param snapshot Snapshot resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return snapshot resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Snapshot beginCreateOrUpdateWithoutPolling(
        String resourceGroupName, String snapshotName, Snapshot snapshot, Context context) {
        return beginCreateOrUpdateWithoutPollingAsync(resourceGroupName, snapshotName, snapshot, context).block();
    }

    /**
     * Updates (patches) a snapshot.
     *
     * @param resourceGroupName The name of the resource group.
     * @param snapshotName The name of the snapshot that is being created. The name can't be changed after the snapshot
     *     is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @param snapshot Snapshot update resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return snapshot resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Snapshot>> beginUpdateWithoutPollingWithResponseAsync(
        String resourceGroupName, String snapshotName, SnapshotUpdate snapshot) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (snapshotName == null) {
            return Mono.error(new IllegalArgumentException("Parameter snapshotName is required and cannot be null."));
        }
        if (snapshot == null) {
            return Mono.error(new IllegalArgumentException("Parameter snapshot is required and cannot be null."));
        } else {
            snapshot.validate();
        }
        final String apiVersion = "2019-11-01";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .beginUpdateWithoutPolling(
                            this.client.getHost(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            snapshotName,
                            apiVersion,
                            snapshot,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Updates (patches) a snapshot.
     *
     * @param resourceGroupName The name of the resource group.
     * @param snapshotName The name of the snapshot that is being created. The name can't be changed after the snapshot
     *     is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @param snapshot Snapshot update resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return snapshot resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Snapshot>> beginUpdateWithoutPollingWithResponseAsync(
        String resourceGroupName, String snapshotName, SnapshotUpdate snapshot, Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (snapshotName == null) {
            return Mono.error(new IllegalArgumentException("Parameter snapshotName is required and cannot be null."));
        }
        if (snapshot == null) {
            return Mono.error(new IllegalArgumentException("Parameter snapshot is required and cannot be null."));
        } else {
            snapshot.validate();
        }
        final String apiVersion = "2019-11-01";
        return service
            .beginUpdateWithoutPolling(
                this.client.getHost(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                snapshotName,
                apiVersion,
                snapshot,
                context);
    }

    /**
     * Updates (patches) a snapshot.
     *
     * @param resourceGroupName The name of the resource group.
     * @param snapshotName The name of the snapshot that is being created. The name can't be changed after the snapshot
     *     is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @param snapshot Snapshot update resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return snapshot resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Snapshot> beginUpdateWithoutPollingAsync(
        String resourceGroupName, String snapshotName, SnapshotUpdate snapshot) {
        return beginUpdateWithoutPollingWithResponseAsync(resourceGroupName, snapshotName, snapshot)
            .flatMap(
                (Response<Snapshot> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Updates (patches) a snapshot.
     *
     * @param resourceGroupName The name of the resource group.
     * @param snapshotName The name of the snapshot that is being created. The name can't be changed after the snapshot
     *     is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @param snapshot Snapshot update resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return snapshot resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Snapshot> beginUpdateWithoutPollingAsync(
        String resourceGroupName, String snapshotName, SnapshotUpdate snapshot, Context context) {
        return beginUpdateWithoutPollingWithResponseAsync(resourceGroupName, snapshotName, snapshot, context)
            .flatMap(
                (Response<Snapshot> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Updates (patches) a snapshot.
     *
     * @param resourceGroupName The name of the resource group.
     * @param snapshotName The name of the snapshot that is being created. The name can't be changed after the snapshot
     *     is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @param snapshot Snapshot update resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return snapshot resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Snapshot beginUpdateWithoutPolling(String resourceGroupName, String snapshotName, SnapshotUpdate snapshot) {
        return beginUpdateWithoutPollingAsync(resourceGroupName, snapshotName, snapshot).block();
    }

    /**
     * Updates (patches) a snapshot.
     *
     * @param resourceGroupName The name of the resource group.
     * @param snapshotName The name of the snapshot that is being created. The name can't be changed after the snapshot
     *     is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @param snapshot Snapshot update resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return snapshot resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Snapshot beginUpdateWithoutPolling(
        String resourceGroupName, String snapshotName, SnapshotUpdate snapshot, Context context) {
        return beginUpdateWithoutPollingAsync(resourceGroupName, snapshotName, snapshot, context).block();
    }

    /**
     * Deletes a snapshot.
     *
     * @param resourceGroupName The name of the resource group.
     * @param snapshotName The name of the snapshot that is being created. The name can't be changed after the snapshot
     *     is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> beginDeleteWithoutPollingWithResponseAsync(
        String resourceGroupName, String snapshotName) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (snapshotName == null) {
            return Mono.error(new IllegalArgumentException("Parameter snapshotName is required and cannot be null."));
        }
        final String apiVersion = "2019-11-01";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .beginDeleteWithoutPolling(
                            this.client.getHost(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            snapshotName,
                            apiVersion,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Deletes a snapshot.
     *
     * @param resourceGroupName The name of the resource group.
     * @param snapshotName The name of the snapshot that is being created. The name can't be changed after the snapshot
     *     is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> beginDeleteWithoutPollingWithResponseAsync(
        String resourceGroupName, String snapshotName, Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (snapshotName == null) {
            return Mono.error(new IllegalArgumentException("Parameter snapshotName is required and cannot be null."));
        }
        final String apiVersion = "2019-11-01";
        return service
            .beginDeleteWithoutPolling(
                this.client.getHost(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                snapshotName,
                apiVersion,
                context);
    }

    /**
     * Deletes a snapshot.
     *
     * @param resourceGroupName The name of the resource group.
     * @param snapshotName The name of the snapshot that is being created. The name can't be changed after the snapshot
     *     is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> beginDeleteWithoutPollingAsync(String resourceGroupName, String snapshotName) {
        return beginDeleteWithoutPollingWithResponseAsync(resourceGroupName, snapshotName)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Deletes a snapshot.
     *
     * @param resourceGroupName The name of the resource group.
     * @param snapshotName The name of the snapshot that is being created. The name can't be changed after the snapshot
     *     is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> beginDeleteWithoutPollingAsync(String resourceGroupName, String snapshotName, Context context) {
        return beginDeleteWithoutPollingWithResponseAsync(resourceGroupName, snapshotName, context)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Deletes a snapshot.
     *
     * @param resourceGroupName The name of the resource group.
     * @param snapshotName The name of the snapshot that is being created. The name can't be changed after the snapshot
     *     is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void beginDeleteWithoutPolling(String resourceGroupName, String snapshotName) {
        beginDeleteWithoutPollingAsync(resourceGroupName, snapshotName).block();
    }

    /**
     * Deletes a snapshot.
     *
     * @param resourceGroupName The name of the resource group.
     * @param snapshotName The name of the snapshot that is being created. The name can't be changed after the snapshot
     *     is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void beginDeleteWithoutPolling(String resourceGroupName, String snapshotName, Context context) {
        beginDeleteWithoutPollingAsync(resourceGroupName, snapshotName, context).block();
    }

    /**
     * Grants access to a snapshot.
     *
     * @param resourceGroupName The name of the resource group.
     * @param snapshotName The name of the snapshot that is being created. The name can't be changed after the snapshot
     *     is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @param grantAccessData Data used for requesting a SAS.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a disk access SAS uri.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<AccessUri>> beginGrantAccessWithoutPollingWithResponseAsync(
        String resourceGroupName, String snapshotName, GrantAccessData grantAccessData) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (snapshotName == null) {
            return Mono.error(new IllegalArgumentException("Parameter snapshotName is required and cannot be null."));
        }
        if (grantAccessData == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter grantAccessData is required and cannot be null."));
        } else {
            grantAccessData.validate();
        }
        final String apiVersion = "2019-11-01";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .beginGrantAccessWithoutPolling(
                            this.client.getHost(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            snapshotName,
                            apiVersion,
                            grantAccessData,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Grants access to a snapshot.
     *
     * @param resourceGroupName The name of the resource group.
     * @param snapshotName The name of the snapshot that is being created. The name can't be changed after the snapshot
     *     is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @param grantAccessData Data used for requesting a SAS.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a disk access SAS uri.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<AccessUri>> beginGrantAccessWithoutPollingWithResponseAsync(
        String resourceGroupName, String snapshotName, GrantAccessData grantAccessData, Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (snapshotName == null) {
            return Mono.error(new IllegalArgumentException("Parameter snapshotName is required and cannot be null."));
        }
        if (grantAccessData == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter grantAccessData is required and cannot be null."));
        } else {
            grantAccessData.validate();
        }
        final String apiVersion = "2019-11-01";
        return service
            .beginGrantAccessWithoutPolling(
                this.client.getHost(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                snapshotName,
                apiVersion,
                grantAccessData,
                context);
    }

    /**
     * Grants access to a snapshot.
     *
     * @param resourceGroupName The name of the resource group.
     * @param snapshotName The name of the snapshot that is being created. The name can't be changed after the snapshot
     *     is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @param grantAccessData Data used for requesting a SAS.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a disk access SAS uri.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AccessUri> beginGrantAccessWithoutPollingAsync(
        String resourceGroupName, String snapshotName, GrantAccessData grantAccessData) {
        return beginGrantAccessWithoutPollingWithResponseAsync(resourceGroupName, snapshotName, grantAccessData)
            .flatMap(
                (Response<AccessUri> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Grants access to a snapshot.
     *
     * @param resourceGroupName The name of the resource group.
     * @param snapshotName The name of the snapshot that is being created. The name can't be changed after the snapshot
     *     is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @param grantAccessData Data used for requesting a SAS.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a disk access SAS uri.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AccessUri> beginGrantAccessWithoutPollingAsync(
        String resourceGroupName, String snapshotName, GrantAccessData grantAccessData, Context context) {
        return beginGrantAccessWithoutPollingWithResponseAsync(
                resourceGroupName, snapshotName, grantAccessData, context)
            .flatMap(
                (Response<AccessUri> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Grants access to a snapshot.
     *
     * @param resourceGroupName The name of the resource group.
     * @param snapshotName The name of the snapshot that is being created. The name can't be changed after the snapshot
     *     is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @param grantAccessData Data used for requesting a SAS.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a disk access SAS uri.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AccessUri beginGrantAccessWithoutPolling(
        String resourceGroupName, String snapshotName, GrantAccessData grantAccessData) {
        return beginGrantAccessWithoutPollingAsync(resourceGroupName, snapshotName, grantAccessData).block();
    }

    /**
     * Grants access to a snapshot.
     *
     * @param resourceGroupName The name of the resource group.
     * @param snapshotName The name of the snapshot that is being created. The name can't be changed after the snapshot
     *     is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @param grantAccessData Data used for requesting a SAS.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a disk access SAS uri.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AccessUri beginGrantAccessWithoutPolling(
        String resourceGroupName, String snapshotName, GrantAccessData grantAccessData, Context context) {
        return beginGrantAccessWithoutPollingAsync(resourceGroupName, snapshotName, grantAccessData, context).block();
    }

    /**
     * Revokes access to a snapshot.
     *
     * @param resourceGroupName The name of the resource group.
     * @param snapshotName The name of the snapshot that is being created. The name can't be changed after the snapshot
     *     is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> beginRevokeAccessWithoutPollingWithResponseAsync(
        String resourceGroupName, String snapshotName) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (snapshotName == null) {
            return Mono.error(new IllegalArgumentException("Parameter snapshotName is required and cannot be null."));
        }
        final String apiVersion = "2019-11-01";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .beginRevokeAccessWithoutPolling(
                            this.client.getHost(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            snapshotName,
                            apiVersion,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Revokes access to a snapshot.
     *
     * @param resourceGroupName The name of the resource group.
     * @param snapshotName The name of the snapshot that is being created. The name can't be changed after the snapshot
     *     is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> beginRevokeAccessWithoutPollingWithResponseAsync(
        String resourceGroupName, String snapshotName, Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (snapshotName == null) {
            return Mono.error(new IllegalArgumentException("Parameter snapshotName is required and cannot be null."));
        }
        final String apiVersion = "2019-11-01";
        return service
            .beginRevokeAccessWithoutPolling(
                this.client.getHost(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                snapshotName,
                apiVersion,
                context);
    }

    /**
     * Revokes access to a snapshot.
     *
     * @param resourceGroupName The name of the resource group.
     * @param snapshotName The name of the snapshot that is being created. The name can't be changed after the snapshot
     *     is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> beginRevokeAccessWithoutPollingAsync(String resourceGroupName, String snapshotName) {
        return beginRevokeAccessWithoutPollingWithResponseAsync(resourceGroupName, snapshotName)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Revokes access to a snapshot.
     *
     * @param resourceGroupName The name of the resource group.
     * @param snapshotName The name of the snapshot that is being created. The name can't be changed after the snapshot
     *     is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> beginRevokeAccessWithoutPollingAsync(
        String resourceGroupName, String snapshotName, Context context) {
        return beginRevokeAccessWithoutPollingWithResponseAsync(resourceGroupName, snapshotName, context)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Revokes access to a snapshot.
     *
     * @param resourceGroupName The name of the resource group.
     * @param snapshotName The name of the snapshot that is being created. The name can't be changed after the snapshot
     *     is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void beginRevokeAccessWithoutPolling(String resourceGroupName, String snapshotName) {
        beginRevokeAccessWithoutPollingAsync(resourceGroupName, snapshotName).block();
    }

    /**
     * Revokes access to a snapshot.
     *
     * @param resourceGroupName The name of the resource group.
     * @param snapshotName The name of the snapshot that is being created. The name can't be changed after the snapshot
     *     is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void beginRevokeAccessWithoutPolling(String resourceGroupName, String snapshotName, Context context) {
        beginRevokeAccessWithoutPollingAsync(resourceGroupName, snapshotName, context).block();
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List Snapshots operation response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<Snapshot>> listByResourceGroupNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        return FluxUtil
            .withContext(context -> service.listByResourceGroupNext(nextLink, context))
            .<PagedResponse<Snapshot>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().getValue(),
                        res.getValue().getNextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List Snapshots operation response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<Snapshot>> listByResourceGroupNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        return service
            .listByResourceGroupNext(nextLink, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().getValue(),
                        res.getValue().getNextLink(),
                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List Snapshots operation response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<Snapshot>> listNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        return FluxUtil
            .withContext(context -> service.listNext(nextLink, context))
            .<PagedResponse<Snapshot>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().getValue(),
                        res.getValue().getNextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List Snapshots operation response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<Snapshot>> listNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        return service
            .listNext(nextLink, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().getValue(),
                        res.getValue().getNextLink(),
                        null));
    }
}
