// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.management.vanilla.compute.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.management.Resource;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** The ContainerService model. */
@JsonFlatten
@Fluent
public class ContainerService extends Resource {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ContainerService.class);

    /*
     * the current deployment or provisioning state, which only appears in the
     * response.
     */
    @JsonProperty(value = "properties.provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private String provisioningState;

    /*
     * Properties of the orchestrator.
     */
    @JsonProperty(value = "properties.orchestratorProfile")
    private ContainerServiceOrchestratorProfile orchestratorProfile;

    /*
     * Properties for custom clusters.
     */
    @JsonProperty(value = "properties.customProfile")
    private ContainerServiceCustomProfile customProfile;

    /*
     * Properties for cluster service principals.
     */
    @JsonProperty(value = "properties.servicePrincipalProfile")
    private ContainerServicePrincipalProfile servicePrincipalProfile;

    /*
     * Properties of master agents.
     */
    @JsonProperty(value = "properties.masterProfile")
    private ContainerServiceMasterProfile masterProfile;

    /*
     * Properties of the agent pool.
     */
    @JsonProperty(value = "properties.agentPoolProfiles")
    private List<ContainerServiceAgentPoolProfile> agentPoolProfiles;

    /*
     * Properties of Windows VMs.
     */
    @JsonProperty(value = "properties.windowsProfile")
    private ContainerServiceWindowsProfile windowsProfile;

    /*
     * Properties of Linux VMs.
     */
    @JsonProperty(value = "properties.linuxProfile")
    private ContainerServiceLinuxProfile linuxProfile;

    /*
     * Properties of the diagnostic agent.
     */
    @JsonProperty(value = "properties.diagnosticsProfile")
    private ContainerServiceDiagnosticsProfile diagnosticsProfile;

    /**
     * Get the provisioningState property: the current deployment or provisioning state, which only appears in the
     * response.
     *
     * @return the provisioningState value.
     */
    public String getProvisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the orchestratorProfile property: Properties of the orchestrator.
     *
     * @return the orchestratorProfile value.
     */
    public ContainerServiceOrchestratorProfile getOrchestratorProfile() {
        return this.orchestratorProfile;
    }

    /**
     * Set the orchestratorProfile property: Properties of the orchestrator.
     *
     * @param orchestratorProfile the orchestratorProfile value to set.
     * @return the ContainerService object itself.
     */
    public ContainerService setOrchestratorProfile(ContainerServiceOrchestratorProfile orchestratorProfile) {
        this.orchestratorProfile = orchestratorProfile;
        return this;
    }

    /**
     * Get the customProfile property: Properties for custom clusters.
     *
     * @return the customProfile value.
     */
    public ContainerServiceCustomProfile getCustomProfile() {
        return this.customProfile;
    }

    /**
     * Set the customProfile property: Properties for custom clusters.
     *
     * @param customProfile the customProfile value to set.
     * @return the ContainerService object itself.
     */
    public ContainerService setCustomProfile(ContainerServiceCustomProfile customProfile) {
        this.customProfile = customProfile;
        return this;
    }

    /**
     * Get the servicePrincipalProfile property: Properties for cluster service principals.
     *
     * @return the servicePrincipalProfile value.
     */
    public ContainerServicePrincipalProfile getServicePrincipalProfile() {
        return this.servicePrincipalProfile;
    }

    /**
     * Set the servicePrincipalProfile property: Properties for cluster service principals.
     *
     * @param servicePrincipalProfile the servicePrincipalProfile value to set.
     * @return the ContainerService object itself.
     */
    public ContainerService setServicePrincipalProfile(ContainerServicePrincipalProfile servicePrincipalProfile) {
        this.servicePrincipalProfile = servicePrincipalProfile;
        return this;
    }

    /**
     * Get the masterProfile property: Properties of master agents.
     *
     * @return the masterProfile value.
     */
    public ContainerServiceMasterProfile getMasterProfile() {
        return this.masterProfile;
    }

    /**
     * Set the masterProfile property: Properties of master agents.
     *
     * @param masterProfile the masterProfile value to set.
     * @return the ContainerService object itself.
     */
    public ContainerService setMasterProfile(ContainerServiceMasterProfile masterProfile) {
        this.masterProfile = masterProfile;
        return this;
    }

    /**
     * Get the agentPoolProfiles property: Properties of the agent pool.
     *
     * @return the agentPoolProfiles value.
     */
    public List<ContainerServiceAgentPoolProfile> getAgentPoolProfiles() {
        return this.agentPoolProfiles;
    }

    /**
     * Set the agentPoolProfiles property: Properties of the agent pool.
     *
     * @param agentPoolProfiles the agentPoolProfiles value to set.
     * @return the ContainerService object itself.
     */
    public ContainerService setAgentPoolProfiles(List<ContainerServiceAgentPoolProfile> agentPoolProfiles) {
        this.agentPoolProfiles = agentPoolProfiles;
        return this;
    }

    /**
     * Get the windowsProfile property: Properties of Windows VMs.
     *
     * @return the windowsProfile value.
     */
    public ContainerServiceWindowsProfile getWindowsProfile() {
        return this.windowsProfile;
    }

    /**
     * Set the windowsProfile property: Properties of Windows VMs.
     *
     * @param windowsProfile the windowsProfile value to set.
     * @return the ContainerService object itself.
     */
    public ContainerService setWindowsProfile(ContainerServiceWindowsProfile windowsProfile) {
        this.windowsProfile = windowsProfile;
        return this;
    }

    /**
     * Get the linuxProfile property: Properties of Linux VMs.
     *
     * @return the linuxProfile value.
     */
    public ContainerServiceLinuxProfile getLinuxProfile() {
        return this.linuxProfile;
    }

    /**
     * Set the linuxProfile property: Properties of Linux VMs.
     *
     * @param linuxProfile the linuxProfile value to set.
     * @return the ContainerService object itself.
     */
    public ContainerService setLinuxProfile(ContainerServiceLinuxProfile linuxProfile) {
        this.linuxProfile = linuxProfile;
        return this;
    }

    /**
     * Get the diagnosticsProfile property: Properties of the diagnostic agent.
     *
     * @return the diagnosticsProfile value.
     */
    public ContainerServiceDiagnosticsProfile getDiagnosticsProfile() {
        return this.diagnosticsProfile;
    }

    /**
     * Set the diagnosticsProfile property: Properties of the diagnostic agent.
     *
     * @param diagnosticsProfile the diagnosticsProfile value to set.
     * @return the ContainerService object itself.
     */
    public ContainerService setDiagnosticsProfile(ContainerServiceDiagnosticsProfile diagnosticsProfile) {
        this.diagnosticsProfile = diagnosticsProfile;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (getOrchestratorProfile() != null) {
            getOrchestratorProfile().validate();
        }
        if (getCustomProfile() != null) {
            getCustomProfile().validate();
        }
        if (getServicePrincipalProfile() != null) {
            getServicePrincipalProfile().validate();
        }
        if (getMasterProfile() != null) {
            getMasterProfile().validate();
        }
        if (getAgentPoolProfiles() != null) {
            getAgentPoolProfiles().forEach(e -> e.validate());
        }
        if (getWindowsProfile() != null) {
            getWindowsProfile().validate();
        }
        if (getLinuxProfile() != null) {
            getLinuxProfile().validate();
        }
        if (getDiagnosticsProfile() != null) {
            getDiagnosticsProfile().validate();
        }
    }
}
