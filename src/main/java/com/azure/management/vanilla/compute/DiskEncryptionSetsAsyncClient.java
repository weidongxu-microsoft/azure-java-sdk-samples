// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.management.vanilla.compute;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.PollerFlux;
import com.azure.management.vanilla.compute.implementation.DiskEncryptionSetsImpl;
import com.azure.management.vanilla.compute.models.ApiErrorException;
import com.azure.management.vanilla.compute.models.DiskEncryptionSet;
import com.azure.management.vanilla.compute.models.DiskEncryptionSetUpdate;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/** Initializes a new instance of the asynchronous ComputeManagementClient type. */
@ServiceClient(builder = ComputeManagementClientBuilder.class)
public final class DiskEncryptionSetsAsyncClient {
    private DiskEncryptionSetsImpl serviceClient;

    /** Initializes an instance of DiskEncryptionSets client. */
    DiskEncryptionSetsAsyncClient(DiskEncryptionSetsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Creates or updates a disk encryption set.
     *
     * @param resourceGroupName The name of the resource group.
     * @param diskEncryptionSetName The name of the disk encryption set that is being created. The name can't be changed
     *     after the disk encryption set is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The
     *     maximum name length is 80 characters.
     * @param diskEncryptionSet disk encryption set resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return disk encryption set resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponse(
        String resourceGroupName, String diskEncryptionSetName, DiskEncryptionSet diskEncryptionSet) {
        return this
            .serviceClient
            .createOrUpdateWithResponseAsync(resourceGroupName, diskEncryptionSetName, diskEncryptionSet);
    }

    /**
     * Creates or updates a disk encryption set.
     *
     * @param resourceGroupName The name of the resource group.
     * @param diskEncryptionSetName The name of the disk encryption set that is being created. The name can't be changed
     *     after the disk encryption set is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The
     *     maximum name length is 80 characters.
     * @param diskEncryptionSet disk encryption set resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return disk encryption set resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponse(
        String resourceGroupName, String diskEncryptionSetName, DiskEncryptionSet diskEncryptionSet, Context context) {
        return this
            .serviceClient
            .createOrUpdateWithResponseAsync(resourceGroupName, diskEncryptionSetName, diskEncryptionSet, context);
    }

    /**
     * Creates or updates a disk encryption set.
     *
     * @param resourceGroupName The name of the resource group.
     * @param diskEncryptionSetName The name of the disk encryption set that is being created. The name can't be changed
     *     after the disk encryption set is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The
     *     maximum name length is 80 characters.
     * @param diskEncryptionSet disk encryption set resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return disk encryption set resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PollerFlux<PollResult<DiskEncryptionSet>, DiskEncryptionSet> beginCreateOrUpdate(
        String resourceGroupName, String diskEncryptionSetName, DiskEncryptionSet diskEncryptionSet) {
        return this.serviceClient.beginCreateOrUpdate(resourceGroupName, diskEncryptionSetName, diskEncryptionSet);
    }

    /**
     * Creates or updates a disk encryption set.
     *
     * @param resourceGroupName The name of the resource group.
     * @param diskEncryptionSetName The name of the disk encryption set that is being created. The name can't be changed
     *     after the disk encryption set is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The
     *     maximum name length is 80 characters.
     * @param diskEncryptionSet disk encryption set resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return disk encryption set resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PollerFlux<PollResult<DiskEncryptionSet>, DiskEncryptionSet> beginCreateOrUpdate(
        String resourceGroupName, String diskEncryptionSetName, DiskEncryptionSet diskEncryptionSet, Context context) {
        return this
            .serviceClient
            .beginCreateOrUpdate(resourceGroupName, diskEncryptionSetName, diskEncryptionSet, context);
    }

    /**
     * Creates or updates a disk encryption set.
     *
     * @param resourceGroupName The name of the resource group.
     * @param diskEncryptionSetName The name of the disk encryption set that is being created. The name can't be changed
     *     after the disk encryption set is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The
     *     maximum name length is 80 characters.
     * @param diskEncryptionSet disk encryption set resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return disk encryption set resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DiskEncryptionSet> createOrUpdate(
        String resourceGroupName, String diskEncryptionSetName, DiskEncryptionSet diskEncryptionSet) {
        return this.serviceClient.createOrUpdateAsync(resourceGroupName, diskEncryptionSetName, diskEncryptionSet);
    }

    /**
     * Creates or updates a disk encryption set.
     *
     * @param resourceGroupName The name of the resource group.
     * @param diskEncryptionSetName The name of the disk encryption set that is being created. The name can't be changed
     *     after the disk encryption set is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The
     *     maximum name length is 80 characters.
     * @param diskEncryptionSet disk encryption set resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return disk encryption set resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DiskEncryptionSet> createOrUpdate(
        String resourceGroupName, String diskEncryptionSetName, DiskEncryptionSet diskEncryptionSet, Context context) {
        return this
            .serviceClient
            .createOrUpdateAsync(resourceGroupName, diskEncryptionSetName, diskEncryptionSet, context);
    }

    /**
     * Updates (patches) a disk encryption set.
     *
     * @param resourceGroupName The name of the resource group.
     * @param diskEncryptionSetName The name of the disk encryption set that is being created. The name can't be changed
     *     after the disk encryption set is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The
     *     maximum name length is 80 characters.
     * @param diskEncryptionSet disk encryption set update resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return disk encryption set resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Flux<ByteBuffer>>> updateWithResponse(
        String resourceGroupName, String diskEncryptionSetName, DiskEncryptionSetUpdate diskEncryptionSet) {
        return this.serviceClient.updateWithResponseAsync(resourceGroupName, diskEncryptionSetName, diskEncryptionSet);
    }

    /**
     * Updates (patches) a disk encryption set.
     *
     * @param resourceGroupName The name of the resource group.
     * @param diskEncryptionSetName The name of the disk encryption set that is being created. The name can't be changed
     *     after the disk encryption set is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The
     *     maximum name length is 80 characters.
     * @param diskEncryptionSet disk encryption set update resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return disk encryption set resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Flux<ByteBuffer>>> updateWithResponse(
        String resourceGroupName,
        String diskEncryptionSetName,
        DiskEncryptionSetUpdate diskEncryptionSet,
        Context context) {
        return this
            .serviceClient
            .updateWithResponseAsync(resourceGroupName, diskEncryptionSetName, diskEncryptionSet, context);
    }

    /**
     * Updates (patches) a disk encryption set.
     *
     * @param resourceGroupName The name of the resource group.
     * @param diskEncryptionSetName The name of the disk encryption set that is being created. The name can't be changed
     *     after the disk encryption set is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The
     *     maximum name length is 80 characters.
     * @param diskEncryptionSet disk encryption set update resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return disk encryption set resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PollerFlux<PollResult<DiskEncryptionSet>, DiskEncryptionSet> beginUpdate(
        String resourceGroupName, String diskEncryptionSetName, DiskEncryptionSetUpdate diskEncryptionSet) {
        return this.serviceClient.beginUpdate(resourceGroupName, diskEncryptionSetName, diskEncryptionSet);
    }

    /**
     * Updates (patches) a disk encryption set.
     *
     * @param resourceGroupName The name of the resource group.
     * @param diskEncryptionSetName The name of the disk encryption set that is being created. The name can't be changed
     *     after the disk encryption set is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The
     *     maximum name length is 80 characters.
     * @param diskEncryptionSet disk encryption set update resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return disk encryption set resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PollerFlux<PollResult<DiskEncryptionSet>, DiskEncryptionSet> beginUpdate(
        String resourceGroupName,
        String diskEncryptionSetName,
        DiskEncryptionSetUpdate diskEncryptionSet,
        Context context) {
        return this.serviceClient.beginUpdate(resourceGroupName, diskEncryptionSetName, diskEncryptionSet, context);
    }

    /**
     * Updates (patches) a disk encryption set.
     *
     * @param resourceGroupName The name of the resource group.
     * @param diskEncryptionSetName The name of the disk encryption set that is being created. The name can't be changed
     *     after the disk encryption set is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The
     *     maximum name length is 80 characters.
     * @param diskEncryptionSet disk encryption set update resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return disk encryption set resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DiskEncryptionSet> update(
        String resourceGroupName, String diskEncryptionSetName, DiskEncryptionSetUpdate diskEncryptionSet) {
        return this.serviceClient.updateAsync(resourceGroupName, diskEncryptionSetName, diskEncryptionSet);
    }

    /**
     * Updates (patches) a disk encryption set.
     *
     * @param resourceGroupName The name of the resource group.
     * @param diskEncryptionSetName The name of the disk encryption set that is being created. The name can't be changed
     *     after the disk encryption set is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The
     *     maximum name length is 80 characters.
     * @param diskEncryptionSet disk encryption set update resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return disk encryption set resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DiskEncryptionSet> update(
        String resourceGroupName,
        String diskEncryptionSetName,
        DiskEncryptionSetUpdate diskEncryptionSet,
        Context context) {
        return this.serviceClient.updateAsync(resourceGroupName, diskEncryptionSetName, diskEncryptionSet, context);
    }

    /**
     * Gets information about a disk encryption set.
     *
     * @param resourceGroupName The name of the resource group.
     * @param diskEncryptionSetName The name of the disk encryption set that is being created. The name can't be changed
     *     after the disk encryption set is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The
     *     maximum name length is 80 characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about a disk encryption set.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<DiskEncryptionSet>> getByResourceGroupWithResponse(
        String resourceGroupName, String diskEncryptionSetName) {
        return this.serviceClient.getByResourceGroupWithResponseAsync(resourceGroupName, diskEncryptionSetName);
    }

    /**
     * Gets information about a disk encryption set.
     *
     * @param resourceGroupName The name of the resource group.
     * @param diskEncryptionSetName The name of the disk encryption set that is being created. The name can't be changed
     *     after the disk encryption set is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The
     *     maximum name length is 80 characters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about a disk encryption set.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<DiskEncryptionSet>> getByResourceGroupWithResponse(
        String resourceGroupName, String diskEncryptionSetName, Context context) {
        return this
            .serviceClient
            .getByResourceGroupWithResponseAsync(resourceGroupName, diskEncryptionSetName, context);
    }

    /**
     * Gets information about a disk encryption set.
     *
     * @param resourceGroupName The name of the resource group.
     * @param diskEncryptionSetName The name of the disk encryption set that is being created. The name can't be changed
     *     after the disk encryption set is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The
     *     maximum name length is 80 characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about a disk encryption set.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DiskEncryptionSet> getByResourceGroup(String resourceGroupName, String diskEncryptionSetName) {
        return this.serviceClient.getByResourceGroupAsync(resourceGroupName, diskEncryptionSetName);
    }

    /**
     * Gets information about a disk encryption set.
     *
     * @param resourceGroupName The name of the resource group.
     * @param diskEncryptionSetName The name of the disk encryption set that is being created. The name can't be changed
     *     after the disk encryption set is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The
     *     maximum name length is 80 characters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about a disk encryption set.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DiskEncryptionSet> getByResourceGroup(
        String resourceGroupName, String diskEncryptionSetName, Context context) {
        return this.serviceClient.getByResourceGroupAsync(resourceGroupName, diskEncryptionSetName, context);
    }

    /**
     * Deletes a disk encryption set.
     *
     * @param resourceGroupName The name of the resource group.
     * @param diskEncryptionSetName The name of the disk encryption set that is being created. The name can't be changed
     *     after the disk encryption set is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The
     *     maximum name length is 80 characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Flux<ByteBuffer>>> deleteWithResponse(String resourceGroupName, String diskEncryptionSetName) {
        return this.serviceClient.deleteWithResponseAsync(resourceGroupName, diskEncryptionSetName);
    }

    /**
     * Deletes a disk encryption set.
     *
     * @param resourceGroupName The name of the resource group.
     * @param diskEncryptionSetName The name of the disk encryption set that is being created. The name can't be changed
     *     after the disk encryption set is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The
     *     maximum name length is 80 characters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Flux<ByteBuffer>>> deleteWithResponse(
        String resourceGroupName, String diskEncryptionSetName, Context context) {
        return this.serviceClient.deleteWithResponseAsync(resourceGroupName, diskEncryptionSetName, context);
    }

    /**
     * Deletes a disk encryption set.
     *
     * @param resourceGroupName The name of the resource group.
     * @param diskEncryptionSetName The name of the disk encryption set that is being created. The name can't be changed
     *     after the disk encryption set is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The
     *     maximum name length is 80 characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PollerFlux<PollResult<Void>, Void> beginDelete(String resourceGroupName, String diskEncryptionSetName) {
        return this.serviceClient.beginDelete(resourceGroupName, diskEncryptionSetName);
    }

    /**
     * Deletes a disk encryption set.
     *
     * @param resourceGroupName The name of the resource group.
     * @param diskEncryptionSetName The name of the disk encryption set that is being created. The name can't be changed
     *     after the disk encryption set is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The
     *     maximum name length is 80 characters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PollerFlux<PollResult<Void>, Void> beginDelete(
        String resourceGroupName, String diskEncryptionSetName, Context context) {
        return this.serviceClient.beginDelete(resourceGroupName, diskEncryptionSetName, context);
    }

    /**
     * Deletes a disk encryption set.
     *
     * @param resourceGroupName The name of the resource group.
     * @param diskEncryptionSetName The name of the disk encryption set that is being created. The name can't be changed
     *     after the disk encryption set is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The
     *     maximum name length is 80 characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> delete(String resourceGroupName, String diskEncryptionSetName) {
        return this.serviceClient.deleteAsync(resourceGroupName, diskEncryptionSetName);
    }

    /**
     * Deletes a disk encryption set.
     *
     * @param resourceGroupName The name of the resource group.
     * @param diskEncryptionSetName The name of the disk encryption set that is being created. The name can't be changed
     *     after the disk encryption set is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The
     *     maximum name length is 80 characters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> delete(String resourceGroupName, String diskEncryptionSetName, Context context) {
        return this.serviceClient.deleteAsync(resourceGroupName, diskEncryptionSetName, context);
    }

    /**
     * Lists all the disk encryption sets under a resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List disk encryption set operation response.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public Mono<PagedResponse<DiskEncryptionSet>> listByResourceGroupSinglePage(String resourceGroupName) {
        return this.serviceClient.listByResourceGroupSinglePageAsync(resourceGroupName);
    }

    /**
     * Lists all the disk encryption sets under a resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List disk encryption set operation response.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public Mono<PagedResponse<DiskEncryptionSet>> listByResourceGroupSinglePage(
        String resourceGroupName, Context context) {
        return this.serviceClient.listByResourceGroupSinglePageAsync(resourceGroupName, context);
    }

    /**
     * Lists all the disk encryption sets under a resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List disk encryption set operation response.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<DiskEncryptionSet> listByResourceGroup(String resourceGroupName) {
        return this.serviceClient.listByResourceGroupAsync(resourceGroupName);
    }

    /**
     * Lists all the disk encryption sets under a resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List disk encryption set operation response.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<DiskEncryptionSet> listByResourceGroup(String resourceGroupName, Context context) {
        return this.serviceClient.listByResourceGroupAsync(resourceGroupName, context);
    }

    /**
     * Lists all the disk encryption sets under a subscription.
     *
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List disk encryption set operation response.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public Mono<PagedResponse<DiskEncryptionSet>> listSinglePage() {
        return this.serviceClient.listSinglePageAsync();
    }

    /**
     * Lists all the disk encryption sets under a subscription.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List disk encryption set operation response.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public Mono<PagedResponse<DiskEncryptionSet>> listSinglePage(Context context) {
        return this.serviceClient.listSinglePageAsync(context);
    }

    /**
     * Lists all the disk encryption sets under a subscription.
     *
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List disk encryption set operation response.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<DiskEncryptionSet> list() {
        return this.serviceClient.listAsync();
    }

    /**
     * Lists all the disk encryption sets under a subscription.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List disk encryption set operation response.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<DiskEncryptionSet> list(Context context) {
        return this.serviceClient.listAsync(context);
    }

    /**
     * Creates or updates a disk encryption set.
     *
     * @param resourceGroupName The name of the resource group.
     * @param diskEncryptionSetName The name of the disk encryption set that is being created. The name can't be changed
     *     after the disk encryption set is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The
     *     maximum name length is 80 characters.
     * @param diskEncryptionSet disk encryption set resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return disk encryption set resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<DiskEncryptionSet>> beginCreateOrUpdateWithoutPollingWithResponse(
        String resourceGroupName, String diskEncryptionSetName, DiskEncryptionSet diskEncryptionSet) {
        return this
            .serviceClient
            .beginCreateOrUpdateWithoutPollingWithResponseAsync(
                resourceGroupName, diskEncryptionSetName, diskEncryptionSet);
    }

    /**
     * Creates or updates a disk encryption set.
     *
     * @param resourceGroupName The name of the resource group.
     * @param diskEncryptionSetName The name of the disk encryption set that is being created. The name can't be changed
     *     after the disk encryption set is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The
     *     maximum name length is 80 characters.
     * @param diskEncryptionSet disk encryption set resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return disk encryption set resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<DiskEncryptionSet>> beginCreateOrUpdateWithoutPollingWithResponse(
        String resourceGroupName, String diskEncryptionSetName, DiskEncryptionSet diskEncryptionSet, Context context) {
        return this
            .serviceClient
            .beginCreateOrUpdateWithoutPollingWithResponseAsync(
                resourceGroupName, diskEncryptionSetName, diskEncryptionSet, context);
    }

    /**
     * Creates or updates a disk encryption set.
     *
     * @param resourceGroupName The name of the resource group.
     * @param diskEncryptionSetName The name of the disk encryption set that is being created. The name can't be changed
     *     after the disk encryption set is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The
     *     maximum name length is 80 characters.
     * @param diskEncryptionSet disk encryption set resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return disk encryption set resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DiskEncryptionSet> beginCreateOrUpdateWithoutPolling(
        String resourceGroupName, String diskEncryptionSetName, DiskEncryptionSet diskEncryptionSet) {
        return this
            .serviceClient
            .beginCreateOrUpdateWithoutPollingAsync(resourceGroupName, diskEncryptionSetName, diskEncryptionSet);
    }

    /**
     * Creates or updates a disk encryption set.
     *
     * @param resourceGroupName The name of the resource group.
     * @param diskEncryptionSetName The name of the disk encryption set that is being created. The name can't be changed
     *     after the disk encryption set is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The
     *     maximum name length is 80 characters.
     * @param diskEncryptionSet disk encryption set resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return disk encryption set resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DiskEncryptionSet> beginCreateOrUpdateWithoutPolling(
        String resourceGroupName, String diskEncryptionSetName, DiskEncryptionSet diskEncryptionSet, Context context) {
        return this
            .serviceClient
            .beginCreateOrUpdateWithoutPollingAsync(
                resourceGroupName, diskEncryptionSetName, diskEncryptionSet, context);
    }

    /**
     * Updates (patches) a disk encryption set.
     *
     * @param resourceGroupName The name of the resource group.
     * @param diskEncryptionSetName The name of the disk encryption set that is being created. The name can't be changed
     *     after the disk encryption set is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The
     *     maximum name length is 80 characters.
     * @param diskEncryptionSet disk encryption set update resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return disk encryption set resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<DiskEncryptionSet>> beginUpdateWithoutPollingWithResponse(
        String resourceGroupName, String diskEncryptionSetName, DiskEncryptionSetUpdate diskEncryptionSet) {
        return this
            .serviceClient
            .beginUpdateWithoutPollingWithResponseAsync(resourceGroupName, diskEncryptionSetName, diskEncryptionSet);
    }

    /**
     * Updates (patches) a disk encryption set.
     *
     * @param resourceGroupName The name of the resource group.
     * @param diskEncryptionSetName The name of the disk encryption set that is being created. The name can't be changed
     *     after the disk encryption set is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The
     *     maximum name length is 80 characters.
     * @param diskEncryptionSet disk encryption set update resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return disk encryption set resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<DiskEncryptionSet>> beginUpdateWithoutPollingWithResponse(
        String resourceGroupName,
        String diskEncryptionSetName,
        DiskEncryptionSetUpdate diskEncryptionSet,
        Context context) {
        return this
            .serviceClient
            .beginUpdateWithoutPollingWithResponseAsync(
                resourceGroupName, diskEncryptionSetName, diskEncryptionSet, context);
    }

    /**
     * Updates (patches) a disk encryption set.
     *
     * @param resourceGroupName The name of the resource group.
     * @param diskEncryptionSetName The name of the disk encryption set that is being created. The name can't be changed
     *     after the disk encryption set is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The
     *     maximum name length is 80 characters.
     * @param diskEncryptionSet disk encryption set update resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return disk encryption set resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DiskEncryptionSet> beginUpdateWithoutPolling(
        String resourceGroupName, String diskEncryptionSetName, DiskEncryptionSetUpdate diskEncryptionSet) {
        return this
            .serviceClient
            .beginUpdateWithoutPollingAsync(resourceGroupName, diskEncryptionSetName, diskEncryptionSet);
    }

    /**
     * Updates (patches) a disk encryption set.
     *
     * @param resourceGroupName The name of the resource group.
     * @param diskEncryptionSetName The name of the disk encryption set that is being created. The name can't be changed
     *     after the disk encryption set is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The
     *     maximum name length is 80 characters.
     * @param diskEncryptionSet disk encryption set update resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return disk encryption set resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DiskEncryptionSet> beginUpdateWithoutPolling(
        String resourceGroupName,
        String diskEncryptionSetName,
        DiskEncryptionSetUpdate diskEncryptionSet,
        Context context) {
        return this
            .serviceClient
            .beginUpdateWithoutPollingAsync(resourceGroupName, diskEncryptionSetName, diskEncryptionSet, context);
    }

    /**
     * Deletes a disk encryption set.
     *
     * @param resourceGroupName The name of the resource group.
     * @param diskEncryptionSetName The name of the disk encryption set that is being created. The name can't be changed
     *     after the disk encryption set is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The
     *     maximum name length is 80 characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> beginDeleteWithoutPollingWithResponse(
        String resourceGroupName, String diskEncryptionSetName) {
        return this.serviceClient.beginDeleteWithoutPollingWithResponseAsync(resourceGroupName, diskEncryptionSetName);
    }

    /**
     * Deletes a disk encryption set.
     *
     * @param resourceGroupName The name of the resource group.
     * @param diskEncryptionSetName The name of the disk encryption set that is being created. The name can't be changed
     *     after the disk encryption set is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The
     *     maximum name length is 80 characters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> beginDeleteWithoutPollingWithResponse(
        String resourceGroupName, String diskEncryptionSetName, Context context) {
        return this
            .serviceClient
            .beginDeleteWithoutPollingWithResponseAsync(resourceGroupName, diskEncryptionSetName, context);
    }

    /**
     * Deletes a disk encryption set.
     *
     * @param resourceGroupName The name of the resource group.
     * @param diskEncryptionSetName The name of the disk encryption set that is being created. The name can't be changed
     *     after the disk encryption set is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The
     *     maximum name length is 80 characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> beginDeleteWithoutPolling(String resourceGroupName, String diskEncryptionSetName) {
        return this.serviceClient.beginDeleteWithoutPollingAsync(resourceGroupName, diskEncryptionSetName);
    }

    /**
     * Deletes a disk encryption set.
     *
     * @param resourceGroupName The name of the resource group.
     * @param diskEncryptionSetName The name of the disk encryption set that is being created. The name can't be changed
     *     after the disk encryption set is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The
     *     maximum name length is 80 characters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> beginDeleteWithoutPolling(
        String resourceGroupName, String diskEncryptionSetName, Context context) {
        return this.serviceClient.beginDeleteWithoutPollingAsync(resourceGroupName, diskEncryptionSetName, context);
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List disk encryption set operation response.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public Mono<PagedResponse<DiskEncryptionSet>> listByResourceGroupNextSinglePage(String nextLink) {
        return this.serviceClient.listByResourceGroupNextSinglePageAsync(nextLink);
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink null
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List disk encryption set operation response.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public Mono<PagedResponse<DiskEncryptionSet>> listByResourceGroupNextSinglePage(String nextLink, Context context) {
        return this.serviceClient.listByResourceGroupNextSinglePageAsync(nextLink, context);
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List disk encryption set operation response.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public Mono<PagedResponse<DiskEncryptionSet>> listNextSinglePage(String nextLink) {
        return this.serviceClient.listNextSinglePageAsync(nextLink);
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink null
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List disk encryption set operation response.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public Mono<PagedResponse<DiskEncryptionSet>> listNextSinglePage(String nextLink, Context context) {
        return this.serviceClient.listNextSinglePageAsync(nextLink, context);
    }
}
