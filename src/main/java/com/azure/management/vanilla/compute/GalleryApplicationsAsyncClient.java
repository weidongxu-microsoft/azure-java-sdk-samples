// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.management.vanilla.compute;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.PollerFlux;
import com.azure.management.vanilla.compute.implementation.GalleryApplicationsImpl;
import com.azure.management.vanilla.compute.models.ApiErrorException;
import com.azure.management.vanilla.compute.models.GalleryApplication;
import com.azure.management.vanilla.compute.models.GalleryApplicationUpdate;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/** Initializes a new instance of the asynchronous ComputeManagementClient type. */
@ServiceClient(builder = ComputeManagementClientBuilder.class)
public final class GalleryApplicationsAsyncClient {
    private GalleryApplicationsImpl serviceClient;

    /** Initializes an instance of GalleryApplications client. */
    GalleryApplicationsAsyncClient(GalleryApplicationsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Create or update a gallery Application Definition.
     *
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application Definition is to be
     *     created.
     * @param galleryApplicationName The name of the gallery Application Definition to be created or updated. The
     *     allowed characters are alphabets and numbers with dots, dashes, and periods allowed in the middle. The
     *     maximum length is 80 characters.
     * @param galleryApplication Specifies information about the gallery Application Definition that you want to create
     *     or update.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return specifies information about the gallery Application Definition that you want to create or update.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponse(
        String resourceGroupName,
        String galleryName,
        String galleryApplicationName,
        GalleryApplication galleryApplication) {
        return this
            .serviceClient
            .createOrUpdateWithResponseAsync(
                resourceGroupName, galleryName, galleryApplicationName, galleryApplication);
    }

    /**
     * Create or update a gallery Application Definition.
     *
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application Definition is to be
     *     created.
     * @param galleryApplicationName The name of the gallery Application Definition to be created or updated. The
     *     allowed characters are alphabets and numbers with dots, dashes, and periods allowed in the middle. The
     *     maximum length is 80 characters.
     * @param galleryApplication Specifies information about the gallery Application Definition that you want to create
     *     or update.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return specifies information about the gallery Application Definition that you want to create or update.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponse(
        String resourceGroupName,
        String galleryName,
        String galleryApplicationName,
        GalleryApplication galleryApplication,
        Context context) {
        return this
            .serviceClient
            .createOrUpdateWithResponseAsync(
                resourceGroupName, galleryName, galleryApplicationName, galleryApplication, context);
    }

    /**
     * Create or update a gallery Application Definition.
     *
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application Definition is to be
     *     created.
     * @param galleryApplicationName The name of the gallery Application Definition to be created or updated. The
     *     allowed characters are alphabets and numbers with dots, dashes, and periods allowed in the middle. The
     *     maximum length is 80 characters.
     * @param galleryApplication Specifies information about the gallery Application Definition that you want to create
     *     or update.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return specifies information about the gallery Application Definition that you want to create or update.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PollerFlux<PollResult<GalleryApplication>, GalleryApplication> beginCreateOrUpdate(
        String resourceGroupName,
        String galleryName,
        String galleryApplicationName,
        GalleryApplication galleryApplication) {
        return this
            .serviceClient
            .beginCreateOrUpdate(resourceGroupName, galleryName, galleryApplicationName, galleryApplication);
    }

    /**
     * Create or update a gallery Application Definition.
     *
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application Definition is to be
     *     created.
     * @param galleryApplicationName The name of the gallery Application Definition to be created or updated. The
     *     allowed characters are alphabets and numbers with dots, dashes, and periods allowed in the middle. The
     *     maximum length is 80 characters.
     * @param galleryApplication Specifies information about the gallery Application Definition that you want to create
     *     or update.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return specifies information about the gallery Application Definition that you want to create or update.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PollerFlux<PollResult<GalleryApplication>, GalleryApplication> beginCreateOrUpdate(
        String resourceGroupName,
        String galleryName,
        String galleryApplicationName,
        GalleryApplication galleryApplication,
        Context context) {
        return this
            .serviceClient
            .beginCreateOrUpdate(resourceGroupName, galleryName, galleryApplicationName, galleryApplication, context);
    }

    /**
     * Create or update a gallery Application Definition.
     *
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application Definition is to be
     *     created.
     * @param galleryApplicationName The name of the gallery Application Definition to be created or updated. The
     *     allowed characters are alphabets and numbers with dots, dashes, and periods allowed in the middle. The
     *     maximum length is 80 characters.
     * @param galleryApplication Specifies information about the gallery Application Definition that you want to create
     *     or update.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return specifies information about the gallery Application Definition that you want to create or update.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<GalleryApplication> createOrUpdate(
        String resourceGroupName,
        String galleryName,
        String galleryApplicationName,
        GalleryApplication galleryApplication) {
        return this
            .serviceClient
            .createOrUpdateAsync(resourceGroupName, galleryName, galleryApplicationName, galleryApplication);
    }

    /**
     * Create or update a gallery Application Definition.
     *
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application Definition is to be
     *     created.
     * @param galleryApplicationName The name of the gallery Application Definition to be created or updated. The
     *     allowed characters are alphabets and numbers with dots, dashes, and periods allowed in the middle. The
     *     maximum length is 80 characters.
     * @param galleryApplication Specifies information about the gallery Application Definition that you want to create
     *     or update.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return specifies information about the gallery Application Definition that you want to create or update.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<GalleryApplication> createOrUpdate(
        String resourceGroupName,
        String galleryName,
        String galleryApplicationName,
        GalleryApplication galleryApplication,
        Context context) {
        return this
            .serviceClient
            .createOrUpdateAsync(resourceGroupName, galleryName, galleryApplicationName, galleryApplication, context);
    }

    /**
     * Update a gallery Application Definition.
     *
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application Definition is to be
     *     updated.
     * @param galleryApplicationName The name of the gallery Application Definition to be updated. The allowed
     *     characters are alphabets and numbers with dots, dashes, and periods allowed in the middle. The maximum length
     *     is 80 characters.
     * @param galleryApplication Specifies information about the gallery Application Definition that you want to update.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return specifies information about the gallery Application Definition that you want to create or update.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Flux<ByteBuffer>>> updateWithResponse(
        String resourceGroupName,
        String galleryName,
        String galleryApplicationName,
        GalleryApplicationUpdate galleryApplication) {
        return this
            .serviceClient
            .updateWithResponseAsync(resourceGroupName, galleryName, galleryApplicationName, galleryApplication);
    }

    /**
     * Update a gallery Application Definition.
     *
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application Definition is to be
     *     updated.
     * @param galleryApplicationName The name of the gallery Application Definition to be updated. The allowed
     *     characters are alphabets and numbers with dots, dashes, and periods allowed in the middle. The maximum length
     *     is 80 characters.
     * @param galleryApplication Specifies information about the gallery Application Definition that you want to update.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return specifies information about the gallery Application Definition that you want to create or update.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Flux<ByteBuffer>>> updateWithResponse(
        String resourceGroupName,
        String galleryName,
        String galleryApplicationName,
        GalleryApplicationUpdate galleryApplication,
        Context context) {
        return this
            .serviceClient
            .updateWithResponseAsync(
                resourceGroupName, galleryName, galleryApplicationName, galleryApplication, context);
    }

    /**
     * Update a gallery Application Definition.
     *
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application Definition is to be
     *     updated.
     * @param galleryApplicationName The name of the gallery Application Definition to be updated. The allowed
     *     characters are alphabets and numbers with dots, dashes, and periods allowed in the middle. The maximum length
     *     is 80 characters.
     * @param galleryApplication Specifies information about the gallery Application Definition that you want to update.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return specifies information about the gallery Application Definition that you want to create or update.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PollerFlux<PollResult<GalleryApplication>, GalleryApplication> beginUpdate(
        String resourceGroupName,
        String galleryName,
        String galleryApplicationName,
        GalleryApplicationUpdate galleryApplication) {
        return this
            .serviceClient
            .beginUpdate(resourceGroupName, galleryName, galleryApplicationName, galleryApplication);
    }

    /**
     * Update a gallery Application Definition.
     *
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application Definition is to be
     *     updated.
     * @param galleryApplicationName The name of the gallery Application Definition to be updated. The allowed
     *     characters are alphabets and numbers with dots, dashes, and periods allowed in the middle. The maximum length
     *     is 80 characters.
     * @param galleryApplication Specifies information about the gallery Application Definition that you want to update.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return specifies information about the gallery Application Definition that you want to create or update.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PollerFlux<PollResult<GalleryApplication>, GalleryApplication> beginUpdate(
        String resourceGroupName,
        String galleryName,
        String galleryApplicationName,
        GalleryApplicationUpdate galleryApplication,
        Context context) {
        return this
            .serviceClient
            .beginUpdate(resourceGroupName, galleryName, galleryApplicationName, galleryApplication, context);
    }

    /**
     * Update a gallery Application Definition.
     *
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application Definition is to be
     *     updated.
     * @param galleryApplicationName The name of the gallery Application Definition to be updated. The allowed
     *     characters are alphabets and numbers with dots, dashes, and periods allowed in the middle. The maximum length
     *     is 80 characters.
     * @param galleryApplication Specifies information about the gallery Application Definition that you want to update.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return specifies information about the gallery Application Definition that you want to create or update.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<GalleryApplication> update(
        String resourceGroupName,
        String galleryName,
        String galleryApplicationName,
        GalleryApplicationUpdate galleryApplication) {
        return this
            .serviceClient
            .updateAsync(resourceGroupName, galleryName, galleryApplicationName, galleryApplication);
    }

    /**
     * Update a gallery Application Definition.
     *
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application Definition is to be
     *     updated.
     * @param galleryApplicationName The name of the gallery Application Definition to be updated. The allowed
     *     characters are alphabets and numbers with dots, dashes, and periods allowed in the middle. The maximum length
     *     is 80 characters.
     * @param galleryApplication Specifies information about the gallery Application Definition that you want to update.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return specifies information about the gallery Application Definition that you want to create or update.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<GalleryApplication> update(
        String resourceGroupName,
        String galleryName,
        String galleryApplicationName,
        GalleryApplicationUpdate galleryApplication,
        Context context) {
        return this
            .serviceClient
            .updateAsync(resourceGroupName, galleryName, galleryApplicationName, galleryApplication, context);
    }

    /**
     * Retrieves information about a gallery Application Definition.
     *
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery from which the Application Definitions are to be
     *     retrieved.
     * @param galleryApplicationName The name of the gallery Application Definition to be retrieved.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return specifies information about the gallery Application Definition that you want to create or update.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<GalleryApplication>> getWithResponse(
        String resourceGroupName, String galleryName, String galleryApplicationName) {
        return this.serviceClient.getWithResponseAsync(resourceGroupName, galleryName, galleryApplicationName);
    }

    /**
     * Retrieves information about a gallery Application Definition.
     *
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery from which the Application Definitions are to be
     *     retrieved.
     * @param galleryApplicationName The name of the gallery Application Definition to be retrieved.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return specifies information about the gallery Application Definition that you want to create or update.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<GalleryApplication>> getWithResponse(
        String resourceGroupName, String galleryName, String galleryApplicationName, Context context) {
        return this.serviceClient.getWithResponseAsync(resourceGroupName, galleryName, galleryApplicationName, context);
    }

    /**
     * Retrieves information about a gallery Application Definition.
     *
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery from which the Application Definitions are to be
     *     retrieved.
     * @param galleryApplicationName The name of the gallery Application Definition to be retrieved.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return specifies information about the gallery Application Definition that you want to create or update.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<GalleryApplication> get(String resourceGroupName, String galleryName, String galleryApplicationName) {
        return this.serviceClient.getAsync(resourceGroupName, galleryName, galleryApplicationName);
    }

    /**
     * Retrieves information about a gallery Application Definition.
     *
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery from which the Application Definitions are to be
     *     retrieved.
     * @param galleryApplicationName The name of the gallery Application Definition to be retrieved.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return specifies information about the gallery Application Definition that you want to create or update.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<GalleryApplication> get(
        String resourceGroupName, String galleryName, String galleryApplicationName, Context context) {
        return this.serviceClient.getAsync(resourceGroupName, galleryName, galleryApplicationName, context);
    }

    /**
     * Delete a gallery Application.
     *
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application Definition is to be
     *     deleted.
     * @param galleryApplicationName The name of the gallery Application Definition to be deleted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Flux<ByteBuffer>>> deleteWithResponse(
        String resourceGroupName, String galleryName, String galleryApplicationName) {
        return this.serviceClient.deleteWithResponseAsync(resourceGroupName, galleryName, galleryApplicationName);
    }

    /**
     * Delete a gallery Application.
     *
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application Definition is to be
     *     deleted.
     * @param galleryApplicationName The name of the gallery Application Definition to be deleted.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Flux<ByteBuffer>>> deleteWithResponse(
        String resourceGroupName, String galleryName, String galleryApplicationName, Context context) {
        return this
            .serviceClient
            .deleteWithResponseAsync(resourceGroupName, galleryName, galleryApplicationName, context);
    }

    /**
     * Delete a gallery Application.
     *
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application Definition is to be
     *     deleted.
     * @param galleryApplicationName The name of the gallery Application Definition to be deleted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PollerFlux<PollResult<Void>, Void> beginDelete(
        String resourceGroupName, String galleryName, String galleryApplicationName) {
        return this.serviceClient.beginDelete(resourceGroupName, galleryName, galleryApplicationName);
    }

    /**
     * Delete a gallery Application.
     *
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application Definition is to be
     *     deleted.
     * @param galleryApplicationName The name of the gallery Application Definition to be deleted.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PollerFlux<PollResult<Void>, Void> beginDelete(
        String resourceGroupName, String galleryName, String galleryApplicationName, Context context) {
        return this.serviceClient.beginDelete(resourceGroupName, galleryName, galleryApplicationName, context);
    }

    /**
     * Delete a gallery Application.
     *
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application Definition is to be
     *     deleted.
     * @param galleryApplicationName The name of the gallery Application Definition to be deleted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> delete(String resourceGroupName, String galleryName, String galleryApplicationName) {
        return this.serviceClient.deleteAsync(resourceGroupName, galleryName, galleryApplicationName);
    }

    /**
     * Delete a gallery Application.
     *
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application Definition is to be
     *     deleted.
     * @param galleryApplicationName The name of the gallery Application Definition to be deleted.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> delete(
        String resourceGroupName, String galleryName, String galleryApplicationName, Context context) {
        return this.serviceClient.deleteAsync(resourceGroupName, galleryName, galleryApplicationName, context);
    }

    /**
     * List gallery Application Definitions in a gallery.
     *
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery from which Application Definitions are to be
     *     listed.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List Gallery Applications operation response.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public Mono<PagedResponse<GalleryApplication>> listByGallerySinglePage(
        String resourceGroupName, String galleryName) {
        return this.serviceClient.listByGallerySinglePageAsync(resourceGroupName, galleryName);
    }

    /**
     * List gallery Application Definitions in a gallery.
     *
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery from which Application Definitions are to be
     *     listed.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List Gallery Applications operation response.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public Mono<PagedResponse<GalleryApplication>> listByGallerySinglePage(
        String resourceGroupName, String galleryName, Context context) {
        return this.serviceClient.listByGallerySinglePageAsync(resourceGroupName, galleryName, context);
    }

    /**
     * List gallery Application Definitions in a gallery.
     *
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery from which Application Definitions are to be
     *     listed.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List Gallery Applications operation response.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<GalleryApplication> listByGallery(String resourceGroupName, String galleryName) {
        return this.serviceClient.listByGalleryAsync(resourceGroupName, galleryName);
    }

    /**
     * List gallery Application Definitions in a gallery.
     *
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery from which Application Definitions are to be
     *     listed.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List Gallery Applications operation response.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<GalleryApplication> listByGallery(String resourceGroupName, String galleryName, Context context) {
        return this.serviceClient.listByGalleryAsync(resourceGroupName, galleryName, context);
    }

    /**
     * Create or update a gallery Application Definition.
     *
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application Definition is to be
     *     created.
     * @param galleryApplicationName The name of the gallery Application Definition to be created or updated. The
     *     allowed characters are alphabets and numbers with dots, dashes, and periods allowed in the middle. The
     *     maximum length is 80 characters.
     * @param galleryApplication Specifies information about the gallery Application Definition that you want to create
     *     or update.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return specifies information about the gallery Application Definition that you want to create or update.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<GalleryApplication>> beginCreateOrUpdateWithoutPollingWithResponse(
        String resourceGroupName,
        String galleryName,
        String galleryApplicationName,
        GalleryApplication galleryApplication) {
        return this
            .serviceClient
            .beginCreateOrUpdateWithoutPollingWithResponseAsync(
                resourceGroupName, galleryName, galleryApplicationName, galleryApplication);
    }

    /**
     * Create or update a gallery Application Definition.
     *
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application Definition is to be
     *     created.
     * @param galleryApplicationName The name of the gallery Application Definition to be created or updated. The
     *     allowed characters are alphabets and numbers with dots, dashes, and periods allowed in the middle. The
     *     maximum length is 80 characters.
     * @param galleryApplication Specifies information about the gallery Application Definition that you want to create
     *     or update.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return specifies information about the gallery Application Definition that you want to create or update.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<GalleryApplication>> beginCreateOrUpdateWithoutPollingWithResponse(
        String resourceGroupName,
        String galleryName,
        String galleryApplicationName,
        GalleryApplication galleryApplication,
        Context context) {
        return this
            .serviceClient
            .beginCreateOrUpdateWithoutPollingWithResponseAsync(
                resourceGroupName, galleryName, galleryApplicationName, galleryApplication, context);
    }

    /**
     * Create or update a gallery Application Definition.
     *
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application Definition is to be
     *     created.
     * @param galleryApplicationName The name of the gallery Application Definition to be created or updated. The
     *     allowed characters are alphabets and numbers with dots, dashes, and periods allowed in the middle. The
     *     maximum length is 80 characters.
     * @param galleryApplication Specifies information about the gallery Application Definition that you want to create
     *     or update.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return specifies information about the gallery Application Definition that you want to create or update.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<GalleryApplication> beginCreateOrUpdateWithoutPolling(
        String resourceGroupName,
        String galleryName,
        String galleryApplicationName,
        GalleryApplication galleryApplication) {
        return this
            .serviceClient
            .beginCreateOrUpdateWithoutPollingAsync(
                resourceGroupName, galleryName, galleryApplicationName, galleryApplication);
    }

    /**
     * Create or update a gallery Application Definition.
     *
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application Definition is to be
     *     created.
     * @param galleryApplicationName The name of the gallery Application Definition to be created or updated. The
     *     allowed characters are alphabets and numbers with dots, dashes, and periods allowed in the middle. The
     *     maximum length is 80 characters.
     * @param galleryApplication Specifies information about the gallery Application Definition that you want to create
     *     or update.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return specifies information about the gallery Application Definition that you want to create or update.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<GalleryApplication> beginCreateOrUpdateWithoutPolling(
        String resourceGroupName,
        String galleryName,
        String galleryApplicationName,
        GalleryApplication galleryApplication,
        Context context) {
        return this
            .serviceClient
            .beginCreateOrUpdateWithoutPollingAsync(
                resourceGroupName, galleryName, galleryApplicationName, galleryApplication, context);
    }

    /**
     * Update a gallery Application Definition.
     *
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application Definition is to be
     *     updated.
     * @param galleryApplicationName The name of the gallery Application Definition to be updated. The allowed
     *     characters are alphabets and numbers with dots, dashes, and periods allowed in the middle. The maximum length
     *     is 80 characters.
     * @param galleryApplication Specifies information about the gallery Application Definition that you want to update.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return specifies information about the gallery Application Definition that you want to create or update.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<GalleryApplication>> beginUpdateWithoutPollingWithResponse(
        String resourceGroupName,
        String galleryName,
        String galleryApplicationName,
        GalleryApplicationUpdate galleryApplication) {
        return this
            .serviceClient
            .beginUpdateWithoutPollingWithResponseAsync(
                resourceGroupName, galleryName, galleryApplicationName, galleryApplication);
    }

    /**
     * Update a gallery Application Definition.
     *
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application Definition is to be
     *     updated.
     * @param galleryApplicationName The name of the gallery Application Definition to be updated. The allowed
     *     characters are alphabets and numbers with dots, dashes, and periods allowed in the middle. The maximum length
     *     is 80 characters.
     * @param galleryApplication Specifies information about the gallery Application Definition that you want to update.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return specifies information about the gallery Application Definition that you want to create or update.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<GalleryApplication>> beginUpdateWithoutPollingWithResponse(
        String resourceGroupName,
        String galleryName,
        String galleryApplicationName,
        GalleryApplicationUpdate galleryApplication,
        Context context) {
        return this
            .serviceClient
            .beginUpdateWithoutPollingWithResponseAsync(
                resourceGroupName, galleryName, galleryApplicationName, galleryApplication, context);
    }

    /**
     * Update a gallery Application Definition.
     *
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application Definition is to be
     *     updated.
     * @param galleryApplicationName The name of the gallery Application Definition to be updated. The allowed
     *     characters are alphabets and numbers with dots, dashes, and periods allowed in the middle. The maximum length
     *     is 80 characters.
     * @param galleryApplication Specifies information about the gallery Application Definition that you want to update.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return specifies information about the gallery Application Definition that you want to create or update.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<GalleryApplication> beginUpdateWithoutPolling(
        String resourceGroupName,
        String galleryName,
        String galleryApplicationName,
        GalleryApplicationUpdate galleryApplication) {
        return this
            .serviceClient
            .beginUpdateWithoutPollingAsync(resourceGroupName, galleryName, galleryApplicationName, galleryApplication);
    }

    /**
     * Update a gallery Application Definition.
     *
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application Definition is to be
     *     updated.
     * @param galleryApplicationName The name of the gallery Application Definition to be updated. The allowed
     *     characters are alphabets and numbers with dots, dashes, and periods allowed in the middle. The maximum length
     *     is 80 characters.
     * @param galleryApplication Specifies information about the gallery Application Definition that you want to update.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return specifies information about the gallery Application Definition that you want to create or update.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<GalleryApplication> beginUpdateWithoutPolling(
        String resourceGroupName,
        String galleryName,
        String galleryApplicationName,
        GalleryApplicationUpdate galleryApplication,
        Context context) {
        return this
            .serviceClient
            .beginUpdateWithoutPollingAsync(
                resourceGroupName, galleryName, galleryApplicationName, galleryApplication, context);
    }

    /**
     * Delete a gallery Application.
     *
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application Definition is to be
     *     deleted.
     * @param galleryApplicationName The name of the gallery Application Definition to be deleted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> beginDeleteWithoutPollingWithResponse(
        String resourceGroupName, String galleryName, String galleryApplicationName) {
        return this
            .serviceClient
            .beginDeleteWithoutPollingWithResponseAsync(resourceGroupName, galleryName, galleryApplicationName);
    }

    /**
     * Delete a gallery Application.
     *
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application Definition is to be
     *     deleted.
     * @param galleryApplicationName The name of the gallery Application Definition to be deleted.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> beginDeleteWithoutPollingWithResponse(
        String resourceGroupName, String galleryName, String galleryApplicationName, Context context) {
        return this
            .serviceClient
            .beginDeleteWithoutPollingWithResponseAsync(
                resourceGroupName, galleryName, galleryApplicationName, context);
    }

    /**
     * Delete a gallery Application.
     *
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application Definition is to be
     *     deleted.
     * @param galleryApplicationName The name of the gallery Application Definition to be deleted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> beginDeleteWithoutPolling(
        String resourceGroupName, String galleryName, String galleryApplicationName) {
        return this
            .serviceClient
            .beginDeleteWithoutPollingAsync(resourceGroupName, galleryName, galleryApplicationName);
    }

    /**
     * Delete a gallery Application.
     *
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application Definition is to be
     *     deleted.
     * @param galleryApplicationName The name of the gallery Application Definition to be deleted.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> beginDeleteWithoutPolling(
        String resourceGroupName, String galleryName, String galleryApplicationName, Context context) {
        return this
            .serviceClient
            .beginDeleteWithoutPollingAsync(resourceGroupName, galleryName, galleryApplicationName, context);
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List Gallery Applications operation response.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public Mono<PagedResponse<GalleryApplication>> listByGalleryNextSinglePage(String nextLink) {
        return this.serviceClient.listByGalleryNextSinglePageAsync(nextLink);
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink null
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List Gallery Applications operation response.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public Mono<PagedResponse<GalleryApplication>> listByGalleryNextSinglePage(String nextLink, Context context) {
        return this.serviceClient.listByGalleryNextSinglePageAsync(nextLink, context);
    }
}
