// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.management.vanilla.compute;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.management.vanilla.compute.implementation.ProximityPlacementGroupsImpl;
import com.azure.management.vanilla.compute.models.ProximityPlacementGroup;
import java.util.Map;

/** Initializes a new instance of the synchronous ComputeManagementClient type. */
@ServiceClient(builder = ComputeManagementClientBuilder.class)
public final class ProximityPlacementGroupsClient {
    private ProximityPlacementGroupsImpl serviceClient;

    /** Initializes an instance of ProximityPlacementGroups client. */
    ProximityPlacementGroupsClient(ProximityPlacementGroupsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Create or update a proximity placement group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param proximityPlacementGroupName The name of the proximity placement group.
     * @param parameters Specifies information about the proximity placement group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return specifies information about the proximity placement group.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProximityPlacementGroup createOrUpdate(
        String resourceGroupName, String proximityPlacementGroupName, ProximityPlacementGroup parameters) {
        return this.serviceClient.createOrUpdate(resourceGroupName, proximityPlacementGroupName, parameters);
    }

    /**
     * Create or update a proximity placement group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param proximityPlacementGroupName The name of the proximity placement group.
     * @param parameters Specifies information about the proximity placement group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return specifies information about the proximity placement group.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProximityPlacementGroup createOrUpdate(
        String resourceGroupName,
        String proximityPlacementGroupName,
        ProximityPlacementGroup parameters,
        Context context) {
        return this.serviceClient.createOrUpdate(resourceGroupName, proximityPlacementGroupName, parameters, context);
    }

    /**
     * Update a proximity placement group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param proximityPlacementGroupName The name of the proximity placement group.
     * @param tags Resource tags.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return specifies information about the proximity placement group.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProximityPlacementGroup update(
        String resourceGroupName, String proximityPlacementGroupName, Map<String, String> tags) {
        return this.serviceClient.update(resourceGroupName, proximityPlacementGroupName, tags);
    }

    /**
     * Update a proximity placement group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param proximityPlacementGroupName The name of the proximity placement group.
     * @param tags Resource tags.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return specifies information about the proximity placement group.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProximityPlacementGroup update(
        String resourceGroupName, String proximityPlacementGroupName, Map<String, String> tags, Context context) {
        return this.serviceClient.update(resourceGroupName, proximityPlacementGroupName, tags, context);
    }

    /**
     * Delete a proximity placement group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param proximityPlacementGroupName The name of the proximity placement group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String proximityPlacementGroupName) {
        this.serviceClient.delete(resourceGroupName, proximityPlacementGroupName);
    }

    /**
     * Delete a proximity placement group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param proximityPlacementGroupName The name of the proximity placement group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String proximityPlacementGroupName, Context context) {
        this.serviceClient.delete(resourceGroupName, proximityPlacementGroupName, context);
    }

    /**
     * Retrieves information about a proximity placement group .
     *
     * @param resourceGroupName The name of the resource group.
     * @param proximityPlacementGroupName The name of the proximity placement group.
     * @param includeColocationStatus includeColocationStatus=true enables fetching the colocation status of all the
     *     resources in the proximity placement group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return specifies information about the proximity placement group.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProximityPlacementGroup getByResourceGroup(
        String resourceGroupName, String proximityPlacementGroupName, String includeColocationStatus) {
        return this
            .serviceClient
            .getByResourceGroup(resourceGroupName, proximityPlacementGroupName, includeColocationStatus);
    }

    /**
     * Retrieves information about a proximity placement group .
     *
     * @param resourceGroupName The name of the resource group.
     * @param proximityPlacementGroupName The name of the proximity placement group.
     * @param includeColocationStatus includeColocationStatus=true enables fetching the colocation status of all the
     *     resources in the proximity placement group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return specifies information about the proximity placement group.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProximityPlacementGroup getByResourceGroup(
        String resourceGroupName, String proximityPlacementGroupName, String includeColocationStatus, Context context) {
        return this
            .serviceClient
            .getByResourceGroup(resourceGroupName, proximityPlacementGroupName, includeColocationStatus, context);
    }

    /**
     * Retrieves information about a proximity placement group .
     *
     * @param resourceGroupName The name of the resource group.
     * @param proximityPlacementGroupName The name of the proximity placement group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return specifies information about the proximity placement group.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProximityPlacementGroup getByResourceGroup(String resourceGroupName, String proximityPlacementGroupName) {
        return this.serviceClient.getByResourceGroup(resourceGroupName, proximityPlacementGroupName);
    }

    /**
     * Lists all proximity placement groups in a subscription.
     *
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List Proximity Placement Group operation response.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ProximityPlacementGroup> list() {
        return this.serviceClient.list();
    }

    /**
     * Lists all proximity placement groups in a subscription.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List Proximity Placement Group operation response.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ProximityPlacementGroup> list(Context context) {
        return this.serviceClient.list(context);
    }

    /**
     * Lists all proximity placement groups in a resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List Proximity Placement Group operation response.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ProximityPlacementGroup> listByResourceGroup(String resourceGroupName) {
        return this.serviceClient.listByResourceGroup(resourceGroupName);
    }

    /**
     * Lists all proximity placement groups in a resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List Proximity Placement Group operation response.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ProximityPlacementGroup> listByResourceGroup(String resourceGroupName, Context context) {
        return this.serviceClient.listByResourceGroup(resourceGroupName, context);
    }
}
