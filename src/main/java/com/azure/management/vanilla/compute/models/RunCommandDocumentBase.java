// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.management.vanilla.compute.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/** The RunCommandDocumentBase model. */
@Fluent
public class RunCommandDocumentBase {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(RunCommandDocumentBase.class);

    /*
     * The VM run command schema.
     */
    @JsonProperty(value = "$schema", required = true)
    private String schema;

    /*
     * The VM run command id.
     */
    @JsonProperty(value = "id", required = true)
    private String id;

    /*
     * The Operating System type.
     */
    @JsonProperty(value = "osType", required = true)
    private OperatingSystemTypes osType;

    /*
     * The VM run command label.
     */
    @JsonProperty(value = "label", required = true)
    private String label;

    /*
     * The VM run command description.
     */
    @JsonProperty(value = "description", required = true)
    private String description;

    /**
     * Get the schema property: The VM run command schema.
     *
     * @return the schema value.
     */
    public String getSchema() {
        return this.schema;
    }

    /**
     * Set the schema property: The VM run command schema.
     *
     * @param schema the schema value to set.
     * @return the RunCommandDocumentBase object itself.
     */
    public RunCommandDocumentBase setSchema(String schema) {
        this.schema = schema;
        return this;
    }

    /**
     * Get the id property: The VM run command id.
     *
     * @return the id value.
     */
    public String getId() {
        return this.id;
    }

    /**
     * Set the id property: The VM run command id.
     *
     * @param id the id value to set.
     * @return the RunCommandDocumentBase object itself.
     */
    public RunCommandDocumentBase setId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the osType property: The Operating System type.
     *
     * @return the osType value.
     */
    public OperatingSystemTypes getOsType() {
        return this.osType;
    }

    /**
     * Set the osType property: The Operating System type.
     *
     * @param osType the osType value to set.
     * @return the RunCommandDocumentBase object itself.
     */
    public RunCommandDocumentBase setOsType(OperatingSystemTypes osType) {
        this.osType = osType;
        return this;
    }

    /**
     * Get the label property: The VM run command label.
     *
     * @return the label value.
     */
    public String getLabel() {
        return this.label;
    }

    /**
     * Set the label property: The VM run command label.
     *
     * @param label the label value to set.
     * @return the RunCommandDocumentBase object itself.
     */
    public RunCommandDocumentBase setLabel(String label) {
        this.label = label;
        return this;
    }

    /**
     * Get the description property: The VM run command description.
     *
     * @return the description value.
     */
    public String getDescription() {
        return this.description;
    }

    /**
     * Set the description property: The VM run command description.
     *
     * @param description the description value to set.
     * @return the RunCommandDocumentBase object itself.
     */
    public RunCommandDocumentBase setDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (getSchema() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property schema in model RunCommandDocumentBase"));
        }
        if (getId() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property id in model RunCommandDocumentBase"));
        }
        if (getOsType() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property osType in model RunCommandDocumentBase"));
        }
        if (getLabel() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property label in model RunCommandDocumentBase"));
        }
        if (getDescription() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property description in model RunCommandDocumentBase"));
        }
    }
}
